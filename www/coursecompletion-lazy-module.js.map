{"version":3,"sources":["./src/addons/coursecompletion/pages/report/report.html","./src/addons/coursecompletion/coursecompletion-lazy.module.ts","./src/addons/coursecompletion/pages/report/report.ts"],"names":[],"mappings":"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","file":"coursecompletion-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.coursecompletion.coursecompletion' | translate }}</h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!completionLoaded\\\" (ionRefresh)=\\\"refreshCompletion($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"completionLoaded\\\">\\r\\n        <ion-card *ngIf=\\\"completion && tracked\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.coursecompletion.status' | translate }}</h2>\\r\\n                    <p>{{ statusText! | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.coursecompletion.required' | translate }}</h2>\\r\\n                    <p *ngIf=\\\"completion.aggregation === 1\\\">{{ 'addon.coursecompletion.criteriarequiredall' | translate }}</p>\\r\\n                    <p *ngIf=\\\"completion.aggregation === 2\\\">{{ 'addon.coursecompletion.criteriarequiredany' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n        <ion-card *ngIf=\\\"completion && tracked\\\">\\r\\n            <ion-item-divider>\\r\\n                <ion-label><h2>{{ 'addon.coursecompletion.requiredcriteria' | translate }}</h2></ion-label>\\r\\n            </ion-item-divider>\\r\\n            <ion-item class=\\\"ion-hide-md-up ion-text-wrap\\\" *ngFor=\\\"let criteria of completion.completions\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">\\r\\n                        <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.criteria\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                    </p>\\r\\n                    <p><core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.requirement\\\" [filter]=\\\"false\\\"></core-format-text></p>\\r\\n                </ion-label>\\r\\n                <strong slot=\\\"end\\\">{{ criteria.status }}</strong>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-hide-md-down ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <ion-row>\\r\\n                        <ion-col><strong>{{ 'addon.coursecompletion.criteriagroup' | translate }}</strong></ion-col>\\r\\n                        <ion-col><strong>{{ 'addon.coursecompletion.criteria' | translate }}</strong></ion-col>\\r\\n                        <ion-col><strong>{{ 'addon.coursecompletion.requirement' | translate }}</strong></ion-col>\\r\\n                        <ion-col><strong>{{ 'addon.coursecompletion.status' | translate }}</strong></ion-col>\\r\\n                        <ion-col><strong>{{ 'addon.coursecompletion.complete' | translate }}</strong></ion-col>\\r\\n                        <ion-col><strong>{{ 'addon.coursecompletion.completiondate' | translate }}</strong></ion-col>\\r\\n                    </ion-row>\\r\\n                    <ion-row *ngFor=\\\"let criteria of completion.completions\\\">\\r\\n                        <ion-col>\\r\\n                            <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.title\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                        </ion-col>\\r\\n                        <ion-col>\\r\\n                            <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.criteria\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                        </ion-col>\\r\\n                        <ion-col>\\r\\n                            <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.requirement\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                        </ion-col>\\r\\n                        <ion-col>\\r\\n                            <core-format-text [text]=\\\"criteria.details.status\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                        </ion-col>\\r\\n                        <ion-col>{{ criteria.status }}</ion-col>\\r\\n                        <ion-col *ngIf=\\\"criteria.timecompleted\\\">\\r\\n                            {{ criteria.timecompleted * 1000 | coreFormatDate :'strftimedatetimeshort' }}\\r\\n                        </ion-col>\\r\\n                        <ion-col *ngIf=\\\"!criteria.timecompleted\\\"></ion-col>\\r\\n                    </ion-row>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n        <ion-card *ngIf=\\\"showSelfComplete && tracked\\\">\\r\\n            <ion-item-divider>\\r\\n                <ion-label><h2>{{ 'addon.coursecompletion.manualselfcompletion' | translate }}</h2></ion-label>\\r\\n            </ion-item-divider>\\r\\n            <ion-item>\\r\\n                <ion-label>\\r\\n                    <ion-button expand=\\\"block\\\" (click)=\\\"completeCourse()\\\">\\r\\n                        {{ 'addon.coursecompletion.completecourse' | translate }}\\r\\n                    </ion-button>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <ion-card class=\\\"core-warning-card\\\" *ngIf=\\\"!tracked\\\">\\r\\n            <ion-item>\\r\\n                <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>{{ 'addon.coursecompletion.nottracked' | translate }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\r\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\r\nimport { AddonCourseCompletionReportPage } from './pages/report/report';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonCourseCompletionReportPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreCommentsComponentsModule,\r\n        CoreTagComponentsModule,\r\n    ],\r\n    exports: [RouterModule],\r\n    declarations: [\r\n        AddonCourseCompletionReportPage,\r\n    ],\r\n})\r\nexport class AddonCourseCompletionLazyModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport {\r\n    AddonCourseCompletion,\r\n    AddonCourseCompletionCourseCompletionStatus,\r\n} from '@addons/coursecompletion/services/coursecompletion';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\n\r\n/**\r\n * Page that displays the course completion report.\r\n */\r\n@Component({\r\n    selector: 'page-addon-course-completion-report',\r\n    templateUrl: 'report.html',\r\n})\r\nexport class AddonCourseCompletionReportPage implements OnInit {\r\n\r\n    protected courseId!: number;\r\n    protected userId!: number;\r\n\r\n    completionLoaded = false;\r\n    completion?: AddonCourseCompletionCourseCompletionStatus;\r\n    showSelfComplete = false;\r\n    tracked = true; // Whether completion is tracked.\r\n    statusText?: string;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    ngOnInit(): void {\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.userId = CoreNavigator.getRouteNumberParam('userId') || CoreSites.getCurrentSiteUserId();\r\n\r\n        if (!this.userId) {\r\n            this.userId = CoreSites.getCurrentSiteUserId();\r\n        }\r\n\r\n        this.fetchCompletion().finally(() => {\r\n            this.completionLoaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch compleiton data.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchCompletion(): Promise<void> {\r\n        try {\r\n            this.completion = await AddonCourseCompletion.getCompletion(this.courseId, this.userId);\r\n\r\n            this.statusText = AddonCourseCompletion.getCompletedStatusText(this.completion);\r\n            this.showSelfComplete = AddonCourseCompletion.canMarkSelfCompleted(this.userId, this.completion);\r\n\r\n            this.tracked = true;\r\n        } catch (error) {\r\n            if (error && error.errorcode == 'notenroled') {\r\n                // Not enrolled error, probably a teacher.\r\n                this.tracked = false;\r\n            } else {\r\n                CoreDomUtils.showErrorModalDefault(error, 'addon.coursecompletion.couldnotloadreport', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh completion data on PTR.\r\n     *\r\n     * @param refresher Refresher instance.\r\n     */\r\n    async refreshCompletion(refresher?: IonRefresher): Promise<void> {\r\n        await AddonCourseCompletion.invalidateCourseCompletion(this.courseId, this.userId).finally(() => {\r\n            this.fetchCompletion().finally(() => {\r\n                refresher?.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Mark course as completed.\r\n     */\r\n    async completeCourse(): Promise<void> {\r\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\r\n\r\n        try {\r\n            await AddonCourseCompletion.markCourseAsSelfCompleted(this.courseId);\r\n\r\n            await this.refreshCompletion();\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}