{"version":3,"sources":["./src/addons/notifications/components/actions/addon-notifications-actions.html","./src/addons/notifications/pages/list/list.html","./src/addons/notifications/components/actions/actions.ts","./src/addons/notifications/components/components.module.ts","./src/addons/notifications/pages/list/list.module.ts","./src/addons/notifications/pages/list/list.scss","./src/addons/notifications/pages/list/list.ts"],"names":[],"mappings":"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","file":"pages-list-list-module.js","sourcesContent":["export default \"<ion-row *ngIf=\\\"actions && actions.length > 0\\\" class=\\\"justify-content-around\\\">\\r\\n    <ion-col *ngFor=\\\"let action of actions\\\">\\r\\n        <ion-button fill=\\\"clear\\\" expand=\\\"block\\\" (click)=\\\"action.action()\\\">\\r\\n            <ion-icon slot=\\\"start\\\" name=\\\"{{action.icon}}\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            {{ action.message | translate }}\\r\\n        </ion-button>\\r\\n    </ion-col>\\r\\n</ion-row>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.notifications.notifications' | translate }}</h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!notificationsLoaded\\\" (ionRefresh)=\\\"refreshNotifications($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"notificationsLoaded\\\">\\r\\n        <div class=\\\"ion-padding\\\" *ngIf=\\\"canMarkAllNotificationsAsRead\\\">\\r\\n            <ion-button [disabled]=\\\"loadingMarkAllNotificationsAsRead\\\" expand=\\\"block\\\" (click)=\\\"markAllNotificationsAsRead()\\\"\\r\\n                color=\\\"light\\\">\\r\\n                <ion-icon slot=\\\"start\\\" name=\\\"fas-check\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"!loadingMarkAllNotificationsAsRead\\\"></ion-icon>\\r\\n                <ion-spinner slot=\\\"start\\\" [attr.aria-label]=\\\"'core.loading' | translate\\\" *ngIf=\\\"loadingMarkAllNotificationsAsRead\\\">\\r\\n                </ion-spinner>\\r\\n                {{ 'addon.notifications.markallread' | translate }}\\r\\n            </ion-button>\\r\\n        </div>\\r\\n\\r\\n        <ion-card *ngFor=\\\"let notification of notifications\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\"\\r\\n                [attr.aria-label]=\\\"\\r\\n                    notification.timeread\\r\\n                    ? notification.subject\\r\\n                    : 'addon.notifications.unreadnotification' | translate: {$a: notification.subject}\\\">\\r\\n                <core-user-avatar *ngIf=\\\"notification.useridfrom > 0\\\" [user]=\\\"notification\\\" slot=\\\"start\\\"\\r\\n                    [profileUrl]=\\\"notification.profileimageurlfrom\\\" [fullname]=\\\"notification.userfromfullname\\\"\\r\\n                    [userId]=\\\"notification.useridfrom\\\" [extraIcon]=\\\"notification.iconurl\\\"></core-user-avatar>\\r\\n\\r\\n                <img *ngIf=\\\"notification.useridfrom <= 0 && notification.iconurl\\\" [src]=\\\"notification.iconurl\\\" alt=\\\"\\\"\\r\\n                    role=\\\"presentation\\\" class=\\\"core-notification-icon\\\" slot=\\\"start\\\">\\r\\n\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ notification.subject }}</p>\\r\\n                    <p *ngIf=\\\"notification.userfromfullname\\\">{{ notification.userfromfullname }}</p>\\r\\n                </ion-label>\\r\\n                <ion-note slot=\\\"end\\\" class=\\\"ion-float-end ion-text-end\\\">\\r\\n                    {{ notification.timecreated | coreDateDayOrTime }}\\r\\n                    <span *ngIf=\\\"!notification.timeread\\\">\\r\\n                        <ion-icon name=\\\"fas-circle\\\" color=\\\"primary\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    </span>\\r\\n                </ion-note>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <core-format-text [text]=\\\"notification.mobiletext | coreCreateLinks\\\" contextLevel=\\\"system\\\"\\r\\n                    [contextInstanceId]=\\\"0\\\" [maxHeight]=\\\"notification.displayfullhtml ? 120 : null\\\">\\r\\n                    </core-format-text>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <addon-notifications-actions [contextUrl]=\\\"notification.contexturl\\\" [courseId]=\\\"notification.courseid\\\"\\r\\n                [data]=\\\"notification.customdata\\\">\\r\\n            </addon-notifications-actions>\\r\\n        </ion-card>\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"!notifications || notifications.length <= 0\\\" icon=\\\"far-bell\\\"\\r\\n            [message]=\\\"'addon.notifications.therearentnotificationsyet' | translate\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadMoreNotifications($event)\\\" [error]=\\\"loadMoreError\\\">\\r\\n        </core-infinite-loading>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreContentLinksDelegate, CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\r\n\r\n/**\r\n * Component that displays the actions for a notification.\r\n */\r\n@Component({\r\n    selector: 'addon-notifications-actions',\r\n    templateUrl: 'addon-notifications-actions.html',\r\n})\r\nexport class AddonNotificationsActionsComponent implements OnInit {\r\n\r\n    @Input() contextUrl?: string;\r\n    @Input() courseId?: number;\r\n    @Input() data?: Record<string, unknown>; // Extra data to handle the URL.\r\n\r\n    actions: CoreContentLinksAction[] = [];\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        if (!this.contextUrl && (!this.data || !this.data.appurl)) {\r\n            // No URL, nothing to do.\r\n            return;\r\n        }\r\n\r\n        let actions: CoreContentLinksAction[] = [];\r\n\r\n        // Treat appurl first if any.\r\n        if (this.data?.appurl) {\r\n            actions = await CoreContentLinksDelegate.getActionsFor(\r\n                <string> this.data.appurl,\r\n                this.courseId,\r\n                undefined,\r\n                this.data,\r\n            );\r\n        }\r\n\r\n        if (!actions.length && this.contextUrl) {\r\n            // No appurl or cannot handle it. Try with contextUrl.\r\n            actions = await CoreContentLinksDelegate.getActionsFor(this.contextUrl, this.courseId, undefined, this.data);\r\n        }\r\n\r\n        if (!actions.length) {\r\n            // URL is not supported. Add an action to open it in browser.\r\n            actions.push({\r\n                message: 'core.view',\r\n                icon: 'fas-eye',\r\n                action: this.openInBrowser.bind(this),\r\n            });\r\n        }\r\n\r\n        this.actions = actions;\r\n    }\r\n\r\n    /**\r\n     * Default action. Open in browser.\r\n     *\r\n     * @param siteId Site ID to use.\r\n     */\r\n    protected async openInBrowser(siteId?: string): Promise<void> {\r\n        const url = <string> this.data?.appurl || this.contextUrl;\r\n\r\n        if (!url) {\r\n            return;\r\n        }\r\n\r\n        const site = await CoreSites.getSite(siteId);\r\n\r\n        site.openInBrowserWithAutoLogin(url);\r\n    }\r\n\r\n}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\n\r\nimport { AddonNotificationsActionsComponent } from './actions/actions';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonNotificationsActionsComponent,\r\n    ],\r\n    imports: [\r\n        CoreSharedModule,\r\n    ],\r\n    exports: [\r\n        AddonNotificationsActionsComponent,\r\n    ],\r\n})\r\nexport class AddonNotificationsComponentsModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonNotificationsComponentsModule } from '../../components/components.module';\r\nimport { AddonNotificationsListPage } from './list';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonNotificationsListPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        AddonNotificationsComponentsModule,\r\n    ],\r\n    declarations: [\r\n        AddonNotificationsListPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonNotificationsListPageModule {}\r\n","export default \":host .core-notification-icon {\\n  width: 34px;\\n  height: 34px;\\n  margin: 10px !important;\\n}\\n:host .item core-format-text ::ng-deep .forumpost {\\n  border: 1px solid var(--gray-light);\\n  width: 100%;\\n  margin: 0 0 1em 0;\\n}\\n:host .item core-format-text ::ng-deep .forumpost td {\\n  padding: 10px;\\n}\\n:host .item core-format-text ::ng-deep .forumpost .header {\\n  background-color: var(--gray-lighter);\\n}\\n:host .item core-format-text ::ng-deep .forumpost .picture {\\n  width: auto;\\n  text-align: center;\\n}\\n:host .item core-format-text ::ng-deep .forumpost .subject {\\n  font-weight: 700;\\n  margin-bottom: 1rem;\\n}\\n:host .item core-format-text ::ng-deep a {\\n  text-decoration: none;\\n}\\n:host .item core-format-text ::ng-deep .userpicture {\\n  border-radius: 50%;\\n}\\n:host .item core-format-text ::ng-deep .mdl-right {\\n  text-align: end;\\n}\\n:host .item core-format-text ::ng-deep .mdl-right a {\\n  display: none;\\n}\\n:host .item core-format-text ::ng-deep .mdl-right font {\\n  font-size: 0.9em;\\n}\\n:host .item core-format-text ::ng-deep .commands {\\n  display: none;\\n}\\n:host .item core-format-text ::ng-deep hr {\\n  margin-top: 1.5rem;\\n  margin-bottom: 1.5rem;\\n  background-color: var(--gray-light);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbm90aWZpY2F0aW9ucy9wYWdlcy9saXN0L2xpc3Quc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDSTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0EsdUJBQUE7QUFBUjtBQUlRO0VBQ0ksbUNBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7QUFGWjtBQUlZO0VBQ0ksYUFBQTtBQUZoQjtBQUtZO0VBQ0kscUNBQUE7QUFIaEI7QUFNWTtFQUNJLFdBQUE7RUFDQSxrQkFBQTtBQUpoQjtBQU9ZO0VBQ0ksZ0JBQUE7RUFDQSxtQkFBQTtBQUxoQjtBQVNRO0VBQ0kscUJBQUE7QUFQWjtBQVVRO0VBQ0ksa0JBQUE7QUFSWjtBQVdRO0VBQ0ksZUFBQTtBQVRaO0FBVVk7RUFDSSxhQUFBO0FBUmhCO0FBVVk7RUFDSSxnQkFBQTtBQVJoQjtBQVlRO0VBQ0ksYUFBQTtBQVZaO0FBYVE7RUFDSSxrQkFBQTtFQUNBLHFCQUFBO0VBQ0EsbUNBQUE7QUFYWiIsImZpbGUiOiJzcmMvYWRkb25zL25vdGlmaWNhdGlvbnMvcGFnZXMvbGlzdC9saXN0LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgICAuY29yZS1ub3RpZmljYXRpb24taWNvbiB7XHJcbiAgICAgICAgd2lkdGg6IDM0cHg7XHJcbiAgICAgICAgaGVpZ2h0OiAzNHB4O1xyXG4gICAgICAgIG1hcmdpbjogMTBweCAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgIC5pdGVtIGNvcmUtZm9ybWF0LXRleHQgOjpuZy1kZWVwIHtcclxuICAgICAgICAuZm9ydW1wb3N0IHtcclxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JheS1saWdodCk7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICBtYXJnaW46IDAgMCAxZW0gMDtcclxuXHJcbiAgICAgICAgICAgIHRkIHtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC5oZWFkZXIge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZ3JheS1saWdodGVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLnBpY3R1cmUge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGF1dG87XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC5zdWJqZWN0IHtcclxuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhIHtcclxuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLnVzZXJwaWN0dXJlIHtcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLm1kbC1yaWdodCB7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGVuZDtcclxuICAgICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvbnQge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjllbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLmNvbW1hbmRzIHtcclxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhyIHtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMS41cmVtO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWdyYXktbGlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0= */\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreTextUtils } from '@services/utils/text';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreEvents, CoreEventObserver } from '@singletons/events';\r\nimport { AddonNotifications, AddonNotificationsAnyNotification, AddonNotificationsProvider } from '../../services/notifications';\r\nimport { AddonNotificationsHelper } from '../../services/notifications-helper';\r\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\r\n\r\n/**\r\n * Page that displays the list of notifications.\r\n */\r\n@Component({\r\n    selector: 'page-addon-notifications-list',\r\n    templateUrl: 'list.html',\r\n    styleUrls: ['list.scss'],\r\n})\r\nexport class AddonNotificationsListPage implements OnInit, OnDestroy {\r\n\r\n    notifications: FormattedNotification[] = [];\r\n    notificationsLoaded = false;\r\n    canLoadMore = false;\r\n    loadMoreError = false;\r\n    canMarkAllNotificationsAsRead = false;\r\n    loadingMarkAllNotificationsAsRead = false;\r\n\r\n    protected isCurrentView?: boolean;\r\n    protected cronObserver?: CoreEventObserver;\r\n    protected pushObserver?: Subscription;\r\n    protected pendingRefresh = false;\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        this.fetchNotifications();\r\n\r\n        this.cronObserver = CoreEvents.on(AddonNotificationsProvider.READ_CRON_EVENT, () => {\r\n            if (!this.isCurrentView) {\r\n                return;\r\n            }\r\n\r\n            this.notificationsLoaded = false;\r\n            this.refreshNotifications();\r\n        }, CoreSites.getCurrentSiteId());\r\n\r\n        this.pushObserver = CorePushNotificationsDelegate.on('receive').subscribe((notification) => {\r\n            // New notification received. If it's from current site, refresh the data.\r\n            if (!this.isCurrentView) {\r\n                this.pendingRefresh = true;\r\n\r\n                return;\r\n            }\r\n\r\n            if (!CoreUtils.isTrueOrOne(notification.notif) || !CoreSites.isCurrentSite(notification.site)) {\r\n                return;\r\n            }\r\n\r\n            this.notificationsLoaded = false;\r\n            this.refreshNotifications();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convenience function to get notifications. Gets unread notifications first.\r\n     *\r\n     * @param refreh Whether we're refreshing data.\r\n     * @return Resolved when done.\r\n     */\r\n    protected async fetchNotifications(refresh?: boolean): Promise<void> {\r\n        this.loadMoreError = false;\r\n\r\n        try {\r\n            const result = await AddonNotificationsHelper.getNotifications(refresh ? [] : this.notifications);\r\n\r\n            const notifications = result.notifications.map((notification) => this.formatText(notification));\r\n\r\n            if (refresh) {\r\n                this.notifications = notifications;\r\n            } else {\r\n                this.notifications = this.notifications.concat(notifications);\r\n            }\r\n            this.canLoadMore = result.canLoadMore;\r\n\r\n            this.markNotificationsAsRead(notifications);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.notifications.errorgetnotifications', true);\r\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\r\n        } finally {\r\n            this.notificationsLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mark all notifications as read.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    async markAllNotificationsAsRead(): Promise<void> {\r\n        this.loadingMarkAllNotificationsAsRead = true;\r\n\r\n        await CoreUtils.ignoreErrors(AddonNotifications.markAllNotificationsAsRead());\r\n\r\n        CoreEvents.trigger(AddonNotificationsProvider.READ_CHANGED_EVENT, {}, CoreSites.getCurrentSiteId());\r\n\r\n        // All marked as read, refresh the list.\r\n        this.notificationsLoaded = false;\r\n\r\n        await this.refreshNotifications();\r\n    }\r\n\r\n    /**\r\n     * Mark notifications as read.\r\n     *\r\n     * @param notifications Array of notification objects.\r\n     */\r\n    protected async markNotificationsAsRead(notifications: FormattedNotification[]): Promise<void> {\r\n        if (notifications.length > 0) {\r\n            const promises = notifications.map(async (notification) => {\r\n                if (notification.read) {\r\n                    // Already read, don't mark it.\r\n                    return;\r\n                }\r\n\r\n                await AddonNotifications.markNotificationRead(notification.id);\r\n            });\r\n\r\n            await CoreUtils.ignoreErrors(Promise.all(promises));\r\n\r\n            await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationsList());\r\n\r\n            CoreEvents.trigger(AddonNotificationsProvider.READ_CHANGED_EVENT, {}, CoreSites.getCurrentSiteId());\r\n        }\r\n\r\n        // Check if mark all notifications as read is enabled and there are some to read.\r\n        if (!AddonNotifications.isMarkAllNotificationsAsReadEnabled()) {\r\n            this.canMarkAllNotificationsAsRead = false;\r\n\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.loadingMarkAllNotificationsAsRead = true;\r\n\r\n            const unread = await AddonNotifications.getUnreadNotificationsCount();\r\n\r\n            this.canMarkAllNotificationsAsRead = unread > 0;\r\n        } finally {\r\n            this.loadingMarkAllNotificationsAsRead = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh notifications.\r\n     *\r\n     * @param refresher Refresher.\r\n     * @return Promise<any> Promise resolved when done.\r\n     */\r\n    async refreshNotifications(refresher?: IonRefresher): Promise<void> {\r\n        await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationsList());\r\n\r\n        try {\r\n            await this.fetchNotifications(true);\r\n        } finally {\r\n            refresher?.complete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load more results.\r\n     *\r\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\r\n     */\r\n    async loadMoreNotifications(infiniteComplete?: () => void): Promise<void> {\r\n        try {\r\n            await this.fetchNotifications();\r\n        } finally {\r\n            infiniteComplete?.();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats the text of a notification.\r\n     *\r\n     * @param notification The notification object.\r\n     */\r\n    protected formatText(notification: AddonNotificationsAnyNotification): FormattedNotification {\r\n        const formattedNotification: FormattedNotification = notification;\r\n        formattedNotification.displayfullhtml = this.shouldDisplayFullHtml(notification);\r\n        formattedNotification.iconurl = formattedNotification.iconurl || undefined; // Make sure the property exists.\r\n\r\n        formattedNotification.mobiletext = formattedNotification.displayfullhtml ?\r\n            notification.fullmessagehtml :\r\n            CoreTextUtils.replaceNewLines(formattedNotification.mobiletext!.replace(/-{4,}/ig, ''), '<br>');\r\n\r\n        return formattedNotification;\r\n    }\r\n\r\n    /**\r\n     * Check whether we should display full HTML of the notification.\r\n     *\r\n     * @param notification Notification.\r\n     * @return Whether to display full HTML.\r\n     */\r\n    protected shouldDisplayFullHtml(notification: FormattedNotification): boolean {\r\n        return notification.component == 'mod_forum' && notification.eventtype == 'digests';\r\n    }\r\n\r\n    /**\r\n     * User entered the page.\r\n     */\r\n    ionViewDidEnter(): void {\r\n        this.isCurrentView = true;\r\n\r\n        if (!this.pendingRefresh) {\r\n            return;\r\n        }\r\n\r\n        this.pendingRefresh = false;\r\n        this.notificationsLoaded = false;\r\n\r\n        this.refreshNotifications();\r\n    }\r\n\r\n    /**\r\n     * User left the page.\r\n     */\r\n    ionViewDidLeave(): void {\r\n        this.isCurrentView = false;\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.cronObserver?.off();\r\n        this.pushObserver?.unsubscribe();\r\n    }\r\n\r\n}\r\n\r\ntype FormattedNotification = AddonNotificationsAnyNotification & {\r\n    displayfullhtml?: boolean; // Whether to display the full HTML of the notification.\r\n    iconurl?: string;\r\n};\r\n"],"sourceRoot":"webpack:///"}