{"version":3,"sources":["./src/core/features/login/pages/reconnect/reconnect.html","./src/core/features/login/pages/reconnect/reconnect.module.ts","./src/core/features/login/pages/reconnect/reconnect.ts"],"names":[],"mappings":"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","file":"pages-reconnect-reconnect-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <h1>{{ 'core.login.reconnect' | translate }}</h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"ion-padding\\\" (keydown)=\\\"keyDown($event)\\\" (keyup)=\\\"keyUp($event)\\\">\\r\\n    <div class=\\\"ion-text-wrap ion-text-center ion-margin-bottom\\\" [ngClass]=\\\"{'item-avatar-center': showSiteAvatar}\\\">\\r\\n        <!-- Show user avatar. -->\\r\\n        <img *ngIf=\\\"showSiteAvatar\\\" [src]=\\\"userAvatar\\\" class=\\\"large-avatar\\\" core-external-content [siteId]=\\\"siteId\\\"\\r\\n            alt=\\\"{{ 'core.pictureof' | translate:{$a: userFullName} }}\\\" onError=\\\"this.src='assets/img/user-avatar.png'\\\">\\r\\n\\r\\n        <div class=\\\"core-login-site-logo\\\" *ngIf=\\\"!showSiteAvatar\\\">\\r\\n            <!-- Show site logo or a default image. -->\\r\\n            <img *ngIf=\\\"logoUrl\\\" [src]=\\\"logoUrl\\\" role=\\\"presentation\\\" onError=\\\"this.src='assets/img/login_logo.png'\\\" alt=\\\"\\\">\\r\\n            <img *ngIf=\\\"!logoUrl\\\" src=\\\"assets/img/login_logo.png\\\" role=\\\"presentation\\\" alt=\\\"\\\">\\r\\n        </div>\\r\\n\\r\\n        <p *ngIf=\\\"siteName\\\" class=\\\"ion-padding core-sitename\\\">\\r\\n            <core-format-text [text]=\\\"siteName\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n        </p>\\r\\n        <p class=\\\"core-siteurl\\\">{{siteUrl}}</p>\\r\\n\\r\\n        <ion-card *ngIf=\\\"!isLoggedOut\\\" class=\\\"core-danger-card core-login-reconnect-warning\\\">\\r\\n            <ion-item>\\r\\n                <ion-icon name=\\\"fas-exclamation-circle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label color=\\\"danger\\\">{{ 'core.login.reconnectdescription' | translate }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n    </div>\\r\\n    <form *ngIf=\\\"!isOAuth\\\" [formGroup]=\\\"credForm\\\" (ngSubmit)=\\\"login($event)\\\" class=\\\"core-login-form\\\" #reconnectForm>\\r\\n        <ion-item class=\\\"ion-text-wrap core-username item-interactive\\\">\\r\\n            <ion-label>\\r\\n                <p>{{username}}</p>\\r\\n            </ion-label>\\r\\n        </ion-item>\\r\\n        <ion-item class=\\\"ion-margin-bottom\\\">\\r\\n            <ion-label class=\\\"sr-only\\\">{{ 'core.login.password' | translate }}</ion-label>\\r\\n            <core-show-password name=\\\"password\\\">\\r\\n                <ion-input class=\\\"core-ioninput-password\\\" name=\\\"password\\\" type=\\\"password\\\"\\r\\n                    placeholder=\\\"{{ 'core.login.password' | translate }}\\\" formControlName=\\\"password\\\" [clearOnEdit]=\\\"false\\\"\\r\\n                    autocomplete=\\\"current-password\\\" enterkeyhint=\\\"go\\\" required=\\\"true\\\">\\r\\n                </ion-input>\\r\\n            </core-show-password>\\r\\n        </ion-item>\\r\\n        <ion-grid class=\\\"ion-padding\\\">\\r\\n            <ion-row>\\r\\n                <ion-col>\\r\\n                    <ion-button expand=\\\"block\\\" color=\\\"light\\\" (click)=\\\"cancel($event)\\\">\\r\\n                        {{ 'core.login.cancel' | translate }}\\r\\n                    </ion-button>\\r\\n                </ion-col>\\r\\n                <ion-col>\\r\\n                    <ion-button type=\\\"submit\\\" expand=\\\"block\\\" [disabled]=\\\"!credForm.valid\\\">\\r\\n                        {{ 'core.login.loginbutton' | translate }}\\r\\n                    </ion-button>\\r\\n                </ion-col>\\r\\n            </ion-row>\\r\\n        </ion-grid>\\r\\n\\r\\n        <ng-container *ngIf=\\\"showScanQR\\\">\\r\\n            <div class=\\\"ion-text-center ion-padding\\\">{{ 'core.login.or' | translate }}</div>\\r\\n            <ion-button expand=\\\"block\\\" color=\\\"light\\\" class=\\\"ion-margin\\\" lines=\\\"none\\\" (click)=\\\"showInstructionsAndScanQR()\\\">\\r\\n                <ion-icon slot=\\\"start\\\" name=\\\"fas-qrcode\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>{{ 'core.scanqr' | translate }}</ion-label>\\r\\n            </ion-button>\\r\\n        </ng-container>\\r\\n    </form>\\r\\n\\r\\n    <!-- Forgotten password option. -->\\r\\n    <ion-button\\r\\n        *ngIf=\\\"showForgottenPassword && !isOAuth\\\"\\r\\n        expand=\\\"block\\\"\\r\\n        fill=\\\"clear\\\"\\r\\n        color=\\\"dark\\\"\\r\\n        class=\\\"core-login-forgotten-password core-button-as-link ion-text-wrap\\\"\\r\\n        (click)=\\\"forgottenPassword()\\\"\\r\\n    >\\r\\n        <ion-label>{{ 'core.login.forgotten' | translate }}</ion-label>\\r\\n    </ion-button>\\r\\n\\r\\n    <!-- Identity providers. -->\\r\\n    <ion-list *ngIf=\\\"identityProviders && identityProviders.length\\\" class=\\\"ion-padding-top core-login-identity-providers\\\">\\r\\n        <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\r\\n            <ion-label><h3 class=\\\"item-heading\\\">{{ 'core.login.potentialidps' | translate }}</h3></ion-label>\\r\\n        </ion-item>\\r\\n        <ion-item button *ngFor=\\\"let provider of identityProviders\\\" class=\\\"ion-text-wrap core-oauth-icon\\\"\\r\\n            (click)=\\\"oauthClicked(provider)\\\" detail=\\\"false\\\">\\r\\n            <img [src]=\\\"provider.iconurl\\\" alt=\\\"\\\" role=\\\"presentation\\\" width=\\\"32\\\" height=\\\"32\\\" slot=\\\"start\\\">\\r\\n            <ion-label>{{provider.name}}</ion-label>\\r\\n        </ion-item>\\r\\n    </ion-list>\\r\\n\\r\\n    <!-- If OAuth, display cancel button since the form isn't displayed. -->\\r\\n    <ion-list *ngIf=\\\"isOAuth\\\">\\r\\n        <ion-button expand=\\\"block\\\" class=\\\"ion-margin\\\" color=\\\"light\\\" (click)=\\\"cancel($event)\\\">\\r\\n            {{ 'core.login.cancel' | translate }}\\r\\n        </ion-button>\\r\\n    </ion-list>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreLoginReconnectPage } from './reconnect';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreLoginReconnectPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        CoreLoginReconnectPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreLoginReconnectPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { CoreApp } from '@services/app';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\r\nimport { CoreSiteIdentityProvider, CoreSitePublicConfigResponse } from '@classes/site';\r\nimport { CoreEvents } from '@singletons/events';\r\nimport { CoreError } from '@classes/errors/error';\r\nimport { CoreNavigationOptions, CoreNavigator } from '@services/navigator';\r\nimport { CoreForms } from '@singletons/form';\r\n\r\n/**\r\n * Page to enter the user password to reconnect to a site.\r\n */\r\n@Component({\r\n    selector: 'page-core-login-reconnect',\r\n    templateUrl: 'reconnect.html',\r\n    styleUrls: ['../../login.scss'],\r\n})\r\nexport class CoreLoginReconnectPage implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('reconnectForm') formElement?: ElementRef;\r\n\r\n    credForm: FormGroup;\r\n    siteUrl!: string;\r\n    username!: string;\r\n    userFullName!: string;\r\n    userAvatar?: string;\r\n    siteName!: string;\r\n    logoUrl?: string;\r\n    identityProviders?: CoreSiteIdentityProvider[];\r\n    showForgottenPassword = true;\r\n    showSiteAvatar = false;\r\n    isOAuth = false;\r\n    isLoggedOut: boolean;\r\n    siteId!: string;\r\n    showScanQR = false;\r\n\r\n    protected page?: string;\r\n    protected pageOptions?: CoreNavigationOptions;\r\n    protected siteConfig?: CoreSitePublicConfigResponse;\r\n    protected viewLeft = false;\r\n    protected eventThrown = false;\r\n\r\n    constructor(\r\n        protected fb: FormBuilder,\r\n    ) {\r\n        const currentSite = CoreSites.getCurrentSite();\r\n\r\n        this.isLoggedOut = !!currentSite?.isLoggedOut();\r\n        this.credForm = fb.group({\r\n            password: ['', Validators.required],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize the component.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        const siteId = CoreNavigator.getRouteParam<string>('siteId');\r\n        if (!siteId) {\r\n            return this.cancel();\r\n        }\r\n\r\n        this.siteId = siteId;\r\n        this.page = CoreNavigator.getRouteParam('pageName');\r\n        this.pageOptions = CoreNavigator.getRouteParam('pageOptions');\r\n        this.showScanQR = CoreLoginHelper.displayQRInSiteScreen() || CoreLoginHelper.displayQRInCredentialsScreen();\r\n\r\n        try {\r\n            const site = await CoreSites.getSite(this.siteId);\r\n\r\n            if (!site.infos) {\r\n                throw new CoreError('Invalid site');\r\n            }\r\n\r\n            this.username = site.infos.username;\r\n            this.userFullName = site.infos.fullname;\r\n            this.userAvatar = site.infos.userpictureurl;\r\n            this.siteUrl = site.infos.siteurl;\r\n            this.siteName = site.getSiteName();\r\n\r\n            // If login was OAuth we should only reach this page if the OAuth method ID has changed.\r\n            this.isOAuth = site.isOAuth();\r\n\r\n            // Show logo instead of avatar if it's a fixed site.\r\n            this.showSiteAvatar = !!this.userAvatar && !CoreLoginHelper.getFixedSites();\r\n\r\n            const config = await CoreUtils.ignoreErrors(site.getPublicConfig());\r\n\r\n            if (!config) {\r\n                return;\r\n            }\r\n\r\n            this.siteConfig = config;\r\n\r\n            await CoreSites.checkApplication(config);\r\n\r\n            // Check logoURL if user avatar is not set.\r\n            if (this.userAvatar.startsWith(this.siteUrl + '/theme/image.php')) {\r\n                this.showSiteAvatar = false;\r\n            }\r\n            this.logoUrl = CoreLoginHelper.getLogoUrl(config);\r\n\r\n            this.getDataFromConfig(this.siteConfig);\r\n        } catch (error) {\r\n            // Just leave the view.\r\n            this.cancel();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.viewLeft = true;\r\n        CoreEvents.trigger(CoreEvents.LOGIN_SITE_UNCHECKED, { config: this.siteConfig }, this.siteId);\r\n    }\r\n\r\n    /**\r\n     * Get some data (like identity providers) from the site config.\r\n     *\r\n     * @param config Config to use.\r\n     */\r\n    protected getDataFromConfig(config: CoreSitePublicConfigResponse): void {\r\n        const disabledFeatures = CoreLoginHelper.getDisabledFeatures(config);\r\n\r\n        this.identityProviders = CoreLoginHelper.getValidIdentityProviders(config, disabledFeatures);\r\n        this.showForgottenPassword = !CoreLoginHelper.isForgottenPasswordDisabled(config);\r\n\r\n        if (!this.eventThrown && !this.viewLeft) {\r\n            this.eventThrown = true;\r\n            CoreEvents.trigger(CoreEvents.LOGIN_SITE_CHECKED, { config: config });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancel reconnect.\r\n     *\r\n     * @param e Event.\r\n     */\r\n    cancel(e?: Event): void {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n\r\n        CoreSites.logout();\r\n    }\r\n\r\n    /**\r\n     * Tries to authenticate the user.\r\n     *\r\n     * @param e Event.\r\n     */\r\n    async login(e: Event): Promise<void> {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        CoreApp.closeKeyboard();\r\n\r\n        // Get input data.\r\n        const password = this.credForm.value.password;\r\n\r\n        if (!password) {\r\n            CoreDomUtils.showErrorModal('core.login.passwordrequired', true);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!CoreApp.isOnline()) {\r\n            CoreDomUtils.showErrorModal('core.networkerrormsg', true);\r\n\r\n            return;\r\n        }\r\n\r\n        const modal = await CoreDomUtils.showModalLoading();\r\n\r\n        try {\r\n            // Start the authentication process.\r\n            const data = await CoreSites.getUserToken(this.siteUrl, this.username, password);\r\n\r\n            await CoreSites.updateSiteToken(this.siteUrl, this.username, data.token, data.privateToken);\r\n\r\n            CoreForms.triggerFormSubmittedEvent(this.formElement, true);\r\n\r\n            // Update site info too.\r\n            await CoreSites.updateSiteInfoByUrl(this.siteUrl, this.username);\r\n\r\n            // Reset fields so the data is not in the view anymore.\r\n            this.credForm.controls['password'].reset();\r\n\r\n            // Go to the site initial page.\r\n            this.page\r\n                ? await CoreNavigator.navigateToSitePath(this.page, { params: this.pageOptions })\r\n                : await CoreNavigator.navigateToSiteHome();\r\n        } catch (error) {\r\n            CoreLoginHelper.treatUserTokenError(this.siteUrl, error, this.username, password);\r\n\r\n            if (error.loggedout) {\r\n                this.cancel();\r\n            } else if (error.errorcode == 'forcepasswordchangenotice') {\r\n                // Reset password field.\r\n                this.credForm.controls.password.reset();\r\n            }\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forgotten password button clicked.\r\n     */\r\n    forgottenPassword(): void {\r\n        CoreLoginHelper.forgottenPasswordClicked(this.siteUrl, this.username, this.siteConfig);\r\n    }\r\n\r\n    /**\r\n     * An OAuth button was clicked.\r\n     *\r\n     * @param provider The provider that was clicked.\r\n     */\r\n    oauthClicked(provider: CoreSiteIdentityProvider): void {\r\n        const result = CoreLoginHelper.openBrowserForOAuthLogin(\r\n            this.siteUrl,\r\n            provider,\r\n            this.siteConfig?.launchurl,\r\n            this.page,\r\n            this.pageOptions,\r\n        );\r\n\r\n        if (!result) {\r\n            CoreDomUtils.showErrorModal('Invalid data.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show instructions and scan QR code.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    async showInstructionsAndScanQR(): Promise<void> {\r\n        try {\r\n            await CoreLoginHelper.showScanQRInstructions();\r\n\r\n            await CoreLoginHelper.scanQR();\r\n        } catch {\r\n            // Ignore errors.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A11y key functionality that prevents keyDown events.\r\n     *\r\n     * @param e Event.\r\n     */\r\n    keyDown(e: KeyboardEvent): void {\r\n        if (e.key == 'Escape') {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancel reconnect.\r\n     *\r\n     * @param e Event.\r\n     */\r\n    keyUp(e: KeyboardEvent): void {\r\n        if (e.key == 'Escape') {\r\n            this.cancel(e);\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}