{"version":3,"sources":["./src/addons/mod/feedback/pages/attempt/attempt.html","./src/addons/mod/quiz/pages/attempt/attempt.html","./src/addons/mod/feedback/pages/attempt/attempt.module.ts","./src/addons/mod/feedback/pages/attempt/attempt.ts","./src/addons/mod/quiz/pages/attempt/attempt.module.ts","./src/addons/mod/quiz/pages/attempt/attempt.page.ts"],"names":[],"mappings":"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","file":"pages-attempt-attempt-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <ng-container *ngIf=\\\"attempt\\\">{{ attempt.fullname }}</ng-container>\\r\\n            <ng-container *ngIf=\\\"anonAttempt\\\">\\r\\n                {{ 'addon.mod_feedback.response_nr' |translate }}: {{anonAttempt.number}}\\r\\n            </ng-container>\\r\\n        </h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"attempt || anonAttempt\\\">\\r\\n            <ion-item *ngIf=\\\"attempt\\\" class=\\\"ion-text-wrap\\\" core-user-link [userId]=\\\"attempt.userid\\\"\\r\\n                [attr.aria-label]=\\\" 'core.user.viewprofile' | translate\\\" [courseId]=\\\"attempt.courseid\\\">\\r\\n                <core-user-avatar [user]=\\\"attempt\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>{{attempt.fullname}}</h2>\\r\\n                    <p *ngIf=\\\"attempt.timemodified\\\">{{attempt.timemodified * 1000 | coreFormatDate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"anonAttempt\\\">\\r\\n                <ion-label>\\r\\n                    <h2>\\r\\n                        {{ 'addon.mod_feedback.response_nr' |translate }}: {{anonAttempt.number}}\\r\\n                        ({{ 'addon.mod_feedback.anonymous' |translate }})\\r\\n                    </h2>\\r\\n                </ion-label>\\r\\n            </ion-item >\\r\\n            <ng-container *ngIf=\\\"items && items.length\\\">\\r\\n                <ng-container *ngFor=\\\"let item of items\\\">\\r\\n                    <core-spacer *ngIf=\\\"item.typ == 'pagebreak'\\\"></core-spacer>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"item.typ != 'pagebreak'\\\" [color]=\\\"item.dependitem > 0 ? 'light' : ''\\\">\\r\\n                        <ion-label>\\r\\n                            <h2 *ngIf=\\\"item.name\\\" [core-mark-required]=\\\"item.required\\\">\\r\\n                                <span *ngIf=\\\"feedback!.autonumbering && item.itemnumber\\\">{{item.itemnumber}}. </span>\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.name\\\"\\r\\n                                    contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </h2>\\r\\n                            <p *ngIf=\\\"item.submittedValue\\\">\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.submittedValue\\\"\\r\\n                                    contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text *ngIf=\\\"quiz\\\" [text]=\\\"quiz.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"quiz.coursemodule\\\"\\r\\n                [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list *ngIf=\\\"attempt\\\" lines=\\\"none\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.attemptnumber' | translate }}</h2>\\r\\n                    <p *ngIf=\\\"attempt.preview\\\">{{ 'addon.mod_quiz.preview' | translate }}</p>\\r\\n                    <p *ngIf=\\\"!attempt.preview\\\">{{ attempt.attempt }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.attemptstate' | translate }}</h2>\\r\\n                    <p *ngFor=\\\"let sentence of attempt.readableState\\\">{{ sentence }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showMarkColumn && attempt.readableMark !== ''\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.marks' | translate }} / {{ quiz!.sumGradesFormatted }}</h2>\\r\\n                    <p>{{ attempt.readableMark }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showGradeColumn && attempt.readableGrade !== ''\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.grade' | translate }} / {{ quiz!.gradeFormatted }}</h2>\\r\\n                    <p>{{ attempt.readableGrade }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showFeedbackColumn && feedback\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.feedback' | translate }}</h2>\\r\\n                    <p>\\r\\n                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"componentId\\\" [text]=\\\"feedback\\\"\\r\\n                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-button *ngIf=\\\"showReviewColumn && attempt.finished\\\" class=\\\"ion-margin\\\" expand=\\\"block\\\" (click)=\\\"reviewAttempt()\\\">\\r\\n                <ion-icon name=\\\"fas-search\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                {{ 'addon.mod_quiz.review' | translate }}\\r\\n            </ion-button>\\r\\n            <ion-item class=\\\"ion-text-wrap core-danger-item\\\" *ngIf=\\\"!showReviewColumn\\\">\\r\\n                <ion-label>\\r\\n                    <p>{{ 'addon.mod_quiz.noreviewattempt' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AddonModFeedbackAttemptPage } from './attempt';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonModFeedbackAttemptPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModFeedbackAttemptPage,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonModFeedbackAttemptPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreTextUtils } from '@services/utils/text';\r\nimport {\r\n    AddonModFeedback,\r\n    AddonModFeedbackProvider,\r\n    AddonModFeedbackWSAnonAttempt,\r\n    AddonModFeedbackWSAttempt,\r\n    AddonModFeedbackWSFeedback,\r\n} from '../../services/feedback';\r\nimport { AddonModFeedbackFormItem, AddonModFeedbackHelper } from '../../services/feedback-helper';\r\n\r\n/**\r\n * Page that displays a feedback attempt review.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-feedback-attempt',\r\n    templateUrl: 'attempt.html',\r\n})\r\nexport class AddonModFeedbackAttemptPage implements OnInit {\r\n\r\n    protected attemptId!: number;\r\n\r\n    cmId!: number;\r\n    courseId!: number;\r\n    feedback?: AddonModFeedbackWSFeedback;\r\n    attempt?: AddonModFeedbackWSAttempt;\r\n    anonAttempt?: AddonModFeedbackWSAnonAttempt;\r\n    items: AddonModFeedbackAttemptItem[] = [];\r\n    component = AddonModFeedbackProvider.COMPONENT;\r\n    loaded = false;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    ngOnInit(): void {\r\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.attemptId = CoreNavigator.getRouteNumberParam('attemptId')!;\r\n\r\n        this.fetchData();\r\n    }\r\n\r\n    /**\r\n     * Fetch all the data required for the view.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchData(): Promise<void> {\r\n        try {\r\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\r\n\r\n            const attempt = await AddonModFeedback.getAttempt(this.feedback.id, this.attemptId, { cmId: this.cmId });\r\n\r\n            if (this.isAnonAttempt(attempt)) {\r\n                this.anonAttempt = attempt;\r\n                delete this.attempt;\r\n            } else {\r\n                this.attempt = attempt;\r\n                delete this.anonAttempt;\r\n            }\r\n\r\n            const items = await AddonModFeedback.getItems(this.feedback.id, { cmId: this.cmId });\r\n\r\n            // Add responses and format items.\r\n            this.items = <AddonModFeedbackAttemptItem[]> items.items.map((item) => {\r\n                const formItem = AddonModFeedbackHelper.getItemForm(item, true);\r\n                if (!formItem) {\r\n                    return;\r\n                }\r\n\r\n                const attemptItem = <AddonModFeedbackAttemptItem> formItem;\r\n\r\n                if (item.typ == 'label') {\r\n                    attemptItem.submittedValue = CoreTextUtils.replacePluginfileUrls(item.presentation, item.itemfiles);\r\n                } else {\r\n                    for (const x in attempt.responses) {\r\n                        if (attempt.responses[x].id == item.id) {\r\n                            attemptItem.submittedValue = attempt.responses[x].printval;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return attemptItem;\r\n            }).filter((itemData) => itemData); // Filter items with errors.\r\n\r\n        } catch (message) {\r\n            // Some call failed on fetch, go back.\r\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\r\n            CoreNavigator.back();\r\n        } finally {\r\n            this.loaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if an attempt is anonymous or not.\r\n     *\r\n     * @param attempt Attempt to check.\r\n     */\r\n    isAnonAttempt(attempt: AddonModFeedbackWSAttempt | AddonModFeedbackWSAnonAttempt): attempt is AddonModFeedbackWSAnonAttempt {\r\n        return !('fullname' in attempt);\r\n    }\r\n\r\n}\r\n\r\ntype AddonModFeedbackAttemptItem = AddonModFeedbackFormItem & {\r\n    submittedValue?: string;\r\n};\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonModQuizAttemptPage } from './attempt.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonModQuizAttemptPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonModQuizAttemptPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonModQuizAttemptPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CoreError } from '@classes/errors/error';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { Translate } from '@singletons';\r\nimport {\r\n    AddonModQuiz,\r\n    AddonModQuizAttemptWSData,\r\n    AddonModQuizGetQuizAccessInformationWSResponse,\r\n    AddonModQuizProvider,\r\n} from '../../services/quiz';\r\nimport { AddonModQuizAttempt, AddonModQuizHelper, AddonModQuizQuizData } from '../../services/quiz-helper';\r\n\r\n/**\r\n * Page that displays some summary data about an attempt.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-quiz-attempt',\r\n    templateUrl: 'attempt.html',\r\n})\r\nexport class AddonModQuizAttemptPage implements OnInit {\r\n\r\n    courseId!: number; // The course ID the quiz belongs to.\r\n    quiz?: AddonModQuizQuizData; // The quiz the attempt belongs to.\r\n    attempt?: AddonModQuizAttempt; // The attempt to view.\r\n    component = AddonModQuizProvider.COMPONENT; // Component to link the files to.\r\n    componentId?: number; // Component ID to use in conjunction with the component.\r\n    loaded = false; // Whether data has been loaded.\r\n    feedback?: string; // Attempt feedback.\r\n    showReviewColumn = false;\r\n    cmId!: number; // Course module id the attempt belongs to.\r\n\r\n    protected attemptId!: number; // Attempt to view.\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.attemptId = CoreNavigator.getRouteNumberParam('attemptId')!;\r\n\r\n        this.fetchQuizData().finally(() => {\r\n            this.loaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    doRefresh(refresher: IonRefresher): void {\r\n        this.refreshData().finally(() => {\r\n            refresher.complete();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get quiz data and attempt data.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchQuizData(): Promise<void> {\r\n        try {\r\n            this.quiz = await AddonModQuiz.getQuiz(this.courseId, this.cmId);\r\n\r\n            this.componentId = this.quiz.coursemodule;\r\n\r\n            // Load attempt data.\r\n            const [options, accessInfo, attempt] = await Promise.all([\r\n                AddonModQuiz.getCombinedReviewOptions(this.quiz.id, { cmId: this.quiz.coursemodule }),\r\n                this.fetchAccessInfo(),\r\n                this.fetchAttempt(),\r\n            ]);\r\n\r\n            // Set calculated data.\r\n            this.showReviewColumn = accessInfo.canreviewmyattempts;\r\n            AddonModQuizHelper.setQuizCalculatedData(this.quiz, options);\r\n\r\n            this.attempt = await AddonModQuizHelper.setAttemptCalculatedData(this.quiz!, attempt, false, undefined, true);\r\n\r\n            // Check if the feedback should be displayed.\r\n            const grade = Number(this.attempt!.rescaledGrade);\r\n\r\n            if (this.quiz.showFeedbackColumn && AddonModQuiz.isAttemptFinished(this.attempt!.state) &&\r\n                    options.someoptions.overallfeedback && !isNaN(grade)) {\r\n\r\n                // Feedback should be displayed, get the feedback for the grade.\r\n                const response = await AddonModQuiz.getFeedbackForGrade(this.quiz.id, grade, {\r\n                    cmId: this.quiz.coursemodule,\r\n                });\r\n\r\n                this.feedback = response.feedbacktext;\r\n            } else {\r\n                delete this.feedback;\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetattempt', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the attempt.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchAttempt(): Promise<AddonModQuizAttemptWSData> {\r\n        // Get all the attempts and search the one we want.\r\n        const attempts = await AddonModQuiz.getUserAttempts(this.quiz!.id, { cmId: this.cmId });\r\n\r\n        const attempt = attempts.find(attempt => attempt.id == this.attemptId);\r\n\r\n        if (!attempt) {\r\n            // Attempt not found, error.\r\n            this.attempt = undefined;\r\n\r\n            throw new CoreError(Translate.instant('addon.mod_quiz.errorgetattempt'));\r\n        }\r\n\r\n        return attempt;\r\n    }\r\n\r\n    /**\r\n     * Get the access info.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchAccessInfo(): Promise<AddonModQuizGetQuizAccessInformationWSResponse> {\r\n        const accessInfo = await AddonModQuiz.getQuizAccessInformation(this.quiz!.id, { cmId: this.cmId });\r\n\r\n        if (!accessInfo.canreviewmyattempts) {\r\n            return accessInfo;\r\n        }\r\n\r\n        // Check if the user can review the attempt.\r\n        await CoreUtils.ignoreErrors(AddonModQuiz.invalidateAttemptReviewForPage(this.attemptId, -1));\r\n\r\n        try {\r\n            await AddonModQuiz.getAttemptReview(this.attemptId, { page: -1, cmId: this.quiz!.coursemodule });\r\n        } catch {\r\n            // Error getting the review, assume the user cannot review the attempt.\r\n            accessInfo.canreviewmyattempts = false;\r\n        }\r\n\r\n        return accessInfo;\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async refreshData(): Promise<void> {\r\n        const promises: Promise<void>[] = [];\r\n\r\n        promises.push(AddonModQuiz.invalidateQuizData(this.courseId));\r\n        promises.push(AddonModQuiz.invalidateAttemptReview(this.attemptId));\r\n\r\n        if (this.quiz) {\r\n            promises.push(AddonModQuiz.invalidateUserAttemptsForUser(this.quiz.id));\r\n            promises.push(AddonModQuiz.invalidateQuizAccessInformation(this.quiz.id));\r\n            promises.push(AddonModQuiz.invalidateCombinedReviewOptionsForUser(this.quiz.id));\r\n\r\n            if (this.attempt && typeof this.feedback != 'undefined') {\r\n                promises.push(AddonModQuiz.invalidateFeedback(this.quiz.id));\r\n            }\r\n        }\r\n\r\n        await CoreUtils.ignoreErrors(Promise.all(promises));\r\n\r\n        await this.fetchQuizData();\r\n    }\r\n\r\n    /**\r\n     * Go to the page to review the attempt.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    async reviewAttempt(): Promise<void> {\r\n        CoreNavigator.navigate(`../../review/${this.attempt!.id}`);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}