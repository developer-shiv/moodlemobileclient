{"version":3,"sources":["./src/addons/messages/pages/settings/settings.html","./src/addons/notifications/pages/settings/settings.html","./src/addons/messages/pages/settings/settings.module.ts","./src/addons/messages/pages/settings/settings.page.ts","./src/addons/notifications/pages/settings/settings.module.ts","./src/addons/notifications/pages/settings/settings.scss","./src/addons/notifications/pages/settings/settings.ts"],"names":[],"mappings":"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","file":"pages-settings-settings-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.messages.messages' | translate }}</h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!preferencesLoaded\\\" (ionRefresh)=\\\"refreshPreferences($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"preferencesLoaded\\\">\\r\\n        <!-- Contactable privacy. -->\\r\\n        <ion-card>\\r\\n            <ion-item *ngIf=\\\"!advancedContactable\\\">\\r\\n              <ion-label>{{ 'addon.messages.blocknoncontacts' | translate }}</ion-label>\\r\\n              <ion-toggle [(ngModel)]=\\\"contactablePrivacy\\\" (ngModelChange)=\\\"saveContactablePrivacy(contactablePrivacy)\\\">\\r\\n              </ion-toggle>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-list *ngIf=\\\"advancedContactable\\\" class=\\\"ion-text-wrap\\\">\\r\\n                <ion-radio-group [(ngModel)]=\\\"contactablePrivacy\\\" (ionChange)=\\\"saveContactablePrivacy(contactablePrivacy)\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label><h2>{{ 'addon.messages.contactableprivacy' | translate }}</h2></ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item>\\r\\n                        <ion-label>{{ 'addon.messages.contactableprivacy_onlycontacts' | translate }}</ion-label>\\r\\n                        <ion-radio slot=\\\"start\\\" [value]=\\\"onlyContactsValue\\\"></ion-radio>\\r\\n                    </ion-item>\\r\\n                    <ion-item>\\r\\n                        <ion-label>{{ 'addon.messages.contactableprivacy_coursemember' | translate }}</ion-label>\\r\\n                        <ion-radio slot=\\\"start\\\" [value]=\\\"courseMemberValue\\\"></ion-radio>\\r\\n                    </ion-item>\\r\\n                    <ion-item *ngIf=\\\"allowSiteMessaging\\\">\\r\\n                        <ion-label>{{ 'addon.messages.contactableprivacy_site' | translate }}</ion-label>\\r\\n                        <ion-radio slot=\\\"start\\\" [value]=\\\"siteValue\\\"></ion-radio>\\r\\n                    </ion-item>\\r\\n                </ion-radio-group>\\r\\n            </ion-list>\\r\\n        </ion-card>\\r\\n\\r\\n        <!-- Notifications. -->\\r\\n        <ng-container *ngIf=\\\"preferences\\\">\\r\\n            <div *ngFor=\\\"let component of preferences.components\\\">\\r\\n                <ion-card list *ngFor=\\\"let notification of component.notifications\\\">\\r\\n                    <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <ion-row class=\\\"ion-no-padding\\\" *ngIf=\\\"!groupMessagingEnabled\\\">\\r\\n                                <ion-col class=\\\"ion-no-padding\\\">\\r\\n                                    <h2>{{ notification.displayname }}</h2>\\r\\n                                </ion-col>\\r\\n                                <ion-col size=\\\"2\\\" class=\\\"ion-text-center ion-no-padding ion-hide-md-down\\\">\\r\\n                                    <h2>{{ 'core.settings.loggedin' | translate }}</h2>\\r\\n                                </ion-col>\\r\\n                                <ion-col *ngIf=\\\"!groupMessagingEnabled\\\" size=\\\"2\\\" class=\\\"ion-text-center ion-no-padding\\r\\n                                    ion-hide-md-down\\\">\\r\\n                                    <h2>{{ 'core.settings.loggedoff' | translate }}</h2>\\r\\n                                </ion-col>\\r\\n                            </ion-row>\\r\\n                            <h2 *ngIf=\\\"groupMessagingEnabled\\\">{{ 'addon.notifications.notificationpreferences' | translate }}</h2>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <ng-container *ngFor=\\\"let processor of notification.processors\\\">\\r\\n                        <!-- If group messaging is enabled, display a simplified view. -->\\r\\n                        <ng-container *ngIf=\\\"groupMessagingEnabled\\\">\\r\\n                            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                                <ion-label>{{ processor.displayname }}</ion-label>\\r\\n                                <core-button-with-spinner\\r\\n                                    *ngIf=\\\"!preferences.disableall\\\"\\r\\n                                    [loading]=\\\"!!notification.updating\\\"\\r\\n                                    slot=\\\"end\\\"\\r\\n                                >\\r\\n                                    <ion-toggle\\r\\n                                        *ngIf=\\\"!processor.locked\\\"\\r\\n                                        [(ngModel)]=\\\"processor.checked\\\"\\r\\n                                        (ngModelChange)=\\\"changePreference(notification, '', processor)\\\"\\r\\n                                    >\\r\\n                                    </ion-toggle>\\r\\n                                    <ion-note *ngIf=\\\"processor.locked\\\">\\r\\n                                        {{ processor.lockedmessage }}\\r\\n                                    </ion-note>\\r\\n                                </core-button-with-spinner>\\r\\n                                <ion-note slot=\\\"end\\\" *ngIf=\\\"preferences.disableall\\\">\\r\\n                                    {{ 'core.settings.disabled' | translate }}\\r\\n                                </ion-note>\\r\\n                            </ion-item>\\r\\n                        </ng-container>\\r\\n\\r\\n                        <ng-container *ngIf=\\\"!groupMessagingEnabled\\\">\\r\\n                            <!-- Tablet view -->\\r\\n                            <ion-row class=\\\"ion-text-wrap ion-hide-md-down ion-align-items-center\\\">\\r\\n                                <ion-col class=\\\"ion-margin-horizontal\\\">{{ processor.displayname }}</ion-col>\\r\\n                                <ion-col size=\\\"2\\\" class=\\\"ion-text-center\\\" *ngFor=\\\"let state of ['loggedin', 'loggedoff']\\\">\\r\\n                                    <core-button-with-spinner\\r\\n                                        *ngIf=\\\"!preferences.disableall\\\"\\r\\n                                        [loading]=\\\"notification.updating && notification.updating[state]\\\"\\r\\n                                    >\\r\\n                                        <!-- If notifications not disabled, show toggle. -->\\r\\n                                        <ion-toggle *ngIf=\\\"!processor.locked\\\"\\r\\n                                            [(ngModel)]=\\\"processor[state].checked\\\"\\r\\n                                            (ngModelChange)=\\\"changePreference(notification, state, processor)\\\"\\r\\n                                        >\\r\\n                                        </ion-toggle>\\r\\n                                        <div class=\\\"ion-padding text-gray\\\" *ngIf=\\\"processor.locked\\\">\\r\\n                                            {{'core.settings.locked' | translate }}\\r\\n                                        </div>\\r\\n                                    </core-button-with-spinner>\\r\\n                                    <!-- If notifications are disabled, show \\\"Disabled\\\" instead of toggle. -->\\r\\n                                    <span *ngIf=\\\"preferences.disableall\\\">{{ 'core.settings.disabled' | translate }}</span>\\r\\n                                </ion-col>\\r\\n                            </ion-row>\\r\\n                            <!-- Phone view -->\\r\\n                            <ion-list-header class=\\\"ion-text-wrap ion-hide-md-up\\\">\\r\\n                                <ion-label>{{ processor.displayname }}</ion-label>\\r\\n                            </ion-list-header>\\r\\n                            <!-- If notifications not disabled, show toggles.\\r\\n                                If notifications are disabled, show \\\"Disabled\\\" instead of toggle. -->\\r\\n                            <ion-item *ngFor=\\\"let state of ['loggedin', 'loggedoff']\\\" class=\\\"ion-text-wrap ion-hide-md-up\\\">\\r\\n                                <ion-label>{{ 'core.settings.' + state | translate }}</ion-label>\\r\\n                                <core-button-with-spinner slot=\\\"end\\\"\\r\\n                                    *ngIf=\\\"!preferences.disableall\\\"\\r\\n                                    [loading]=\\\"notification.updating && notification.updating[state]\\\"\\r\\n                                >\\r\\n                                    <ion-toggle *ngIf=\\\"!processor.locked\\\"\\r\\n                                        [(ngModel)]=\\\"processor[state].checked\\\"\\r\\n                                        (ngModelChange)=\\\"changePreference(notification, state, processor)\\\"\\r\\n                                    >\\r\\n                                    </ion-toggle>\\r\\n                                    <ion-note *ngIf=\\\"processor.locked\\\">\\r\\n                                        {{'core.settings.locked' | translate }}\\r\\n                                    </ion-note>\\r\\n                                </core-button-with-spinner>\\r\\n                                <ion-note slot=\\\"end\\\" *ngIf=\\\"preferences.disableall\\\">\\r\\n                                    {{ 'core.settings.disabled' | translate }}\\r\\n                                </ion-note>\\r\\n                            </ion-item>\\r\\n                        </ng-container>\\r\\n                    </ng-container>\\r\\n                </ion-card>\\r\\n            </div>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- General settings. -->\\r\\n        <ion-card>\\r\\n            <ion-list class=\\\"ion-text-wrap\\\">\\r\\n                <ion-item-divider><ion-label><h2>{{ 'core.settings.general' | translate }}</h2></ion-label></ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.messages.useentertosend' | translate }}</p>\\r\\n                    </ion-label>\\r\\n                    <ion-toggle [(ngModel)]=\\\"sendOnEnter\\\" (ngModelChange)=\\\"sendOnEnterChanged()\\\" slot=\\\"end\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n        </ion-card>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.notifications.notifications' | translate }}</h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<core-navbar-buttons slot=\\\"end\\\">\\r\\n    <core-context-menu>\\r\\n        <core-context-menu-item *ngFor=\\\"let handler of processorHandlers\\\" [priority]=\\\"handler.priority\\\"\\r\\n            [content]=\\\"handler.label | translate\\\" (action)=\\\"openExtraPreferences(handler)\\\" [iconAction]=\\\"handler.icon\\\">\\r\\n        </core-context-menu-item>\\r\\n    </core-context-menu>\\r\\n</core-navbar-buttons>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!preferencesLoaded || !notifPrefsEnabled\\\"\\r\\n        (ionRefresh)=\\\"refreshPreferences($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"preferencesLoaded\\\">\\r\\n        <!-- If notification preferences aren't enabled, show only the notification sound setting. -->\\r\\n        <ion-item *ngIf=\\\"canChangeSound && !notifPrefsEnabled\\\">\\r\\n            <ion-label>{{ 'addon.notifications.playsound' | translate }}</ion-label>\\r\\n            <ion-toggle [(ngModel)]=\\\"notificationSound\\\" (ngModelChange)=\\\"changeNotificationSound(notificationSound)\\\"></ion-toggle>\\r\\n        </ion-item>\\r\\n\\r\\n        <ng-container *ngIf=\\\"notifPrefsEnabled\\\">\\r\\n            <ion-card>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"preferences\\\">\\r\\n                    <ion-label>{{ 'addon.notifications.notifications' | translate }}</ion-label>\\r\\n                    <ion-toggle [(ngModel)]=\\\"preferences!.enableall\\\" (ngModelChange)=\\\"enableAll(preferences!.enableall)\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"canChangeSound\\\">\\r\\n                    <ion-label>{{ 'addon.notifications.playsound' | translate }}</ion-label>\\r\\n                    <ion-toggle [(ngModel)]=\\\"notificationSound\\\" (ngModelChange)=\\\"changeNotificationSound(notificationSound)\\\">\\r\\n                    </ion-toggle>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n\\r\\n            <!-- Show processor selector. -->\\r\\n            <core-combobox *ngIf=\\\"preferences && preferences.processors && preferences.processors.length > 0\\\"\\r\\n                [selection]=\\\"currentProcessor!.name\\\" (onChange)=\\\"changeProcessor($event)\\\">\\r\\n                <ion-select-option class=\\\"ion-text-wrap\\\" *ngFor=\\\"let processor of preferences.processors\\\" [value]=\\\"processor.name\\\">\\r\\n                    {{ processor.displayname }}\\r\\n                </ion-select-option>\\r\\n            </core-combobox>\\r\\n\\r\\n            <ion-card list *ngFor=\\\"let component of components\\\" class=\\\"ion-margin-top\\\">\\r\\n                <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-grid class=\\\"ion-no-padding\\\">\\r\\n                        <ion-row class=\\\"ion-no-padding\\\">\\r\\n                            <ion-col class=\\\"ion-no-padding\\\">{{ component.displayname }}</ion-col>\\r\\n                            <ion-col size=\\\"2\\\" class=\\\"ion-text-center ion-no-padding ion-hide-md-down\\\">\\r\\n                                {{ 'core.settings.loggedin' | translate }}\\r\\n                            </ion-col>\\r\\n                            <ion-col size=\\\"2\\\" class=\\\"ion-text-center ion-no-padding ion-hide-md-down\\\">\\r\\n                                {{ 'core.settings.loggedoff' | translate }}\\r\\n                            </ion-col>\\r\\n                        </ion-row>\\r\\n                    </ion-grid>\\r\\n                </ion-item-divider>\\r\\n                <ng-container *ngFor=\\\"let notification of component.notifications\\\">\\r\\n                    <!-- Tablet view -->\\r\\n                    <ion-grid class=\\\"ion-text-wrap ion-hide-md-down addon-notifications-table-content\\\">\\r\\n                        <ion-row class=\\\"ion-align-items-center\\\">\\r\\n                            <ion-col class=\\\"ion-margin-horizontal\\\">{{ notification.displayname }}</ion-col>\\r\\n                            <ion-col size=\\\"2\\\" class=\\\"ion-text-center\\\" *ngFor=\\\"let state of ['loggedin', 'loggedoff']\\\">\\r\\n                                <!-- If notifications enabled, show toggle. -->\\r\\n                                <ion-spinner [hidden]=\\\"!preferences!.enableall ||\\r\\n                                    !(notification.processorsByName[currentProcessor!.name][state] &&\\r\\n                                    notification.processorsByName[currentProcessor!.name][state].updating)\\\">\\r\\n                                </ion-spinner>\\r\\n                                <ion-toggle\\r\\n                                    *ngIf=\\\"preferences!.enableall && !notification.processorsByName[currentProcessor!.name].locked\\\"\\r\\n                                    [(ngModel)]=\\\"notification.processorsByName[currentProcessor!.name][state].checked\\\"\\r\\n                                    (ngModelChange)=\\\"changePreference(notification, state)\\\"\\r\\n                                    [disabled]=\\\"notification.processorsByName[currentProcessor!.name][state].updating\\\">\\r\\n                                </ion-toggle>\\r\\n                                <span class=\\\"text-gray\\\"\\r\\n                                    *ngIf=\\\"preferences!.enableall && notification.processorsByName[currentProcessor!.name].locked\\\">\\r\\n                                    {{'core.settings.locked' | translate }}\\r\\n                                </span>\\r\\n                                <!-- If notifications are disabled, show \\\"Disabled\\\" instead of toggle. -->\\r\\n                                <span *ngIf=\\\"!preferences!.enableall\\\">{{ 'core.settings.disabled' | translate }}</span>\\r\\n                            </ion-col>\\r\\n                        </ion-row>\\r\\n                    </ion-grid>\\r\\n\\r\\n                    <!-- Phone view -->\\r\\n                    <ion-list-header class=\\\"ion-text-wrap ion-no-margin ion-hide-md-up\\\">\\r\\n                        {{ notification.displayname }}\\r\\n                    </ion-list-header>\\r\\n                    <!-- If notifications enabled, show toggles. If disabled, show \\\"Disabled\\\" instead of toggle. -->\\r\\n                    <ion-item *ngFor=\\\"let state of ['loggedin', 'loggedoff']\\\" class=\\\"ion-text-wrap ion-hide-md-up\\\" lines=\\\"none\\\">\\r\\n                        <ion-label>{{ 'core.settings.' + state | translate }}</ion-label>\\r\\n                        <ion-spinner slot=\\\"end\\\"\\r\\n                            *ngIf=\\\"preferences!.enableall && (notification.processorsByName[currentProcessor!.name][state] &&\\r\\n                            notification.processorsByName[currentProcessor!.name][state].updating)\\\">\\r\\n                        </ion-spinner>\\r\\n                        <ion-toggle slot=\\\"end\\\"\\r\\n                            *ngIf=\\\"preferences!.enableall && !notification.processorsByName[currentProcessor!.name].locked\\\"\\r\\n                            [(ngModel)]=\\\"notification.processorsByName[currentProcessor!.name][state].checked\\\"\\r\\n                            (ngModelChange)=\\\"changePreference(notification, state)\\\"\\r\\n                            [disabled]=\\\"notification.processorsByName[currentProcessor!.name][state].updating\\\">\\r\\n                        </ion-toggle>\\r\\n                        <span slot=\\\"end\\\"\\r\\n                            *ngIf=\\\"preferences!.enableall && notification.processorsByName[currentProcessor!.name].locked\\\"\\r\\n                            class=\\\"text-gray\\\">\\r\\n                            {{'core.settings.locked' | translate }}\\r\\n                        </span>\\r\\n                        <ion-note slot=\\\"end\\\" *ngIf=\\\"!preferences!.enableall\\\">{{ 'core.settings.disabled' | translate }}</ion-note>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n            </ion-card>\\r\\n        </ng-container>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\n\r\nimport { AddonMessagesSettingsPage } from './settings.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonMessagesSettingsPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonMessagesSettingsPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonMessagesSettingsPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n    AddonMessagesProvider, AddonMessagesMessagePreferences,\r\n    AddonMessagesMessagePreferencesNotification,\r\n    AddonMessagesMessagePreferencesNotificationProcessor,\r\n    AddonMessages,\r\n} from '../../services/messages';\r\nimport { CoreUser } from '@features/user/services/user';\r\nimport { CoreApp } from '@services/app';\r\nimport { CoreConfig } from '@services/config';\r\nimport { CoreEvents } from '@singletons/events';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreConstants } from '@/core/constants';\r\nimport { IonRefresher } from '@ionic/angular';\r\n\r\n/**\r\n * Page that displays the messages settings page.\r\n */\r\n@Component({\r\n    selector: 'page-addon-messages-settings',\r\n    templateUrl: 'settings.html',\r\n})\r\nexport class AddonMessagesSettingsPage implements OnInit, OnDestroy {\r\n\r\n    protected updateTimeout?: number;\r\n\r\n    preferences?: AddonMessagesMessagePreferences;\r\n    preferencesLoaded = false;\r\n    contactablePrivacy?: number | boolean;\r\n    advancedContactable = false; // Whether the site supports \"advanced\" contactable privacy.\r\n    allowSiteMessaging = false;\r\n    onlyContactsValue = AddonMessagesProvider.MESSAGE_PRIVACY_ONLYCONTACTS;\r\n    courseMemberValue = AddonMessagesProvider.MESSAGE_PRIVACY_COURSEMEMBER;\r\n    siteValue = AddonMessagesProvider.MESSAGE_PRIVACY_SITE;\r\n    groupMessagingEnabled = false;\r\n    sendOnEnter = false;\r\n\r\n    protected previousContactableValue?: number | boolean;\r\n\r\n    constructor() {\r\n\r\n        const currentSite = CoreSites.getCurrentSite();\r\n        this.advancedContactable = !!currentSite?.isVersionGreaterEqualThan('3.6');\r\n        this.allowSiteMessaging = !!currentSite?.canUseAdvancedFeature('messagingallusers');\r\n        this.groupMessagingEnabled = AddonMessages.isGroupMessagingEnabled();\r\n\r\n        this.asyncInit();\r\n    }\r\n\r\n    protected async asyncInit(): Promise<void> {\r\n        this.sendOnEnter = !!(await CoreConfig.get(CoreConstants.SETTINGS_SEND_ON_ENTER, !CoreApp.isMobile()));\r\n    }\r\n\r\n    /**\r\n     * Runs when the page has loaded. This event only happens once per page being created.\r\n     * If a page leaves but is cached, then this event will not fire again on a subsequent viewing.\r\n     * Setup code for the page.\r\n     */\r\n    ngOnInit(): void {\r\n        this.fetchPreferences();\r\n    }\r\n\r\n    /**\r\n     * Fetches preference data.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchPreferences(): Promise<void> {\r\n        try {\r\n            const preferences = await AddonMessages.getMessagePreferences();\r\n            if (this.groupMessagingEnabled) {\r\n                // Simplify the preferences.\r\n                for (const component of preferences.components) {\r\n                    // Only display get the notification preferences.\r\n                    component.notifications = component.notifications.filter((notification) =>\r\n                        notification.preferencekey == AddonMessagesProvider.NOTIFICATION_PREFERENCES_KEY);\r\n\r\n                    component.notifications.forEach((notification) => {\r\n                        notification.processors.forEach(\r\n                            (processor: AddonMessagesMessagePreferencesNotificationProcessorFormatted) => {\r\n                                processor.checked = processor.loggedin.checked || processor.loggedoff.checked;\r\n                            },\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.preferences = preferences;\r\n            this.contactablePrivacy = preferences.blocknoncontacts;\r\n            this.previousContactableValue = this.contactablePrivacy;\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            this.preferencesLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update preferences. The purpose is to store the updated data, it won't be reflected in the view.\r\n     */\r\n    protected updatePreferences(): void {\r\n        AddonMessages.invalidateMessagePreferences().finally(() => {\r\n            this.fetchPreferences();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update preferences after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\r\n     */\r\n    protected updatePreferencesAfterDelay(): void {\r\n        // Cancel pending updates.\r\n        clearTimeout(this.updateTimeout);\r\n\r\n        this.updateTimeout = window.setTimeout(() => {\r\n            this.updateTimeout = undefined;\r\n            this.updatePreferences();\r\n        }, 5000);\r\n    }\r\n\r\n    /**\r\n     * Save the contactable privacy setting..\r\n     *\r\n     * @param value The value to set.\r\n     */\r\n    async saveContactablePrivacy(value?: number | boolean): Promise<void> {\r\n        if (this.contactablePrivacy == this.previousContactableValue) {\r\n            // Value hasn't changed from previous, it probably means that we just fetched the value from the server.\r\n            return;\r\n        }\r\n\r\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\r\n\r\n        if (!this.advancedContactable) {\r\n            // Convert from boolean to number.\r\n            value = value ? 1 : 0;\r\n        }\r\n\r\n        try {\r\n            await CoreUser.updateUserPreference('message_blocknoncontacts', String(value));\r\n            // Update the preferences since they were modified.\r\n            this.updatePreferencesAfterDelay();\r\n            this.previousContactableValue = this.contactablePrivacy;\r\n        } catch (message) {\r\n            // Show error and revert change.\r\n            CoreDomUtils.showErrorModal(message);\r\n            this.contactablePrivacy = this.previousContactableValue;\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the value of a certain preference.\r\n     *\r\n     * @param notification Notification object.\r\n     * @param state State name, ['loggedin', 'loggedoff'].\r\n     * @param processor Notification processor.\r\n     */\r\n    async changePreference(\r\n        notification: AddonMessagesMessagePreferencesNotificationFormatted,\r\n        state: string,\r\n        processor: AddonMessagesMessagePreferencesNotificationProcessorFormatted,\r\n    ): Promise<void> {\r\n\r\n        const valueArray: string[] = [];\r\n        let value = 'none';\r\n\r\n        if (this.groupMessagingEnabled) {\r\n            // Update both states at the same time.\r\n            const promises: Promise<void>[] = [];\r\n\r\n            notification.processors.forEach((processor: AddonMessagesMessagePreferencesNotificationProcessorFormatted) => {\r\n                if (processor.checked) {\r\n                    valueArray.push(processor.name);\r\n                }\r\n            });\r\n\r\n            if (value.length > 0) {\r\n                value = valueArray.join(',');\r\n            }\r\n\r\n            notification.updating = true;\r\n\r\n            promises.push(CoreUser.updateUserPreference(notification.preferencekey + '_loggedin', value));\r\n            promises.push(CoreUser.updateUserPreference(notification.preferencekey + '_loggedoff', value));\r\n\r\n            try {\r\n                await Promise.all(promises);\r\n                // Update the preferences since they were modified.\r\n                this.updatePreferencesAfterDelay();\r\n            } catch (error) {\r\n                // Show error and revert change.\r\n                CoreDomUtils.showErrorModal(error);\r\n                processor.checked = !processor.checked;\r\n            } finally {\r\n                notification.updating = false;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Update only the specified state.\r\n        const processorState = processor[state];\r\n        const preferenceName = notification.preferencekey + '_' + processorState.name;\r\n\r\n        notification.processors.forEach((processor) => {\r\n            if (processor[state].checked) {\r\n                valueArray.push(processor.name);\r\n            }\r\n        });\r\n\r\n        if (value.length > 0) {\r\n            value = valueArray.join(',');\r\n        }\r\n\r\n        if (!notification.updating) {\r\n            notification.updating = {};\r\n        }\r\n\r\n        notification.updating[state] = true;\r\n        try {\r\n            await CoreUser.updateUserPreference(preferenceName, value);\r\n            // Update the preferences since they were modified.\r\n            this.updatePreferencesAfterDelay();\r\n        } catch (error) {\r\n            // Show error and revert change.\r\n            CoreDomUtils.showErrorModal(error);\r\n            processorState.checked = !processorState.checked;\r\n        } finally {\r\n            notification.updating[state] = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the list of preferences.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    refreshPreferences(refresher?: IonRefresher): void {\r\n        AddonMessages.invalidateMessagePreferences().finally(() => {\r\n            this.fetchPreferences().finally(() => {\r\n                refresher?.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    sendOnEnterChanged(): void {\r\n        // Save the value.\r\n        CoreConfig.set(CoreConstants.SETTINGS_SEND_ON_ENTER, this.sendOnEnter ? 1 : 0);\r\n\r\n        // Notify the app.\r\n        CoreEvents.trigger(\r\n            CoreEvents.SEND_ON_ENTER_CHANGED,\r\n            { sendOnEnter: !!this.sendOnEnter },\r\n            CoreSites.getCurrentSiteId(),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        // If there is a pending action to update preferences, execute it right now.\r\n        if (this.updateTimeout) {\r\n            clearTimeout(this.updateTimeout);\r\n            this.updatePreferences();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Message preferences notification with some caclulated data.\r\n */\r\ntype AddonMessagesMessagePreferencesNotificationFormatted = AddonMessagesMessagePreferencesNotification & {\r\n    updating?: boolean | {[state: string]: boolean}; // Calculated in the app. Whether the notification is being updated.\r\n};\r\n\r\n/**\r\n * Message preferences notification processor with some caclulated data.\r\n */\r\ntype AddonMessagesMessagePreferencesNotificationProcessorFormatted = AddonMessagesMessagePreferencesNotificationProcessor & {\r\n    checked?: boolean; // Calculated in the app. Whether the processor is checked either for loggedin or loggedoff.\r\n};\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonNotificationsSettingsPage } from './settings';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonNotificationsSettingsPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonNotificationsSettingsPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonNotificationsSettingsPageModule {}\r\n","export default \":host .addon-notifications-table-content ion-row {\\n  min-height: 35px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbm90aWZpY2F0aW9ucy9wYWdlcy9zZXR0aW5ncy9zZXR0aW5ncy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksZ0JBQUE7QUFBUiIsImZpbGUiOiJzcmMvYWRkb25zL25vdGlmaWNhdGlvbnMvcGFnZXMvc2V0dGluZ3Mvc2V0dGluZ3Muc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICAgIC5hZGRvbi1ub3RpZmljYXRpb25zLXRhYmxlLWNvbnRlbnQgaW9uLXJvdyB7XHJcbiAgICAgICAgbWluLWhlaWdodDogMzVweDtcclxuICAgIH1cclxufVxyXG4iXX0= */\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { IonRefresher } from '@ionic/angular';\r\n\r\nimport { CoreConfig } from '@services/config';\r\nimport { CoreLocalNotifications } from '@services/local-notifications';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreUser } from '@features/user/services/user';\r\nimport { AddonMessageOutputDelegate, AddonMessageOutputHandlerData } from '@addons/messageoutput/services/messageoutput-delegate';\r\nimport { CoreConstants } from '@/core/constants';\r\nimport { CoreError } from '@classes/errors/error';\r\nimport { CoreEvents } from '@singletons/events';\r\nimport {\r\n    AddonNotifications,\r\n    AddonNotificationsPreferencesProcessor,\r\n    AddonNotificationsPreferencesNotificationProcessorState,\r\n} from '../../services/notifications';\r\nimport {\r\n    AddonNotificationsHelper,\r\n    AddonNotificationsPreferencesComponentFormatted,\r\n    AddonNotificationsPreferencesFormatted,\r\n    AddonNotificationsPreferencesNotificationFormatted,\r\n    AddonNotificationsPreferencesProcessorFormatted,\r\n} from '@addons/notifications/services/notifications-helper';\r\nimport { CoreNavigator } from '@services/navigator';\r\n\r\n/**\r\n * Page that displays notifications settings.\r\n */\r\n@Component({\r\n    selector: 'page-addon-notifications-settings',\r\n    templateUrl: 'settings.html',\r\n    styleUrls: ['settings.scss'],\r\n})\r\nexport class AddonNotificationsSettingsPage implements OnInit, OnDestroy {\r\n\r\n    preferences?: AddonNotificationsPreferencesFormatted;\r\n    components?: AddonNotificationsPreferencesComponentFormatted[];\r\n    currentProcessor?: AddonNotificationsPreferencesProcessor;\r\n    preferencesLoaded = false;\r\n    notificationSound = false;\r\n    notifPrefsEnabled: boolean;\r\n    canChangeSound: boolean;\r\n    processorHandlers: AddonMessageOutputHandlerData[] = [];\r\n\r\n    protected updateTimeout?: number;\r\n\r\n    constructor() {\r\n        this.notifPrefsEnabled = AddonNotifications.isNotificationPreferencesEnabled();\r\n        this.canChangeSound = CoreLocalNotifications.canDisableSound();\r\n    }\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        if (this.canChangeSound) {\r\n            this.notificationSound = await CoreConfig.get<boolean>(CoreConstants.SETTINGS_NOTIFICATION_SOUND, true);\r\n        }\r\n\r\n        if (this.notifPrefsEnabled) {\r\n            this.fetchPreferences();\r\n        } else {\r\n            this.preferencesLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches preferences data.\r\n     *\r\n     * @return Resolved when done.\r\n     */\r\n    protected async fetchPreferences(): Promise<void> {\r\n        try {\r\n            const preferences = await AddonNotifications.getNotificationPreferences();\r\n\r\n            if (!this.currentProcessor) {\r\n                // Initialize current processor. Load \"Mobile\" (airnotifier) if available.\r\n                this.currentProcessor = AddonNotificationsHelper.getProcessor(preferences.processors, 'airnotifier');\r\n            }\r\n\r\n            if (!this.currentProcessor) {\r\n                // Shouldn't happen.\r\n                throw new CoreError('No processor found');\r\n            }\r\n\r\n            preferences.enableall = !preferences.disableall;\r\n            this.preferences = AddonNotificationsHelper.formatPreferences(preferences);\r\n            this.loadProcessor(this.currentProcessor);\r\n\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            this.preferencesLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load a processor.\r\n     *\r\n     * @param processor Processor object.\r\n     */\r\n    protected loadProcessor(processor: AddonNotificationsPreferencesProcessorFormatted): void {\r\n        if (!processor) {\r\n            return;\r\n        }\r\n\r\n        this.currentProcessor = processor;\r\n        this.processorHandlers = [];\r\n        this.components = AddonNotificationsHelper.getProcessorComponents(\r\n            processor.name,\r\n            this.preferences?.components || [],\r\n        );\r\n\r\n        if (!processor.hassettings || !processor.supported) {\r\n            return;\r\n        }\r\n\r\n        const handlerData = AddonMessageOutputDelegate.getDisplayData(processor);\r\n        if (handlerData) {\r\n            this.processorHandlers.push(handlerData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update preferences after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\r\n     */\r\n    protected updatePreferencesAfterDelay(): void {\r\n        // Cancel pending updates.\r\n        clearTimeout(this.updateTimeout);\r\n\r\n        this.updateTimeout = window.setTimeout(() => {\r\n            this.updateTimeout = undefined;\r\n            this.updatePreferences();\r\n        }, 5000);\r\n    }\r\n\r\n    /**\r\n     * Update preferences. The purpose is to store the updated data, it won't be reflected in the view.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async updatePreferences(): Promise<void> {\r\n        await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationPreferences());\r\n\r\n        await AddonNotifications.getNotificationPreferences();\r\n    }\r\n\r\n    /**\r\n     * The selected processor was changed.\r\n     *\r\n     * @param name Name of the selected processor.\r\n     */\r\n    changeProcessor(name: string): void {\r\n        const processor = this.preferences!.processors.find((processor) => processor.name == name);\r\n\r\n        if (processor) {\r\n            this.loadProcessor(processor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the list of preferences.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    async refreshPreferences(refresher?: IonRefresher): Promise<void> {\r\n        try {\r\n            await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationPreferences());\r\n\r\n            await this.fetchPreferences();\r\n        } finally {\r\n            refresher?.complete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open extra preferences.\r\n     *\r\n     * @param handlerData\r\n     */\r\n    openExtraPreferences(handlerData: AddonMessageOutputHandlerData): void {\r\n        CoreNavigator.navigateToSitePath(handlerData.page, { params: handlerData.pageParams });\r\n    }\r\n\r\n    /**\r\n     * Change the value of a certain preference.\r\n     *\r\n     * @param notification Notification object.\r\n     * @param state State name, ['loggedin', 'loggedoff'].\r\n     * @return Promise resolved when done.\r\n     */\r\n    async changePreference(notification: AddonNotificationsPreferencesNotificationFormatted, state: string): Promise<void> {\r\n        const processor = notification.processorsByName?.[this.currentProcessor?.name || ''];\r\n        if (!processor) {\r\n            return;\r\n        }\r\n\r\n        const processorState: ProcessorStateFormatted = processor[state];\r\n        const preferenceName = notification.preferencekey + '_' + processorState.name;\r\n        let value: string | undefined;\r\n\r\n        notification.processors.forEach((processor) => {\r\n            if (processor[state].checked) {\r\n                if (!value) {\r\n                    value = processor.name;\r\n                } else {\r\n                    value += ',' + processor.name;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!value) {\r\n            value = 'none';\r\n        }\r\n\r\n        processorState.updating = true;\r\n\r\n        try {\r\n            await CoreUser.updateUserPreference(preferenceName, value);\r\n\r\n            // Update the preferences since they were modified.\r\n            this.updatePreferencesAfterDelay();\r\n        } catch (error) {\r\n            // Show error and revert change.\r\n            CoreDomUtils.showErrorModal(error);\r\n            processor[state].checked = !processor[state].checked;\r\n        } finally {\r\n            processorState.updating = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable all notifications changed.\r\n     *\r\n     * @param enable Whether to enable or disable.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async enableAll(enable?: boolean): Promise<void> {\r\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\r\n\r\n        try {\r\n            CoreUser.updateUserPreferences([], !enable);\r\n\r\n            // Update the preferences since they were modified.\r\n            this.updatePreferencesAfterDelay();\r\n        } catch (error) {\r\n            // Show error and revert change.\r\n            CoreDomUtils.showErrorModal(error);\r\n            this.preferences!.enableall = !this.preferences!.enableall;\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the notification sound setting.\r\n     *\r\n     * @param enabled True to enable the notification sound, false to disable it.\r\n     */\r\n    async changeNotificationSound(enabled: boolean): Promise<void> {\r\n        await CoreUtils.ignoreErrors(CoreConfig.set(CoreConstants.SETTINGS_NOTIFICATION_SOUND, enabled ? 1 : 0));\r\n\r\n        const siteId = CoreSites.getCurrentSiteId();\r\n        CoreEvents.trigger(CoreEvents.NOTIFICATION_SOUND_CHANGED, { enabled }, siteId);\r\n        CoreLocalNotifications.rescheduleAll();\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        // If there is a pending action to update preferences, execute it right now.\r\n        if (this.updateTimeout) {\r\n            clearTimeout(this.updateTimeout);\r\n            this.updatePreferences();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * State in notification processor in notification preferences component with some calculated data.\r\n */\r\ntype ProcessorStateFormatted = AddonNotificationsPreferencesNotificationProcessorState & {\r\n    updating?: boolean; // Calculated in the app. Whether the state is being updated.\r\n};\r\n"],"sourceRoot":"webpack:///"}