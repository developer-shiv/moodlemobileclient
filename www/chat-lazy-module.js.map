{"version":3,"sources":["./src/addons/mod/chat/pages/chat/chat.html","./src/addons/mod/chat/pages/index/index.html","./src/addons/mod/chat/pages/session-messages/session-messages.html","./src/addons/mod/chat/pages/sessions/sessions.html","./src/addons/mod/chat/chat-lazy.module.ts","./src/addons/mod/chat/pages/chat/chat.scss","./src/addons/mod/chat/pages/chat/chat.ts","./src/addons/mod/chat/pages/index/index.ts","./src/addons/mod/chat/pages/session-messages/session-messages.scss","./src/addons/mod/chat/pages/session-messages/session-messages.ts","./src/addons/mod/chat/pages/sessions/sessions.ts"],"names":[],"mappings":"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","file":"chat-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" *ngIf=\\\"loaded\\\" (click)=\\\"showChatUsers()\\\" [attr.aria-label]=\\\"'core.users' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-users\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"has-footer\\\">\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\" class=\\\"safe-area-page\\\">\\r\\n        <ion-list class=\\\"addon-messages-discussion-container\\\" aria-live=\\\"polite\\\">\\r\\n            <ng-container *ngFor=\\\"let message of messages; index as index; last as last\\\">\\r\\n\\r\\n                <p class=\\\"ion-text-center addon-messages-date\\\" *ngIf=\\\"message.showDate\\\">\\r\\n                    {{ message.timestamp * 1000 | coreFormatDate: \\\"strftimedayshort\\\" }}\\r\\n                </p>\\r\\n\\r\\n                <div class=\\\"ion-text-center addon-mod_chat-notice\\\" *ngIf=\\\"message.special\\\">\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"success\\\" *ngIf=\\\"message.system && message.message == 'enter'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-in-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageenter' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"danger\\\" *ngIf=\\\"message.system && message.message == 'exit'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-out-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageexit' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\" *ngIf=\\\"message.beep == 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepseveryone' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\"\\r\\n                        *ngIf=\\\"message.userid != currentUserId && message.beep == currentUserId\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepsyou' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"light\\\"\\r\\n                        *ngIf=\\\"message.userid == currentUserId && message.beep && message.beep != 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageyoubeep' | translate:{$a: message.beepWho} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"info\\\" *ngIf=\\\"!message.system && !message.beep\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-asterisk\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            <strong>\\r\\n                                {{ message.userfullname }} <core-format-text [text]=\\\"message.message\\\" contextLevel=\\\"module\\\"\\r\\n                                [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\" (afterRender)=\\\"last && scrollToBottom()\\\">\\r\\n                                </core-format-text>\\r\\n                            </strong>\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n                </div>\\r\\n\\r\\n                <ion-item *ngIf=\\\"!message.special\\\" class=\\\"ion-text-wrap addon-message\\\"\\r\\n                    [class.addon-message-mine]=\\\"message.userid == currentUserId\\\"\\r\\n                    [class.addon-message-not-mine]=\\\"message.userid != currentUserId\\\"\\r\\n                    [class.addon-message-no-user]=\\\"!message.showUserData\\\"\\r\\n                    [@coreSlideInOut]=\\\"message.userid == currentUserId ? '' : 'fromLeft'\\\">\\r\\n                    <ion-label>\\r\\n                        <!-- User data. -->\\r\\n                        <h2 class=\\\"addon-message-user\\\" *ngIf=\\\"message.showUserData\\\">\\r\\n                            <core-user-avatar slot=\\\"start\\\" [user]=\\\"message\\\" [linkProfile]=\\\"false\\\">\\r\\n                            </core-user-avatar>\\r\\n                            <div>{{ message.userfullname }}</div>\\r\\n                        </h2>\\r\\n\\r\\n                        <p class=\\\"addon-message-text\\\">\\r\\n                            <core-format-text [text]=\\\"message.message\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\"\\r\\n                                [courseId]=\\\"courseId\\\" (afterRender)=\\\"last && scrollToBottom()\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <ion-note>{{ message.timestamp * 1000 | coreFormatDate: \\\"strftimetime\\\" }}</ion-note>\\r\\n                    <div class=\\\"tail\\\" *ngIf=\\\"message.showTail\\\"></div>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"!messages || messages.length <= 0\\\" icon=\\\"far-comments\\\"\\r\\n            [message]=\\\"'addon.mod_chat.nomessages' | translate\\\">\\r\\n        </core-empty-box>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n<ion-footer color=\\\"light\\\" class=\\\"footer-adjustable\\\">\\r\\n    <ion-toolbar color=\\\"light\\\">\\r\\n        <p class=\\\"ion-text-center\\\" *ngIf=\\\"!isOnline\\\">\\r\\n            {{ 'addon.mod_chat.mustbeonlinetosendmessages' | translate }}\\r\\n        </p>\\r\\n\\r\\n        <core-send-message-form [sendDisabled]=\\\"sending\\\" *ngIf=\\\"isOnline && polling && loaded\\\" [message]=\\\"newMessage\\\"\\r\\n            (onSubmit)=\\\"sendMessage($event)\\\" [placeholder]=\\\"'addon.messages.newmessage' | translate\\\">\\r\\n        </core-send-message-form>\\r\\n\\r\\n        <ion-button *ngIf=\\\"isOnline && !polling && loaded\\\" (click)=\\\"reconnect()\\\" expand=\\\"block\\\" color=\\\"light\\\">\\r\\n            {{ 'core.login.reconnect' | translate }}\\r\\n        </ion-button>\\r\\n    </ion-toolbar>\\r\\n</ion-footer>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module?.id\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- The buttons defined by the component will be added in here. -->\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!activityComponent?.loaded\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <addon-mod-chat-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" (dataRetrieved)=\\\"updateData($event)\\\"></addon-mod-chat-index>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.mod_chat.messages' | translate }}</h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshMessages($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\" class=\\\"safe-area-page\\\">\\r\\n        <ion-list class=\\\"addon-messages-discussion-container\\\">\\r\\n            <ng-container *ngFor=\\\"let message of messages; index as index;\\\">\\r\\n\\r\\n                <div class=\\\"ion-text-center addon-messages-date\\\" *ngIf=\\\"message.showDate\\\">\\r\\n                    {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimedayshort\\\" }}\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"ion-text-center addon-mod_chat-notice\\\" *ngIf=\\\"message.special\\\">\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"success\\\" *ngIf=\\\"message.issystem && message.message == 'enter'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-in-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageenter' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"danger\\\" *ngIf=\\\"message.issystem && message.message == 'exit'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-sign-out-alt\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageexit' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\" *ngIf=\\\"message.beep == 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepseveryone' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"primary\\\"\\r\\n                        *ngIf=\\\"message.userid != currentUserId && message.beep == currentUserId\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messagebeepsyou' | translate:{$a: message.userfullname} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"light\\\"\\r\\n                        *ngIf=\\\"message.userid == currentUserId && message.beep && message.beep != 'all'\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-bell\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            {{ 'addon.mod_chat.messageyoubeep' | translate:{$a: message.beepWho} }}\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n\\r\\n                    <ion-badge class=\\\"ion-text-wrap\\\" color=\\\"info\\\" *ngIf=\\\"!message.issystem && !message.beep\\\">\\r\\n                        <span>\\r\\n                            <ion-icon name=\\\"fas-asterisk\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                            {{ message.timestamp * 1000 | coreFormatDate:\\\"strftimetime\\\" }}\\r\\n                            <strong>\\r\\n                                {{ message.userfullname }} <core-format-text [text]=\\\"message.message\\\" contextLevel=\\\"module\\\"\\r\\n                                [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\"></core-format-text>\\r\\n                            </strong>\\r\\n                        </span>\\r\\n                    </ion-badge>\\r\\n                </div>\\r\\n\\r\\n                <ion-item *ngIf=\\\"!message.special\\\" class=\\\"ion-text-wrap addon-message\\\"\\r\\n                    [class.addon-message-mine]=\\\"message.userid == currentUserId\\\"\\r\\n                    [class.addon-message-not-mine]=\\\"message.userid != currentUserId\\\"\\r\\n                    [class.addon-message-no-user]=\\\"!message.showUserData\\\">\\r\\n                    <ion-label>\\r\\n                        <!-- User data. -->\\r\\n                        <h2 class=\\\"addon-message-user\\\">\\r\\n                            <core-user-avatar slot=\\\"start\\\" [user]=\\\"message\\\" [linkProfile]=\\\"false\\\" *ngIf=\\\"message.showUserData\\\">\\r\\n                            </core-user-avatar>\\r\\n                            <div *ngIf=\\\"message.showUserData\\\">{{ message.userfullname }}</div>\\r\\n                        </h2>\\r\\n\\r\\n                        <p class=\\\"addon-message-text\\\">\\r\\n                            <core-format-text [text]=\\\"message.message\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\"\\r\\n                                [courseId]=\\\"courseId\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                        <ion-note>{{ message.timestamp * 1000 | coreFormatDate: \\\"strftimetime\\\" }}</ion-note>\\r\\n                    </ion-label>\\r\\n                    <div class=\\\"tail\\\" *ngIf=\\\"message.showTail\\\"></div>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.mod_chat.chatreport' | translate }}</h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!sessions.loaded\\\" (ionRefresh)=\\\"refreshSessions($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"sessions.loaded\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"groupInfo && (groupInfo.separateGroups || groupInfo.visibleGroups)\\\">\\r\\n                <ion-label id=\\\"addon-chat-groupslabel\\\">\\r\\n                    <ng-container *ngIf=\\\"groupInfo.separateGroups\\\">{{'core.groupsseparate' | translate }}</ng-container>\\r\\n                    <ng-container *ngIf=\\\"groupInfo.visibleGroups\\\">{{'core.groupsvisible' | translate }}</ng-container>\\r\\n                </ion-label>\\r\\n                <ion-select [(ngModel)]=\\\"groupId\\\" (ionChange)=\\\"fetchSessions(true)\\\" aria-labelledby=\\\"addon-chat-groupslabel\\\"\\r\\n                    interface=\\\"action-sheet\\\" [interfaceOptions]=\\\"{header: 'core.group' | translate}\\\">\\r\\n                    <ion-select-option *ngFor=\\\"let groupOpt of groupInfo.groups\\\" [value]=\\\"groupOpt.id\\\">\\r\\n                        {{groupOpt.name}}\\r\\n                    </ion-select-option>\\r\\n                </ion-select>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-item>\\r\\n                <ion-label>{{ 'addon.mod_chat.showincompletesessions' | translate }}</ion-label>\\r\\n                <ion-toggle [(ngModel)]=\\\"showAll\\\" (ionChange)=\\\"fetchSessions(true)\\\"></ion-toggle>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-card *ngFor=\\\"let session of sessions.items\\\" (click)=\\\"sessions.select(session)\\\" button\\r\\n                [attr.aria-current]=\\\"sessions.getItemAriaCurrent(session)\\\"\\r\\n                [class.addon-mod-chat-session-show-more]=\\\"session.sessionusers.length < session.allsessionusers.length\\\">\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ session.sessionstart * 1000 | coreFormatDate }}</p>\\r\\n                        <p *ngIf=\\\"session.duration\\\">{{ session.duration | coreDuration }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-card-content>\\r\\n                    <ion-item *ngFor=\\\"let user of session.sessionusers\\\">\\r\\n                        <ion-label>\\r\\n                            {{ user.userfullname }} <span *ngIf=\\\"user.messagecount\\\">({{ user.messagecount }})</span>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ion-card-content>\\r\\n                <ion-button *ngIf=\\\"session.sessionusers.length < session.allsessionusers.length\\\" fill=\\\"clear\\\" expand=\\\"block\\\"\\r\\n                    (click)=\\\"showMoreUsers(session, $event)\\\">\\r\\n                    {{ 'core.showmore' | translate }}\\r\\n                </ion-button>\\r\\n            </ion-card>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"sessions.empty\\\" icon=\\\"far-comments\\\" [message]=\\\"'addon.mod_chat.nosessionsfound' | translate\\\">\\r\\n            </core-empty-box>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonModChatComponentsModule } from './components/components.module';\r\nimport { AddonModChatIndexPage } from './pages/index/index';\r\nimport { AddonModChatChatPage } from './pages/chat/chat';\r\nimport { AddonModChatSessionMessagesPage } from './pages/session-messages/session-messages';\r\nimport { CoreScreen } from '@services/screen';\r\nimport { conditionalRoutes } from '@/app/app-routing.module';\r\nimport { AddonModChatSessionsPage } from './pages/sessions/sessions';\r\nimport { CanLeaveGuard } from '@guards/can-leave';\r\n\r\nconst commonRoutes: Routes = [\r\n    {\r\n        path: ':courseId/:cmId',\r\n        component: AddonModChatIndexPage,\r\n    },\r\n    {\r\n        path: ':courseId/:cmId/chat',\r\n        component: AddonModChatChatPage,\r\n        canDeactivate: [CanLeaveGuard],\r\n    },\r\n];\r\n\r\nconst mobileRoutes: Routes = [\r\n    ...commonRoutes,\r\n    {\r\n        path: ':courseId/:cmId/sessions',\r\n        component: AddonModChatSessionsPage,\r\n    },\r\n    {\r\n        path: ':courseId/:cmId/sessions/:sessionStart/:sessionEnd',\r\n        component: AddonModChatSessionMessagesPage,\r\n    },\r\n];\r\n\r\nconst tabletRoutes: Routes = [\r\n    ...commonRoutes,\r\n    {\r\n        path: ':courseId/:cmId/sessions',\r\n        component: AddonModChatSessionsPage,\r\n        children: [\r\n            {\r\n                path: ':sessionStart/:sessionEnd',\r\n                component: AddonModChatSessionMessagesPage,\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nconst routes: Routes = [\r\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\r\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        AddonModChatComponentsModule,\r\n    ],\r\n    declarations: [\r\n        AddonModChatIndexPage,\r\n        AddonModChatChatPage,\r\n        AddonModChatSessionsPage,\r\n        AddonModChatSessionMessagesPage,\r\n    ],\r\n})\r\nexport class AddonModChatLazyModule {}\r\n","export default \"/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/*\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/*\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n * Extracted from ionic.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host ion-content {\\n  --background: var(--background-alternative);\\n}\\n:host ion-content::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n:host .addon-messages-discussion-container {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 15px;\\n  background: var(--background-alternative);\\n}\\n:host .addon-messages-date {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n:host ion-item.addon-message {\\n  border: 0;\\n  border-radius: 4px;\\n  padding: 0 8px 0 8px;\\n  margin: 10px 8px 0 8px;\\n  --background: var(--addon-messages-message-bg);\\n  background: var(--background);\\n  align-self: flex-start;\\n  width: 90%;\\n  max-width: 90%;\\n  --min-height: var(--a11y-min-target-size);\\n  position: relative;\\n  transition: width 500ms ease-in-out;\\n  overflow: visible;\\n}\\n:host ion-item.addon-message::part(native) {\\n  --inner-border-width: 0;\\n  --inner-padding-end: 0;\\n  padding: 0;\\n  margin: 0;\\n}\\n:host ion-item.addon-message core-format-text > p:only-child {\\n  display: inline;\\n}\\n:host ion-item.addon-message .addon-message-user {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n  margin-bottom: 0.5rem;\\n  margin-top: 0;\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .addon-message-user core-user-avatar {\\n  display: block;\\n  --core-avatar-size: var(--addon-messages-avatar-size);\\n  margin: 0;\\n}\\n:host ion-item.addon-message .addon-message-user div {\\n  font-weight: 500;\\n  flex-grow: 1;\\n  padding-left: 0.5rem;\\n  padding-right: 0.5rem;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message .addon-message-user div {\\n    padding-left: unset;\\n    padding-right: unset;\\n    -webkit-padding-start: 0.5rem;\\n    padding-inline-start: 0.5rem;\\n    -webkit-padding-end: 0.5rem;\\n    padding-inline-end: 0.5rem;\\n  }\\n}\\n:host ion-item.addon-message ion-note {\\n  color: var(--addon-messages-message-note-text);\\n  font-size: var(--addon-messages-message-note-font-size);\\n  margin: 0;\\n  padding: 0 0 8px 0;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message[tappable]:active {\\n  --background: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message ion-label {\\n  margin: 0;\\n  padding: 8px 0;\\n}\\n:host ion-item.addon-message .addon-message-text {\\n  display: inline-flex;\\n}\\n:host ion-item.addon-message .addon-message-text * {\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .tail {\\n  content: \\\"\\\";\\n  width: 0;\\n  height: 0;\\n  border: 0.5rem solid transparent;\\n  position: absolute;\\n  touch-action: none;\\n  bottom: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine {\\n  --background: var(--addon-messages-message-mine-bg);\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active {\\n  --background: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner {\\n  float: right;\\n  margin-left: 5px;\\n  margin-right: -3px;\\n  margin-top: 2px;\\n  margin-bottom: -2px;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .spinner {\\n  float: left;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .spinner {\\n    margin-left: unset;\\n    margin-right: unset;\\n    -webkit-margin-start: 5px;\\n    margin-inline-start: 5px;\\n    -webkit-margin-end: -3px;\\n    margin-inline-end: -3px;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n:host ion-item.addon-message.addon-message-mine .tail {\\n  right: -8px;\\n  margin-right: -0.5rem;\\n  border-bottom-color: var(--addon-messages-message-mine-bg);\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .tail {\\n  left: unset;\\n  right: unset;\\n  left: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .tail {\\n    margin-right: unset;\\n    -webkit-margin-end: -0.5rem;\\n    margin-inline-end: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active .tail {\\n  border-bottom-color: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-not-mine .tail {\\n  border-bottom-color: var(--addon-messages-message-bg);\\n  left: -8px;\\n  margin-left: -0.5rem;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-not-mine .tail {\\n  left: unset;\\n  right: unset;\\n  right: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-not-mine .tail {\\n    margin-left: unset;\\n    -webkit-margin-start: -0.5rem;\\n    margin-inline-start: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message[tappable].addon-message-not-mine.activated .tail {\\n  border-bottom-color: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message .addon-messages-delete-button {\\n  min-height: initial;\\n  line-height: initial;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  height: var(--a11y-min-target-size) !important;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message .addon-messages-delete-button ion-icon {\\n  font-size: 1.4em;\\n  line-height: initial;\\n  color: var(--ion-color-danger);\\n}\\n:host ion-item.addon-message.addon-message-no-user {\\n  margin-top: 8px;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine {\\n  padding-top: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine .item-heading,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine .item-heading {\\n  margin-bottom: 0;\\n}\\n:host-context(.ios) ion-footer .toolbar:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\n:host .addon-mod_chat-notice {\\n  margin-top: 8px;\\n  margin-bottom: 8px;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { CoreAnimations } from '@components/animations';\r\nimport { CoreSendMessageFormComponent } from '@components/send-message-form/send-message-form';\r\nimport { CanLeave } from '@guards/can-leave';\r\nimport { IonContent } from '@ionic/angular';\r\nimport { CoreApp } from '@services/app';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { Network, NgZone, Translate } from '@singletons';\r\nimport { CoreEvents } from '@singletons/events';\r\nimport { Subscription } from 'rxjs';\r\nimport { AddonModChatUsersModalComponent, AddonModChatUsersModalResult } from '../../components/users-modal/users-modal';\r\nimport { AddonModChat, AddonModChatProvider, AddonModChatUser } from '../../services/chat';\r\nimport { AddonModChatFormattedMessage, AddonModChatHelper } from '../../services/chat-helper';\r\n\r\n/**\r\n * Page that displays a chat session.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-chat-chat',\r\n    templateUrl: 'chat.html',\r\n    animations: [CoreAnimations.SLIDE_IN_OUT],\r\n    styleUrls: ['chat.scss'],\r\n})\r\nexport class AddonModChatChatPage implements OnInit, OnDestroy, CanLeave {\r\n\r\n    @ViewChild(IonContent) content?: IonContent;\r\n    @ViewChild(CoreSendMessageFormComponent) sendMessageForm?: CoreSendMessageFormComponent;\r\n\r\n    loaded = false;\r\n    title = '';\r\n    messages: AddonModChatFormattedMessage[] = [];\r\n    newMessage?: string;\r\n    polling?: number;\r\n    isOnline: boolean;\r\n    currentUserId: number;\r\n    sending = false;\r\n    courseId!: number;\r\n    cmId!: number;\r\n\r\n    protected chatId!: number;\r\n    protected sessionId?: string;\r\n    protected lastTime = 0;\r\n    protected oldContentHeight = 0;\r\n    protected onlineSubscription: Subscription;\r\n    protected viewDestroyed = false;\r\n    protected pollingRunning = false;\r\n    protected users: AddonModChatUser[] = [];\r\n\r\n    constructor() {\r\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\r\n        this.isOnline = CoreApp.isOnline();\r\n        this.onlineSubscription = Network.onChange().subscribe(() => {\r\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\r\n            NgZone.run(() => {\r\n                this.isOnline = CoreApp.isOnline();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.chatId = CoreNavigator.getRouteNumberParam('chatId')!;\r\n        this.title = CoreNavigator.getRouteParam('title') || '';\r\n\r\n        try {\r\n            await this.loginUser();\r\n\r\n            await this.fetchMessages();\r\n\r\n            this.startPolling();\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_chat.errorwhileconnecting', true);\r\n            CoreNavigator.back();\r\n        } finally {\r\n            this.loaded = true;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Runs when the page has fully entered and is now the active page.\r\n     * This event will fire, whether it was the first load or a cached page.\r\n     */\r\n    ionViewDidEnter(): void {\r\n        this.startPolling();\r\n    }\r\n\r\n    /**\r\n     * Runs when the page is about to leave and no longer be the active page.\r\n     */\r\n    ionViewWillLeave(): void {\r\n        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'chat' });\r\n        this.stopPolling();\r\n    }\r\n\r\n    /**\r\n     * Convenience function to login the user.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async loginUser(): Promise<void> {\r\n        this.sessionId = await AddonModChat.loginUser(this.chatId);\r\n    }\r\n\r\n    /**\r\n     * Convenience function to fetch chat messages.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchMessages(): Promise<void> {\r\n        const messagesInfo = await AddonModChat.getLatestMessages(this.sessionId!, this.lastTime);\r\n\r\n        this.lastTime = messagesInfo.chatnewlasttime || 0;\r\n\r\n        const messages = await AddonModChat.getMessagesUserData(messagesInfo.messages, this.courseId);\r\n\r\n        if (!messages.length) {\r\n            // No messages yet, nothing else to do.\r\n            return;\r\n        }\r\n\r\n        const previousLength = this.messages.length;\r\n        this.messages = this.messages.concat(messages);\r\n\r\n        // Calculate which messages need to display the date or user data.\r\n        for (let index = previousLength; index < this.messages.length; index++) {\r\n            const prevMessage = index > 0 ? this.messages[index - 1] : undefined;\r\n\r\n            this.messages[index] = AddonModChatHelper.formatMessage(this.currentUserId, this.messages[index], prevMessage);\r\n\r\n            const message = this.messages[index];\r\n\r\n            if (message.beep && message.beep != String(this.currentUserId)) {\r\n                this.loadMessageBeepWho(message);\r\n            }\r\n        }\r\n\r\n        this.messages[this.messages.length - 1].showTail = true;\r\n\r\n        // New messages or beeps, scroll to bottom.\r\n        setTimeout(() => this.scrollToBottom());\r\n    }\r\n\r\n    protected async loadMessageBeepWho(message: AddonModChatFormattedMessage): Promise<void> {\r\n        message.beepWho = await this.getUserFullname(message.beep!);\r\n    }\r\n\r\n    /**\r\n     * Display the chat users modal.\r\n     */\r\n    async showChatUsers(): Promise<void> {\r\n        // Create the toc modal.\r\n        const modalData = await CoreDomUtils.openSideModal<AddonModChatUsersModalResult>({\r\n            component: AddonModChatUsersModalComponent,\r\n            componentProps: {\r\n                sessionId: this.sessionId,\r\n                cmId: this.cmId,\r\n            },\r\n        });\r\n\r\n        if (modalData) {\r\n            if (modalData.talkTo) {\r\n                this.newMessage = `To ${modalData.talkTo}: ` + (this.sendMessageForm?.message || '');\r\n            }\r\n            if (modalData.beepTo) {\r\n                this.sendMessage('', modalData.beepTo);\r\n            }\r\n\r\n            this.users = modalData.users;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the user fullname for a beep.\r\n     *\r\n     * @param id User Id before parsing.\r\n     * @return User fullname.\r\n     */\r\n    protected async getUserFullname(id: string): Promise<string> {\r\n        const idNumber = parseInt(id, 10);\r\n\r\n        if (isNaN(idNumber)) {\r\n            return id;\r\n        }\r\n\r\n        const user = this.users.find((user) => user.id == idNumber);\r\n\r\n        if (user) {\r\n            return user.fullname;\r\n        }\r\n\r\n        try {\r\n            const data = await AddonModChat.getChatUsers(this.sessionId!, { cmId: this.cmId });\r\n\r\n            this.users = data.users;\r\n            const user = this.users.find((user) => user.id == idNumber);\r\n\r\n            if (user) {\r\n                return user.fullname;\r\n            }\r\n\r\n            return id;\r\n        } catch (error) {\r\n            // Ignore errors.\r\n            return id;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start the polling to get chat messages periodically.\r\n     */\r\n    protected startPolling(): void {\r\n        // We already have the polling in place.\r\n        if (this.polling) {\r\n            return;\r\n        }\r\n\r\n        // Start polling.\r\n        this.polling = window.setInterval(() => {\r\n            CoreUtils.ignoreErrors(this.fetchMessagesInterval());\r\n        }, AddonModChatProvider.POLL_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Stop polling for messages.\r\n     */\r\n    protected stopPolling(): void {\r\n        clearInterval(this.polling);\r\n        this.polling = undefined;\r\n    }\r\n\r\n    /**\r\n     * Convenience function to be called every certain time to fetch chat messages.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchMessagesInterval(): Promise<void> {\r\n        if (!this.isOnline || this.pollingRunning) {\r\n            // Obviously we cannot check for new messages when the app is offline.\r\n            return;\r\n        }\r\n\r\n        this.pollingRunning = true;\r\n\r\n        try {\r\n            await this.fetchMessages();\r\n        } catch {\r\n            try {\r\n                // Try to login, it might have failed because the session expired.\r\n                await this.loginUser();\r\n\r\n                await this.fetchMessages();\r\n            } catch (error) {\r\n                // Fail again. Stop polling if needed.\r\n                this.stopPolling();\r\n                CoreDomUtils.showErrorModalDefault(error, 'addon.mod_chat.errorwhileretrievingmessages', true);\r\n\r\n                throw error;\r\n            }\r\n        } finally {\r\n            this.pollingRunning = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a message to the chat.\r\n     *\r\n     * @param text Text of the nessage.\r\n     * @param beep ID of the user to beep.\r\n     */\r\n    async sendMessage(text: string, beep: number = 0): Promise<void> {\r\n        if (!this.isOnline) {\r\n            // Silent error, the view should prevent this.\r\n            return;\r\n        } else if (beep === 0 && !text.trim()) {\r\n            // Silent error.\r\n            return;\r\n        }\r\n\r\n        this.sending = true;\r\n\r\n        try {\r\n            await AddonModChat.sendMessage(this.sessionId!, text, beep);\r\n\r\n            // Update messages to show the sent message.\r\n            CoreUtils.ignoreErrors(this.fetchMessagesInterval());\r\n        } catch (error) {\r\n            // Only close the keyboard if an error happens, we want the user to be able to send multiple\r\n            // messages without the keyboard being closed.\r\n            CoreApp.closeKeyboard();\r\n\r\n            this.newMessage = text;\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_chat.errorwhilesendingmessage', true);\r\n        } finally {\r\n            this.sending = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Try to reconnect.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    async reconnect(): Promise<void> {\r\n        const modal = await CoreDomUtils.showModalLoading();\r\n\r\n        try {\r\n            // Call startPolling would take a while for the first execution, so we'll execute it manually to check if it works now.\r\n            await this.fetchMessagesInterval();\r\n\r\n            // It works, start the polling again.\r\n            this.startPolling();\r\n        } catch {\r\n            // Ignore errors.\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scroll bottom when render has finished.\r\n     */\r\n    scrollToBottom(): void {\r\n        // Need a timeout to leave time to the view to be rendered.\r\n        setTimeout(() => {\r\n            if (!this.viewDestroyed) {\r\n                this.content?.scrollToBottom();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if we can leave the page or not.\r\n     *\r\n     * @return Resolved with true if we can leave it, rejected if not.\r\n     */\r\n    async canLeave(): Promise<boolean> {\r\n        if (! this.messages.some((message) => !message.special)) {\r\n            return true;\r\n        }\r\n\r\n        // Modified, confirm user wants to go back.\r\n        await CoreDomUtils.showConfirm(Translate.instant('addon.mod_chat.confirmloss'));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.onlineSubscription && this.onlineSubscription.unsubscribe();\r\n        this.stopPolling();\r\n        this.viewDestroyed = true;\r\n    }\r\n\r\n}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, ViewChild } from '@angular/core';\r\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\r\nimport { AddonModChatIndexComponent } from '../../components/index/index';\r\n\r\n/**\r\n * Page that displays a chat.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-chat-index',\r\n    templateUrl: 'index.html',\r\n})\r\nexport class AddonModChatIndexPage extends CoreCourseModuleMainActivityPage<AddonModChatIndexComponent> {\r\n\r\n    @ViewChild(AddonModChatIndexComponent) activityComponent?: AddonModChatIndexComponent;\r\n\r\n}\r\n","export default \"/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/*\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/*\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n * Extracted from ionic.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host ion-content {\\n  --background: var(--background-alternative);\\n}\\n:host ion-content::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n:host .addon-messages-discussion-container {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 15px;\\n  background: var(--background-alternative);\\n}\\n:host .addon-messages-date {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n:host ion-item.addon-message {\\n  border: 0;\\n  border-radius: 4px;\\n  padding: 0 8px 0 8px;\\n  margin: 10px 8px 0 8px;\\n  --background: var(--addon-messages-message-bg);\\n  background: var(--background);\\n  align-self: flex-start;\\n  width: 90%;\\n  max-width: 90%;\\n  --min-height: var(--a11y-min-target-size);\\n  position: relative;\\n  transition: width 500ms ease-in-out;\\n  overflow: visible;\\n}\\n:host ion-item.addon-message::part(native) {\\n  --inner-border-width: 0;\\n  --inner-padding-end: 0;\\n  padding: 0;\\n  margin: 0;\\n}\\n:host ion-item.addon-message core-format-text > p:only-child {\\n  display: inline;\\n}\\n:host ion-item.addon-message .addon-message-user {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n  margin-bottom: 0.5rem;\\n  margin-top: 0;\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .addon-message-user core-user-avatar {\\n  display: block;\\n  --core-avatar-size: var(--addon-messages-avatar-size);\\n  margin: 0;\\n}\\n:host ion-item.addon-message .addon-message-user div {\\n  font-weight: 500;\\n  flex-grow: 1;\\n  padding-left: 0.5rem;\\n  padding-right: 0.5rem;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message .addon-message-user div {\\n    padding-left: unset;\\n    padding-right: unset;\\n    -webkit-padding-start: 0.5rem;\\n    padding-inline-start: 0.5rem;\\n    -webkit-padding-end: 0.5rem;\\n    padding-inline-end: 0.5rem;\\n  }\\n}\\n:host ion-item.addon-message ion-note {\\n  color: var(--addon-messages-message-note-text);\\n  font-size: var(--addon-messages-message-note-font-size);\\n  margin: 0;\\n  padding: 0 0 8px 0;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message[tappable]:active {\\n  --background: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message ion-label {\\n  margin: 0;\\n  padding: 8px 0;\\n}\\n:host ion-item.addon-message .addon-message-text {\\n  display: inline-flex;\\n}\\n:host ion-item.addon-message .addon-message-text * {\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .tail {\\n  content: \\\"\\\";\\n  width: 0;\\n  height: 0;\\n  border: 0.5rem solid transparent;\\n  position: absolute;\\n  touch-action: none;\\n  bottom: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine {\\n  --background: var(--addon-messages-message-mine-bg);\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active {\\n  --background: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner {\\n  float: right;\\n  margin-left: 5px;\\n  margin-right: -3px;\\n  margin-top: 2px;\\n  margin-bottom: -2px;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .spinner {\\n  float: left;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .spinner {\\n    margin-left: unset;\\n    margin-right: unset;\\n    -webkit-margin-start: 5px;\\n    margin-inline-start: 5px;\\n    -webkit-margin-end: -3px;\\n    margin-inline-end: -3px;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n:host ion-item.addon-message.addon-message-mine .tail {\\n  right: -8px;\\n  margin-right: -0.5rem;\\n  border-bottom-color: var(--addon-messages-message-mine-bg);\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .tail {\\n  left: unset;\\n  right: unset;\\n  left: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .tail {\\n    margin-right: unset;\\n    -webkit-margin-end: -0.5rem;\\n    margin-inline-end: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active .tail {\\n  border-bottom-color: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-not-mine .tail {\\n  border-bottom-color: var(--addon-messages-message-bg);\\n  left: -8px;\\n  margin-left: -0.5rem;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-not-mine .tail {\\n  left: unset;\\n  right: unset;\\n  right: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-not-mine .tail {\\n    margin-left: unset;\\n    -webkit-margin-start: -0.5rem;\\n    margin-inline-start: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message[tappable].addon-message-not-mine.activated .tail {\\n  border-bottom-color: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message .addon-messages-delete-button {\\n  min-height: initial;\\n  line-height: initial;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  height: var(--a11y-min-target-size) !important;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message .addon-messages-delete-button ion-icon {\\n  font-size: 1.4em;\\n  line-height: initial;\\n  color: var(--ion-color-danger);\\n}\\n:host ion-item.addon-message.addon-message-no-user {\\n  margin-top: 8px;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine {\\n  padding-top: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine .item-heading,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine .item-heading {\\n  margin-bottom: 0;\\n}\\n:host-context(.ios) ion-footer .toolbar:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\n:host .addon-mod_chat-notice {\\n  margin-top: 8px;\\n  margin-bottom: 8px;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CoreUser } from '@features/user/services/user';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { AddonModChat } from '../../services/chat';\r\nimport { AddonModChatFormattedSessionMessage, AddonModChatHelper } from '../../services/chat-helper';\r\n\r\n/**\r\n * Page that displays list of chat session messages.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-chat-session-messages',\r\n    templateUrl: 'session-messages.html',\r\n    styleUrls: ['session-messages.scss'],\r\n})\r\nexport class AddonModChatSessionMessagesPage implements OnInit {\r\n\r\n    currentUserId!: number;\r\n    cmId!: number;\r\n    messages: AddonModChatFormattedSessionMessage[] = [];\r\n    loaded = false;\r\n    courseId!: number;\r\n\r\n    protected chatId!: number;\r\n    protected sessionStart!: number;\r\n    protected sessionEnd!: number;\r\n    protected groupId!: number;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    ngOnInit(): void {\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.sessionStart = CoreNavigator.getRouteNumberParam('sessionStart')!;\r\n        this.sessionEnd = CoreNavigator.getRouteNumberParam('sessionEnd')!;\r\n        this.chatId = CoreNavigator.getRouteNumberParam('chatId')!;\r\n        this.groupId = CoreNavigator.getRouteNumberParam('groupId') || 0;\r\n\r\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\r\n\r\n        this.fetchMessages();\r\n    }\r\n\r\n    /**\r\n     * Fetch session messages.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchMessages(): Promise<void> {\r\n        try {\r\n            const messages = await AddonModChat.getSessionMessages(\r\n                this.chatId,\r\n                this.sessionStart,\r\n                this.sessionEnd,\r\n                this.groupId,\r\n                { cmId: this.cmId },\r\n            );\r\n\r\n            this.messages = await AddonModChat.getMessagesUserData(messages, this.courseId);\r\n\r\n            // Calculate which messages need to display the date or user data.\r\n            for (let index = 0 ; index < this.messages.length; index++) {\r\n                const prevMessage = index > 0 ? this.messages[index - 1] : undefined;\r\n\r\n                this.messages[index] = AddonModChatHelper.formatMessage(this.currentUserId, this.messages[index], prevMessage);\r\n\r\n                const message = this.messages[index];\r\n\r\n                if (message.beep && message.beep != String(this.currentUserId)) {\r\n                    this.loadMessageBeepWho(message);\r\n                }\r\n            }\r\n\r\n            this.messages[this.messages.length - 1].showTail = true;\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\r\n        } finally {\r\n            this.loaded = true;\r\n        }\r\n    }\r\n\r\n    protected async loadMessageBeepWho(message: AddonModChatFormattedSessionMessage): Promise<void> {\r\n        message.beepWho = await this.getUserFullname(message.beep!);\r\n    }\r\n\r\n    /**\r\n     * Get the user fullname for a beep.\r\n     *\r\n     * @param id User Id before parsing.\r\n     * @return User fullname.\r\n     */\r\n    protected async getUserFullname(id: string): Promise<string> {\r\n        const idNumber = parseInt(id, 10);\r\n\r\n        if (isNaN(idNumber)) {\r\n            return id;\r\n        }\r\n\r\n        try {\r\n            const user = await CoreUser.getProfile(idNumber, this.courseId, true);\r\n\r\n            return user.fullname;\r\n        } catch {\r\n            // Error getting profile.\r\n            return id;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh session messages.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    async refreshMessages(refresher: IonRefresher): Promise<void> {\r\n        try {\r\n            await CoreUtils.ignoreErrors(AddonModChat.invalidateSessionMessages(this.chatId, this.sessionStart, this.groupId));\r\n\r\n            await this.fetchMessages();\r\n        } finally {\r\n            refresher.complete();\r\n        }\r\n    }\r\n\r\n}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\r\nimport { Params } from '@angular/router';\r\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\nimport { CoreUser } from '@features/user/services/user';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { Translate } from '@singletons';\r\nimport { AddonModChat, AddonModChatSession, AddonModChatSessionUser } from '../../services/chat';\r\n\r\n/**\r\n * Page that displays list of chat sessions.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-chat-sessions',\r\n    templateUrl: 'sessions.html',\r\n})\r\nexport class AddonModChatSessionsPage implements AfterViewInit, OnDestroy {\r\n\r\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\r\n\r\n    sessions!: AddonChatSessionsManager;\r\n    showAll = false;\r\n    groupId = 0;\r\n    groupInfo?: CoreGroupInfo;\r\n\r\n    protected courseId!: number;\r\n    protected cmId!: number;\r\n    protected chatId!: number;\r\n\r\n    constructor() {\r\n        this.sessions = new AddonChatSessionsManager(AddonModChatSessionsPage);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async ngAfterViewInit(): Promise<void> {\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.chatId = CoreNavigator.getRouteNumberParam('chatId')!;\r\n        this.sessions.setChatId(this.chatId);\r\n\r\n        await this.fetchSessions();\r\n\r\n        this.sessions.start(this.splitView);\r\n    }\r\n\r\n    /**\r\n     * Fetch chat sessions.\r\n     *\r\n     * @param showLoading Display a loading modal.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async fetchSessions(showLoading?: boolean): Promise<void> {\r\n        const modal = showLoading ? await CoreDomUtils.showModalLoading() : null;\r\n\r\n        try {\r\n            this.groupInfo = await CoreGroups.getActivityGroupInfo(this.cmId, false);\r\n\r\n            this.groupId = CoreGroups.validateGroupId(this.groupId, this.groupInfo);\r\n            this.sessions.setGroupId(this.groupId);\r\n\r\n            const sessions = await AddonModChat.getSessions(this.chatId, this.groupId, this.showAll, { cmId: this.cmId });\r\n\r\n            // Fetch user profiles.\r\n            const promises: Promise<unknown>[] = [];\r\n\r\n            const formattedSessions = sessions.map((session: AddonModChatSessionFormatted) => {\r\n                session.duration = session.sessionend - session.sessionstart;\r\n                session.sessionusers.forEach((sessionUser) => {\r\n                    // The WS does not return the user name, fetch user profile.\r\n                    promises.push(this.loadUserFullname(sessionUser));\r\n                });\r\n\r\n                // If session has more than 4 users we display a \"Show more\" link.\r\n                session.allsessionusers = session.sessionusers;\r\n                if (session.sessionusers.length > 4) {\r\n                    session.sessionusers = session.allsessionusers.slice(0, 3);\r\n                }\r\n\r\n                return session;\r\n            });\r\n\r\n            await Promise.all(promises);\r\n\r\n            this.sessions.setItems(formattedSessions);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\r\n        } finally {\r\n            modal?.dismiss();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the fullname of a user.\r\n     *\r\n     * @param id User ID.\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async loadUserFullname(sessionUser: AddonModChatUserSessionFormatted): Promise<void> {\r\n        if (sessionUser.userfullname) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const user = await CoreUser.getProfile(sessionUser.userid, this.courseId, true);\r\n\r\n            sessionUser.userfullname = user.fullname;\r\n        } catch {\r\n            // Error getting profile, most probably the user is deleted.\r\n            sessionUser.userfullname = Translate.instant('core.deleteduser') + ' ' + sessionUser.userid;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh chat sessions.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    async refreshSessions(refresher: IonRefresher): Promise<void> {\r\n        try {\r\n            await CoreUtils.ignoreErrors(CoreUtils.allPromises([\r\n                CoreGroups.invalidateActivityGroupInfo(this.cmId),\r\n                AddonModChat.invalidateSessions(this.chatId, this.groupId, this.showAll),\r\n            ]));\r\n\r\n            await this.fetchSessions();\r\n        } finally {\r\n            refresher.complete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show more session users.\r\n     *\r\n     * @param session Chat session.\r\n     * @param event The event.\r\n     */\r\n    showMoreUsers(session: AddonModChatSessionFormatted, event: Event): void {\r\n        session.sessionusers = session.allsessionusers!;\r\n        event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.sessions.destroy();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Helper class to manage sessions.\r\n */\r\nclass AddonChatSessionsManager extends CorePageItemsListManager<AddonModChatSessionFormatted> {\r\n\r\n    chatId = -1;\r\n    groupId = 0;\r\n\r\n    constructor(pageComponent: unknown) {\r\n        super(pageComponent);\r\n    }\r\n\r\n    /**\r\n     * Set chat ID.\r\n     *\r\n     * @param chatId Chat ID.\r\n     */\r\n    setChatId(chatId: number): void {\r\n        this.chatId = chatId;\r\n    }\r\n\r\n    /**\r\n     * Set group ID.\r\n     *\r\n     * @param groupId Group ID.\r\n     */\r\n    setGroupId(groupId: number): void {\r\n        this.groupId = groupId;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    protected getItemPath(session: AddonModChatSessionFormatted): string {\r\n        return `${session.sessionstart}/${session.sessionend}`;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    protected getItemQueryParams(): Params {\r\n        return {\r\n            chatId: this.chatId,\r\n            groupId: this.groupId,\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Fields added to chat session in this view.\r\n */\r\ntype AddonModChatSessionFormatted = Omit<AddonModChatSession, 'sessionusers'> & {\r\n    duration?: number; // Session duration.\r\n    sessionusers: AddonModChatUserSessionFormatted[];\r\n    allsessionusers?: AddonModChatUserSessionFormatted[]; // All session users.\r\n};\r\n\r\n/**\r\n * Fields added to user session in this view.\r\n */\r\ntype AddonModChatUserSessionFormatted = AddonModChatSessionUser & {\r\n    userfullname?: string; // User full name.\r\n};\r\n"],"sourceRoot":"webpack:///"}