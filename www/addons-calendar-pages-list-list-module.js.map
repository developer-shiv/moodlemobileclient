{"version":3,"sources":["./src/addons/calendar/pages/list/list.html","./src/addons/calendar/pages/list/list.module.ts","./src/addons/calendar/pages/list/list.page.ts","./src/addons/calendar/pages/list/list.scss"],"names":[],"mappings":"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","file":"addons-calendar-pages-list-list-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.calendar.calendarevents' | translate }}</h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"openFilter($event)\\\" [attr.aria-label]=\\\"'core.filter' | translate\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"fas-filter\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n            <core-context-menu>\\r\\n                <core-context-menu-item [hidden]=\\\"!notificationsEnabled\\\" [priority]=\\\"600\\\"\\r\\n                [content]=\\\"'core.settings.settings' | translate\\\" (action)=\\\"openSettings()\\\" iconAction=\\\"fas-cogs\\\">\\r\\n            </core-context-menu-item>\\r\\n                <core-context-menu-item [hidden]=\\\"!eventsLoaded || !hasOffline || !isOnline\\\" [priority]=\\\"400\\\"\\r\\n                [content]=\\\"'core.settings.synchronizenow' | translate\\\" (action)=\\\"doRefresh(undefined, $event, true)\\\"\\r\\n                [iconAction]=\\\"syncIcon\\\" [closeOnClick]=\\\"false\\\"></core-context-menu-item>\\r\\n            </core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!eventsLoaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"eventsLoaded\\\">\\r\\n        <!-- There is data to be synchronized -->\\r\\n        <ion-card class=\\\"core-warning-card\\\" *ngIf=\\\"hasOffline\\\">\\r\\n            <ion-item>\\r\\n                <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>{{ 'core.hasdatatosync' | translate:{$a: 'addon.calendar.calendar' | translate} }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"!filteredEvents || !filteredEvents.length\\\" icon=\\\"fas-calendar\\\"\\r\\n            [message]=\\\"'addon.calendar.noevents' | translate\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <ion-list *ngIf=\\\"filteredEvents && filteredEvents.length\\\" class=\\\"ion-no-margin\\\">\\r\\n            <ng-container *ngFor=\\\"let event of filteredEvents\\\">\\r\\n                <ion-item-divider *ngIf=\\\"event.showDate\\\">\\r\\n                    <ion-label><p class=\\\"item-heading\\\">{{ event.timestart * 1000 | coreFormatDate: \\\"strftimedayshort\\\" }}</p></ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"addon-calendar-event ion-text-wrap\\\" [attr.aria-label]=\\\"event.name\\\" (click)=\\\"gotoEvent(event.id)\\\"\\r\\n                    [attr.aria-current]=\\\"event.id == eventId ? 'page' : 'false'\\\"\\r\\n                    [ngClass]=\\\"['addon-calendar-eventtype-'+event.eventtype]\\\" button detail=\\\"true\\\">\\r\\n                    <img *ngIf=\\\"event.moduleIcon\\\" src=\\\"{{event.moduleIcon}}\\\" slot=\\\"start\\\" class=\\\"core-module-icon\\\" alt=\\\"\\\"\\r\\n                        role=\\\"presentation\\\">\\r\\n                    <ion-icon *ngIf=\\\"event.eventIcon && !event.moduleIcon\\\" [name]=\\\"event.eventIcon\\\" slot=\\\"start\\\"\\r\\n                        aria-hidden=\\\"true\\\">\\r\\n                    </ion-icon>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">\\r\\n                            <!-- Add the icon title so accessibility tools read it. -->\\r\\n                            <span class=\\\"sr-only\\\">\\r\\n                                {{ 'addon.calendar.type' + event.formattedType | translate }}\\r\\n                                <span class=\\\"sr-only\\\" *ngIf=\\\"event.moduleIcon && event.iconTitle\\\">{{ event.iconTitle }}</span>\\r\\n                            </span>\\r\\n                            <core-format-text [text]=\\\"event.name\\\" [contextLevel]=\\\"event.contextLevel\\\"\\r\\n                                [contextInstanceId]=\\\"event.contextInstanceId\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                        <p>\\r\\n                            {{ event.timestart * 1000 | coreFormatDate: \\\"strftimetime\\\" }}\\r\\n                            <span *ngIf=\\\"event.timeduration && event.endsSameDay\\\">\\r\\n                                - {{ (event.timestart + event.timeduration) * 1000 | coreFormatDate: \\\"strftimetime\\\" }}\\r\\n                            </span>\\r\\n                            <span *ngIf=\\\"event.timeduration && !event.endsSameDay\\\">\\r\\n                                - {{ (event.timestart + event.timeduration) * 1000 | coreFormatDate: \\\"strftimedatetimeshort\\\" }}\\r\\n                            </span>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <ion-note *ngIf=\\\"event.offline && !event.deleted\\\" slot=\\\"end\\\">\\r\\n                        <ion-icon name=\\\"fas-clock\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        <span class=\\\"ion-text-wrap\\\">{{ 'core.notsent' | translate }}</span>\\r\\n                    </ion-note>\\r\\n                    <ion-note *ngIf=\\\"event.deleted\\\" slot=\\\"end\\\">\\r\\n                        <ion-icon name=\\\"fas-trash\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        <span class=\\\"ion-text-wrap\\\">{{ 'core.deletedoffline' | translate }}</span>\\r\\n                    </ion-note>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n\\r\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadMoreEvents($event)\\\" [error]=\\\"loadMoreError\\\">\\r\\n        </core-infinite-loading>\\r\\n    </core-loading>\\r\\n\\r\\n    <!-- Create a calendar event. -->\\r\\n    <ion-fab slot=\\\"fixed\\\" core-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" *ngIf=\\\"canCreate\\\">\\r\\n        <ion-fab-button (click)=\\\"openEdit()\\\" [attr.aria-label]=\\\"'addon.calendar.newevent' | translate\\\">\\r\\n            <ion-icon name=\\\"fas-plus\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            <span class=\\\"sr-only\\\">{{ 'addon.calendar.newevent' | translate }}</span>\\r\\n        </ion-fab-button>\\r\\n    </ion-fab>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AddonCalendarEventRoute, AddonCalendarEditRoute } from '@addons/calendar/calendar-lazy.module';\r\nimport { conditionalRoutes } from '@/app/app-routing.module';\r\nimport { CoreScreen } from '@services/screen';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\n\r\nimport { AddonCalendarListPage } from './list.page';\r\n\r\nconst splitviewRoutes = [AddonCalendarEditRoute, AddonCalendarEventRoute];\r\n\r\nconst mobileRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonCalendarListPage,\r\n    },\r\n    ...splitviewRoutes,\r\n];\r\n\r\nconst tabletRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonCalendarListPage,\r\n        children: [\r\n            ...splitviewRoutes,\r\n        ],\r\n    },\r\n];\r\n\r\nconst routes: Routes = [\r\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\r\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonCalendarListPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonCalendarListPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, ViewChild, OnDestroy, OnInit } from '@angular/core';\r\nimport { IonContent, IonRefresher } from '@ionic/angular';\r\nimport {\r\n    AddonCalendarProvider,\r\n    AddonCalendar,\r\n    AddonCalendarEventToDisplay,\r\n} from '../../services/calendar';\r\nimport { AddonCalendarOffline } from '../../services/calendar-offline';\r\nimport { AddonCalendarFilter, AddonCalendarHelper } from '../../services/calendar-helper';\r\nimport { AddonCalendarSync, AddonCalendarSyncProvider } from '../../services/calendar-sync';\r\nimport { CoreCategoryData, CoreCourses, CoreEnrolledCourseData } from '@features/courses/services/courses';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreTimeUtils } from '@services/utils/time';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreLocalNotifications } from '@services/local-notifications';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport { CoreApp } from '@services/app';\r\nimport moment from 'moment';\r\nimport { CoreConstants } from '@/core/constants';\r\nimport { AddonCalendarFilterPopoverComponent } from '../../components/filter/filter';\r\nimport { Params } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Network, NgZone } from '@singletons';\r\nimport { CoreCoursesHelper } from '@features/courses/services/courses-helper';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreNavigator } from '@services/navigator';\r\n\r\n/**\r\n * Page that displays the list of calendar events.\r\n */\r\n@Component({\r\n    selector: 'page-addon-calendar-list',\r\n    templateUrl: 'list.html',\r\n    styleUrls: ['../../calendar-common.scss', 'list.scss'],\r\n})\r\nexport class AddonCalendarListPage implements OnInit, OnDestroy {\r\n\r\n    @ViewChild(IonContent) content?: IonContent;\r\n\r\n    protected initialTime = 0;\r\n    protected daysLoaded = 0;\r\n    protected emptyEventsTimes = 0; // Variable to identify consecutive calls returning 0 events.\r\n    protected categoriesRetrieved = false;\r\n    protected getCategories = false;\r\n    protected categories: { [id: number]: CoreCategoryData } = {};\r\n    protected siteHomeId: number;\r\n    protected currentSiteId: string;\r\n    protected onlineEvents: AddonCalendarEventToDisplay[] = [];\r\n    protected offlineEvents: AddonCalendarEventToDisplay[] = [];\r\n    protected deletedEvents: number [] = [];\r\n\r\n    // Observers.\r\n    protected obsDefaultTimeChange?: CoreEventObserver;\r\n    protected newEventObserver: CoreEventObserver;\r\n    protected discardedObserver: CoreEventObserver;\r\n    protected editEventObserver: CoreEventObserver;\r\n    protected deleteEventObserver: CoreEventObserver;\r\n    protected undeleteEventObserver: CoreEventObserver;\r\n    protected syncObserver: CoreEventObserver;\r\n    protected manualSyncObserver: CoreEventObserver;\r\n    protected filterChangedObserver: CoreEventObserver;\r\n    protected onlineObserver: Subscription;\r\n\r\n    eventId?: number; // Selected EventId on list\r\n    courses: Partial<CoreEnrolledCourseData>[] = [];\r\n    eventsLoaded = false;\r\n    events: AddonCalendarEventToDisplay[] = []; // Events (both online and offline).\r\n    notificationsEnabled = false;\r\n    filteredEvents: AddonCalendarEventToDisplay[] = [];\r\n    canLoadMore = false;\r\n    loadMoreError = false;\r\n    canCreate = false;\r\n    hasOffline = false;\r\n    isOnline = false;\r\n    syncIcon = CoreConstants.ICON_LOADING;\r\n    filter: AddonCalendarFilter = {\r\n        filtered: false,\r\n        courseId: undefined,\r\n        categoryId: undefined,\r\n        course: true,\r\n        group: true,\r\n        site: true,\r\n        user: true,\r\n        category: true,\r\n    };\r\n\r\n    constructor() {\r\n\r\n        this.siteHomeId = CoreSites.getCurrentSiteHomeId();\r\n        this.notificationsEnabled = CoreLocalNotifications.isAvailable();\r\n        this.currentSiteId = CoreSites.getCurrentSiteId();\r\n\r\n        if (this.notificationsEnabled) {\r\n            // Re-schedule events if default time changes.\r\n            this.obsDefaultTimeChange = CoreEvents.on(AddonCalendarProvider.DEFAULT_NOTIFICATION_TIME_CHANGED, () => {\r\n                AddonCalendar.scheduleEventsNotifications(this.onlineEvents);\r\n            }, this.currentSiteId);\r\n        }\r\n\r\n        // Listen for events added. When an event is added, reload the data.\r\n        this.newEventObserver = CoreEvents.on(AddonCalendarProvider.NEW_EVENT_EVENT, (data) => {\r\n            if (data && data.eventId) {\r\n                this.eventsLoaded = false;\r\n                this.refreshEvents(true, false);\r\n            }\r\n        }, this.currentSiteId);\r\n\r\n        // Listen for new event discarded event. When it does, reload the data.\r\n        this.discardedObserver = CoreEvents.on(AddonCalendarProvider.NEW_EVENT_DISCARDED_EVENT, () => {\r\n            this.eventsLoaded = false;\r\n            this.refreshEvents(true, false);\r\n        }, this.currentSiteId);\r\n\r\n        // Listen for events edited. When an event is edited, reload the data.\r\n        this.editEventObserver = CoreEvents.on(AddonCalendarProvider.EDIT_EVENT_EVENT, (data) => {\r\n            if (data && data.eventId) {\r\n                this.eventsLoaded = false;\r\n                this.refreshEvents(true, false);\r\n            }\r\n        }, this.currentSiteId);\r\n\r\n        // Refresh data if calendar events are synchronized automatically.\r\n        this.syncObserver = CoreEvents.on(AddonCalendarSyncProvider.AUTO_SYNCED, () => {\r\n            this.eventsLoaded = false;\r\n            this.refreshEvents();\r\n        }, this.currentSiteId);\r\n\r\n        // Refresh data if calendar events are synchronized manually but not by this page.\r\n        this.manualSyncObserver = CoreEvents.on(AddonCalendarSyncProvider.MANUAL_SYNCED, (data) => {\r\n            if (data && data.source != 'list') {\r\n                this.eventsLoaded = false;\r\n                this.refreshEvents();\r\n            }\r\n        }, this.currentSiteId);\r\n\r\n        // Update the list when an event is deleted.\r\n        this.deleteEventObserver = CoreEvents.on(\r\n            AddonCalendarProvider.DELETED_EVENT_EVENT,\r\n            (data) => {\r\n                if (data && !data.sent) {\r\n                    // Event was deleted in offline. Just mark it as deleted, no need to refresh.\r\n                    this.markAsDeleted(data.eventId, true);\r\n                    this.deletedEvents.push(data.eventId);\r\n                    this.hasOffline = true;\r\n                } else {\r\n                    // Event deleted, refresh the view.\r\n                    this.eventsLoaded = false;\r\n                    this.refreshEvents();\r\n                }\r\n            },\r\n            this.currentSiteId,\r\n        );\r\n\r\n        // Listen for events \"undeleted\" (offline).\r\n        this.undeleteEventObserver = CoreEvents.on(\r\n            AddonCalendarProvider.UNDELETED_EVENT_EVENT,\r\n            (data) => {\r\n                if (!data || !data.eventId) {\r\n                    return;\r\n                }\r\n\r\n                // Mark it as undeleted, no need to refresh.\r\n                this.markAsDeleted(data.eventId, false);\r\n\r\n                // Remove it from the list of deleted events if it's there.\r\n                const index = this.deletedEvents.indexOf(data.eventId);\r\n                if (index != -1) {\r\n                    this.deletedEvents.splice(index, 1);\r\n                }\r\n\r\n                this.hasOffline = !!this.offlineEvents.length || !!this.deletedEvents.length;\r\n            },\r\n            this.currentSiteId,\r\n        );\r\n\r\n        this.filterChangedObserver =\r\n            CoreEvents.on(AddonCalendarProvider.FILTER_CHANGED_EVENT, async (data) => {\r\n                this.filter = data;\r\n\r\n                // Course viewed has changed, check if the user can create events for this course calendar.\r\n                this.canCreate = await AddonCalendarHelper.canEditEvents(this.filter.courseId);\r\n\r\n                this.filterEvents();\r\n\r\n                this.content?.scrollToTop();\r\n            });\r\n\r\n        // Refresh online status when changes.\r\n        this.onlineObserver = Network.onChange().subscribe(() => {\r\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\r\n            NgZone.run(() => {\r\n                this.isOnline = CoreApp.isOnline();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * View loaded.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        this.filter.courseId = CoreNavigator.getRouteNumberParam('courseId');\r\n        this.syncIcon = CoreConstants.ICON_LOADING;\r\n\r\n        await this.fetchData(false, true, false);\r\n    }\r\n\r\n    /**\r\n     * Fetch all the data required for the view.\r\n     *\r\n     * @param refresh Empty events array first.\r\n     * @param sync Whether it should try to synchronize offline events.\r\n     * @param showErrors Whether to show sync errors to the user.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async fetchData(refresh = false, sync = false, showErrors = false): Promise<void> {\r\n        this.initialTime = CoreTimeUtils.timestamp();\r\n        this.daysLoaded = 0;\r\n        this.emptyEventsTimes = 0;\r\n        this.isOnline = CoreApp.isOnline();\r\n\r\n        if (sync) {\r\n            // Try to synchronize offline events.\r\n            try {\r\n                const result = await AddonCalendarSync.syncEvents();\r\n                if (result.warnings && result.warnings.length) {\r\n                    CoreDomUtils.showErrorModal(result.warnings[0]);\r\n                }\r\n\r\n                if (result.updated) {\r\n                    // Trigger a manual sync event.\r\n                    result.source = 'list';\r\n\r\n                    CoreEvents.trigger(\r\n                        AddonCalendarSyncProvider.MANUAL_SYNCED,\r\n                        result,\r\n                        this.currentSiteId,\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                if (showErrors) {\r\n                    CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\r\n                }\r\n            }\r\n        }\r\n\r\n        try {\r\n            const promises: Promise<void>[] = [];\r\n\r\n            this.hasOffline = false;\r\n\r\n            promises.push(AddonCalendarHelper.canEditEvents(this.filter.courseId).then((canEdit) => {\r\n                this.canCreate = canEdit;\r\n\r\n                return;\r\n            }));\r\n\r\n            // Load courses for the popover.\r\n            promises.push(CoreCoursesHelper.getCoursesForPopover(this.filter.courseId).then((result) => {\r\n                this.courses = result.courses;\r\n\r\n                return this.fetchEvents(refresh);\r\n            }));\r\n\r\n            // Get offline events.\r\n            promises.push(AddonCalendarOffline.getAllEditedEvents().then((offlineEvents) => {\r\n                this.hasOffline = this.hasOffline || !!offlineEvents.length;\r\n\r\n                // Format data and sort by timestart.\r\n                const events: AddonCalendarEventToDisplay[] = offlineEvents.map((event) =>\r\n                    AddonCalendarHelper.formatOfflineEventData(event));\r\n\r\n                this.offlineEvents = AddonCalendarHelper.sortEvents(events);\r\n\r\n                return;\r\n            }));\r\n\r\n            // Get events deleted in offline.\r\n            promises.push(AddonCalendarOffline.getAllDeletedEventsIds().then((ids) => {\r\n                this.hasOffline = this.hasOffline || !!ids.length;\r\n                this.deletedEvents = ids;\r\n\r\n                return;\r\n            }));\r\n\r\n            await Promise.all(promises);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.calendar.errorloadevents', true);\r\n        }\r\n\r\n        this.eventsLoaded = true;\r\n        this.syncIcon = CoreConstants.ICON_SYNC;\r\n    }\r\n\r\n    /**\r\n     * Fetches the events and updates the view.\r\n     *\r\n     * @param refresh Empty events array first.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async fetchEvents(refresh = false): Promise<void> {\r\n        this.loadMoreError = false;\r\n\r\n        try {\r\n            const onlineEventsTemp =\r\n                await AddonCalendar.getEventsList(this.initialTime, this.daysLoaded, AddonCalendarProvider.DAYS_INTERVAL);\r\n\r\n            if (onlineEventsTemp.length === 0) {\r\n                this.emptyEventsTimes++;\r\n                if (this.emptyEventsTimes > 5) { // Stop execution if we retrieve empty list 6 consecutive times.\r\n                    this.canLoadMore = false;\r\n                    if (refresh) {\r\n                        this.onlineEvents = [];\r\n                        this.filteredEvents = [];\r\n                        this.events = this.offlineEvents;\r\n                    }\r\n                } else {\r\n                    // No events returned, load next events.\r\n                    this.daysLoaded += AddonCalendarProvider.DAYS_INTERVAL;\r\n\r\n                    return this.fetchEvents();\r\n                }\r\n            } else {\r\n                const onlineEvents = onlineEventsTemp.map((event) => AddonCalendarHelper.formatEventData(event));\r\n\r\n                // Get the merged events of this period.\r\n                const events = this.mergeEvents(onlineEvents);\r\n\r\n                this.getCategories = this.shouldLoadCategories(onlineEvents);\r\n\r\n                if (refresh) {\r\n                    this.onlineEvents = onlineEvents;\r\n                    this.events = events;\r\n                } else {\r\n                    // Filter events with same ID. Repeated events are returned once per WS call, show them only once.\r\n                    this.onlineEvents = CoreUtils.mergeArraysWithoutDuplicates(this.onlineEvents, onlineEvents, 'id');\r\n                    this.events = CoreUtils.mergeArraysWithoutDuplicates(this.events, events, 'id');\r\n                }\r\n                this.filterEvents();\r\n\r\n                // Calculate which evemts need to display the date.\r\n                this.filteredEvents.forEach((event, index) => {\r\n                    event.showDate = this.showDate(event, this.filteredEvents[index - 1]);\r\n                    event.endsSameDay = this.endsSameDay(event);\r\n                });\r\n                this.canLoadMore = true;\r\n\r\n                // Schedule notifications for the events retrieved (might have new events).\r\n                AddonCalendar.scheduleEventsNotifications(this.onlineEvents);\r\n\r\n                this.daysLoaded += AddonCalendarProvider.DAYS_INTERVAL;\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.calendar.errorloadevents', true);\r\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\r\n        }\r\n\r\n        // Success retrieving events. Get categories if needed.\r\n        if (this.getCategories) {\r\n            this.getCategories = false;\r\n\r\n            return this.loadCategories();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to load more events.\r\n     *\r\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\r\n     * @return Resolved when done.\r\n     */\r\n    loadMoreEvents(infiniteComplete?: () => void ): void {\r\n        this.fetchEvents().finally(() => {\r\n            infiniteComplete && infiniteComplete();\r\n        });\r\n    }\r\n\r\n    protected filterEvents(): void {\r\n        this.filteredEvents = AddonCalendarHelper.getFilteredEvents(this.events, this.filter, this.categories);\r\n    }\r\n\r\n    /**\r\n     * Returns if the current state should load categories or not.\r\n     *\r\n     * @param events Events to parse.\r\n     * @return True if categories should be loaded.\r\n     */\r\n    protected shouldLoadCategories(events: AddonCalendarEventToDisplay[]): boolean {\r\n        if (this.categoriesRetrieved || this.getCategories) {\r\n            // Use previous value\r\n            return this.getCategories;\r\n        }\r\n\r\n        // Categories not loaded yet. We should get them if there's any category event.\r\n        const found = events.some((event) => typeof event.categoryid != 'undefined' && event.categoryid > 0);\r\n\r\n        return found || this.getCategories;\r\n    }\r\n\r\n    /**\r\n     * Load categories to be able to filter events.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async loadCategories(): Promise<void> {\r\n        try {\r\n            const cats = await CoreCourses.getCategories(0, true);\r\n            this.categoriesRetrieved = true;\r\n            this.categories = {};\r\n            // Index categories by ID.\r\n            cats.forEach((category) => {\r\n                this.categories[category.id] = category;\r\n            });\r\n        } catch {\r\n            // Ignore errors.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge a period of online events with the offline events of that period.\r\n     *\r\n     * @param onlineEvents Online events.\r\n     * @return Merged events.\r\n     */\r\n    protected mergeEvents(onlineEvents: AddonCalendarEventToDisplay[]): AddonCalendarEventToDisplay[] {\r\n        if (!this.offlineEvents.length && !this.deletedEvents.length) {\r\n            // No offline events, nothing to merge.\r\n            return onlineEvents;\r\n        }\r\n\r\n        const start = this.initialTime + (CoreConstants.SECONDS_DAY * this.daysLoaded);\r\n        const end = start + (CoreConstants.SECONDS_DAY * AddonCalendarProvider.DAYS_INTERVAL) - 1;\r\n        let result = onlineEvents;\r\n\r\n        if (this.deletedEvents.length) {\r\n            // Mark as deleted the events that were deleted in offline.\r\n            result.forEach((event) => {\r\n                event.deleted = this.deletedEvents.indexOf(event.id) != -1;\r\n            });\r\n        }\r\n\r\n        if (this.offlineEvents.length) {\r\n            // Remove the online events that were modified in offline.\r\n            result = result.filter((event) => {\r\n                const offlineEvent = this.offlineEvents.find((ev) => ev.id == event.id);\r\n\r\n                return !offlineEvent;\r\n            });\r\n        }\r\n\r\n        // Now get the offline events that belong to this period.\r\n        const periodOfflineEvents = this.offlineEvents.filter((event) => {\r\n            if (this.daysLoaded == 0 && event.timestart < start) {\r\n                // Display offline events that are previous to current time to allow editing them.\r\n                return true;\r\n            }\r\n\r\n            return (event.timestart >= start || event.timestart + event.timeduration >= start) && event.timestart <= end;\r\n        });\r\n\r\n        // Merge both arrays and sort them.\r\n        result = result.concat(periodOfflineEvents);\r\n\r\n        return AddonCalendarHelper.sortEvents(result);\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param refresher Refresher.\r\n     * @param done Function to call when done.\r\n     * @param showErrors Whether to show sync errors to the user.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async doRefresh(refresher?: IonRefresher, done?: () => void, showErrors?: boolean): Promise<void> {\r\n        if (!this.eventsLoaded) {\r\n            return;\r\n        }\r\n\r\n        await this.refreshEvents(true, showErrors).finally(() => {\r\n            refresher?.complete();\r\n            done && done();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh the events.\r\n     *\r\n     * @param sync Whether it should try to synchronize offline events.\r\n     * @param showErrors Whether to show sync errors to the user.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async refreshEvents(sync?: boolean, showErrors?: boolean): Promise<void> {\r\n        this.syncIcon = CoreConstants.ICON_LOADING;\r\n\r\n        const promises: Promise<void>[] = [];\r\n\r\n        promises.push(AddonCalendar.invalidateEventsList());\r\n        promises.push(AddonCalendar.invalidateAllowedEventTypes());\r\n\r\n        if (this.categoriesRetrieved) {\r\n            promises.push(CoreCourses.invalidateCategories(0, true));\r\n            this.categoriesRetrieved = false;\r\n        }\r\n\r\n        await Promise.all(promises).finally(() => this.fetchData(true, sync, showErrors));\r\n    }\r\n\r\n    /**\r\n     * Check date should be shown on event list for the current event.\r\n     * If date has changed from previous to current event it should be shown.\r\n     *\r\n     * @param event Current event where to show the date.\r\n     * @param prevEvent Previous event where to compare the date with.\r\n     * @return If date has changed and should be shown.\r\n     */\r\n    protected showDate(event: AddonCalendarEventToDisplay, prevEvent?: AddonCalendarEventToDisplay): boolean {\r\n        if (!prevEvent) {\r\n            // First event, show it.\r\n            return true;\r\n        }\r\n\r\n        // Check if day has changed.\r\n        return !moment(event.timestart * 1000).isSame(prevEvent.timestart * 1000, 'day');\r\n    }\r\n\r\n    /**\r\n     * Check if event ends the same date or not.\r\n     *\r\n     * @param event Event info.\r\n     * @return If date has changed and should be shown.\r\n     */\r\n    protected endsSameDay(event: AddonCalendarEventToDisplay): boolean {\r\n        if (!event.timeduration) {\r\n            // No duration.\r\n            return true;\r\n        }\r\n\r\n        // Check if day has changed.\r\n        return moment(event.timestart * 1000).isSame((event.timestart + event.timeduration) * 1000, 'day');\r\n    }\r\n\r\n    /**\r\n     * Show the context menu.\r\n     *\r\n     * @param event Event.\r\n     */\r\n    async openFilter(event: MouseEvent): Promise<void> {\r\n        await CoreDomUtils.openPopover({\r\n            component: AddonCalendarFilterPopoverComponent,\r\n            componentProps: {\r\n                courses: this.courses,\r\n                filter: this.filter,\r\n            },\r\n            event,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open page to create/edit an event.\r\n     *\r\n     * @param eventId Event ID to edit.\r\n     */\r\n    openEdit(eventId?: number): void {\r\n        this.eventId = undefined;\r\n        eventId = eventId || 0;\r\n\r\n        const params: Params = {};\r\n\r\n        if (this.filter.courseId) {\r\n            params.courseId = this.filter.courseId;\r\n        }\r\n\r\n        CoreNavigator.navigateToSitePath(`calendar/edit/${eventId}`, { params });\r\n    }\r\n\r\n    /**\r\n     * Open calendar events settings.\r\n     */\r\n    openSettings(): void {\r\n        CoreNavigator.navigateToSitePath('/calendar/settings');\r\n    }\r\n\r\n    /**\r\n     * Navigate to a particular event.\r\n     *\r\n     * @param eventId Event to load.\r\n     */\r\n    gotoEvent(eventId: number): void {\r\n        this.eventId = eventId;\r\n\r\n        if (eventId <= 0) {\r\n            // It's an offline event, go to the edit page.\r\n            this.openEdit(eventId);\r\n        } else {\r\n            CoreNavigator.navigateToSitePath(`/calendar/event/${eventId}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find an event and mark it as deleted.\r\n     *\r\n     * @param eventId Event ID.\r\n     * @param deleted Whether to mark it as deleted or not.\r\n     */\r\n    protected markAsDeleted(eventId: number, deleted: boolean): void {\r\n        const event = this.onlineEvents.find((event) => event.id == eventId);\r\n\r\n        if (event) {\r\n            event.deleted = deleted;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.obsDefaultTimeChange?.off();\r\n        this.newEventObserver?.off();\r\n        this.discardedObserver?.off();\r\n        this.editEventObserver?.off();\r\n        this.deleteEventObserver?.off();\r\n        this.undeleteEventObserver?.off();\r\n        this.syncObserver?.off();\r\n        this.manualSyncObserver?.off();\r\n        this.filterChangedObserver?.off();\r\n        this.onlineObserver?.unsubscribe();\r\n    }\r\n\r\n}\r\n","export default \":host ion-note {\\n  max-width: 30%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvY2FsZW5kYXIvcGFnZXMvbGlzdC9saXN0LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDSSxjQUFBO0FBQVIiLCJmaWxlIjoic3JjL2FkZG9ucy9jYWxlbmRhci9wYWdlcy9saXN0L2xpc3Quc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICAgIGlvbi1ub3RlIHtcclxuICAgICAgICBtYXgtd2lkdGg6IDMwJTtcclxuICAgIH1cclxufVxyXG4iXX0= */\";"],"sourceRoot":"webpack:///"}