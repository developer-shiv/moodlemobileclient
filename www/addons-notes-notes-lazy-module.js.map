{"version":3,"sources":["./src/addons/notes/pages/list/list.html","./src/addons/notes/notes-lazy.module.ts","./src/addons/notes/pages/list/list.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,+QAAgN,mCAAmC,6vCAA6vC,oCAAoC,2UAA2U,gBAAgB,+NAA+N,uCAAuC,sIAAsI,yCAAyC,wIAAwI,2CAA2C,6UAA6U,uCAAuC,iDAAiD,GAAG,2pBAA2pB,mBAAmB,yJAAyJ,uCAAuC,oSAAoS,8BAA8B,wRAAwR,qCAAqC,+jDAA+jD,wCAAwC,6EAA6E,E;;;;;;;;;;;;ACA/iM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEuB;AACf;AACc;AACwC;AACV;AACzB;AAE5D,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wEAAkB;KAChC;CACJ,CAAC;IAcW,oBAAoB,SAApB,oBAAoB;CAAG;AAAvB,oBAAoB;IAZhC,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7B,oEAAgB;YAChB,4GAA4B;YAC5B,kGAAuB;SAC1B;QACD,OAAO,EAAE,CAAC,4DAAY,CAAC;QACvB,YAAY,EAAE;YACV,wEAAkB;SACrB;KACJ,CAAC;GACW,oBAAoB,CAAG;AAAH;;;;;;;;;;;;;ACxCjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEgB;AACyD;AACC;AAClC;AACkB;AACnB;AAChB;AACiB;AACf;AACN;AACR;AACO;AACE;AACH;AACiB;AAEnE;;GAEG;IAMU,kBAAkB,SAAlB,kBAAkB;IAmB3B;QAbA,SAAI,GAA2B,QAAQ,CAAC;QACxC,gBAAW,GAAG,6DAAa,CAAC,YAAY,CAAC;QACzC,aAAQ,GAAG,6DAAa,CAAC,YAAY,CAAC;QACtC,UAAK,GAA8B,EAAE,CAAC;QACtC,eAAU,GAAG,KAAK,CAAC;QACnB,gBAAW,GAAG,KAAK,CAAC;QAEpB,eAAU,GAAG,KAAK,CAAC;QACnB,mBAAc,GAAG,KAAK,CAAC;QAMnB,IAAI,CAAC,QAAQ,GAAG,kEAAa,CAAC,mBAAmB,CAAC,UAAU,CAAE,CAAC;QAC/D,IAAI,CAAC,MAAM,GAAG,kEAAa,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAE1D,wDAAwD;QACxD,IAAI,CAAC,YAAY,GAAG,8DAAU,CAAC,EAAE,CAAC,wFAAsB,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE;;YAC3E,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAChC,0BAA0B;gBAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAErC,oBAAoB;gBACpB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,IAAI,CAAC,WAAW,GAAG,6DAAa,CAAC,YAAY,CAAC;gBAC9C,IAAI,CAAC,QAAQ,GAAG,6DAAa,CAAC,YAAY,CAAC;gBAE3C,UAAI,CAAC,OAAO,0CAAE,WAAW,GAAG;gBAC5B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAC1B;QACL,CAAC,EAAE,0DAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAEjC,IAAI,CAAC,aAAa,GAAG,0DAAS,CAAC,oBAAoB,EAAE,CAAC;IAC1D,CAAC;IAED;;OAEG;IACG,QAAQ;;YACV,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE5B,gEAAS,CAAC,YAAY,CAAC,uEAAU,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3E,CAAC;KAAA;IAED;;;;;;OAMG;IACa,UAAU,CAAC,IAAI,GAAG,KAAK,EAAE,UAAU,GAAG,KAAK;;YACvD,IAAI,IAAI,EAAE;gBACN,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;aACpC;YAED,IAAI;gBACA,MAAM,QAAQ,GAAG,MAAM,uEAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEvE,MAAM,SAAS,GAA8B,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;gBAEjF,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBACvB,IAAI,CAAC,OAAO,GAAG,mEAAa,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC1D,CAAC,CAAC,CAAC;gBAEH,MAAM,uEAAU,CAAC,sBAAsB,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAElE,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;gBAEzE,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;oBAEvB,mDAAmD;oBACnD,IAAI,CAAC,IAAI,GAAG,MAAM,qEAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;iBAC3E;qBAAM;oBACH,IAAI,CAAC,KAAK,GAAG,MAAM,uEAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;iBAC7D;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,iEAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;aACtC;oBAAS;gBACN,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;gBACpD,IAAI,SAAS,IAAI,IAAI,CAAC,IAAI,IAAI,UAAU,EAAE;oBACtC,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;iBACpF;gBACD,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;gBAEhC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,WAAW,GAAG,6DAAa,CAAC,YAAY,CAAC;gBAC9C,IAAI,CAAC,QAAQ,GAAG,6DAAa,CAAC,SAAS,CAAC;aAC3C;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACH,YAAY,CAAC,UAAmB,EAAE,SAAwB;QACtD,IAAI,CAAC,WAAW,GAAG,6DAAa,CAAC,YAAY,CAAC;QAC9C,IAAI,CAAC,QAAQ,GAAG,6DAAa,CAAC,YAAY,CAAC;QAE3C,uEAAU,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;YAChE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC3C,IAAI,SAAS,EAAE;oBACX,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,GAAG;iBACzB;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACG,WAAW,CAAC,IAA4B;;YAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,6DAAa,CAAC,YAAY,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAG,6DAAa,CAAC,YAAY,CAAC;YAE3C,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC5B,gEAAS,CAAC,YAAY,CAAC,uEAAU,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3E,CAAC;KAAA;IAED;;;;OAIG;IACG,OAAO,CAAC,CAAQ;;YAClB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,MAAM,SAAS,GAAG,MAAM,iEAAY,CAAC,SAAS,CAA2B;gBACrE,SAAS,EAAE,6FAAsB;gBACjC,cAAc,EAAE;oBACZ,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;iBAClB;aACJ,CAAC,CAAC;YAEH,IAAI,OAAO,SAAS,IAAI,WAAW,EAAE;gBAEjC,IAAI,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI,EAAE;oBAClC,IAAI,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;wBAC7B,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;wBAC3B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;qBAC5B;oBAED,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBAC5B;qBAAM,IAAI,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;oBACtD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACpC;aACJ;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACG,UAAU,CAAC,CAAQ,EAAE,IAA6B;;YACpD,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,IAAI;gBACA,MAAM,iEAAY,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;gBAClE,IAAI;oBACA,MAAM,uEAAU,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACjD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;oBAExB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBAEzB,iEAAY,CAAC,SAAS,CAAC,8BAA8B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;iBAEtE;gBAAC,OAAO,KAAK,EAAE;oBACZ,iEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAC;iBACpE;aACJ;YAAC,WAAM;gBACJ,iCAAiC;aACpC;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACG,cAAc,CAAC,CAAQ,EAAE,IAA6B;;YACxD,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,MAAM,sFAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;KAAA;IAED;;OAEG;IACH,YAAY;QACR,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACa,SAAS,CAAC,UAAmB;;YACzC,IAAI;gBACA,MAAM,MAAM,GAAG,MAAM,gFAAc,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE7D,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAC1C;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,UAAU,EAAE;oBACZ,iEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC;iBACrE;aACJ;QACL,CAAC;KAAA;IAED;;;;OAIG;IACO,gBAAgB,CAAC,QAAkB;QACzC,MAAM,OAAO,GAAG,mEAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,OAAO,EAAE;YACT,iEAAY,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;SACxC;IACL,CAAC;IAED;;OAEG;IACH,WAAW;QACP,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;IACjD,CAAC;CAEJ;;;sBA3PK,uDAAS,SAAC,yDAAU;;AAFb,kBAAkB;IAL9B,+DAAS,CAAC;QACP,QAAQ,EAAE,4BAA4B;QACtC,mNAAwB;QACxB,UAAU,EAAE,CAAC,qEAAc,CAAC,YAAY,CAAC;KAC5C,CAAC;GACW,kBAAkB,CA6P9B;AA7P8B","file":"addons-notes-notes-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <h1>{{ 'addon.notes.notes' | translate }}</h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<core-navbar-buttons slot=\\\"end\\\">\\r\\n    <ion-button [hidden]=\\\"!canDeleteNotes\\\" slot=\\\"end\\\" fill=\\\"clear\\\" (click)=\\\"toggleDelete()\\\"\\r\\n        [attr.aria-label]=\\\"'core.toggledelete' | translate\\\">\\r\\n        <ion-icon name=\\\"fas-pen\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n    </ion-button>\\r\\n    <core-context-menu>\\r\\n        <core-context-menu-item [hidden]=\\\"!(notesLoaded && !hasOffline)\\\" [priority]=\\\"100\\\"\\r\\n            [content]=\\\"'core.refresh' | translate\\\" (action)=\\\"refreshNotes(false)\\\"\\r\\n            [iconAction]=\\\"refreshIcon\\\" [closeOnClick]=\\\"true\\\">\\r\\n        </core-context-menu-item>\\r\\n        <core-context-menu-item [hidden]=\\\"!(notesLoaded && hasOffline)\\\" [priority]=\\\"100\\\"\\r\\n            [content]=\\\"'core.settings.synchronizenow' | translate\\\" (action)=\\\"refreshNotes(true)\\\"\\r\\n            [iconAction]=\\\"syncIcon\\\" [closeOnClick]=\\\"false\\\"></core-context-menu-item>\\r\\n    </core-context-menu>\\r\\n</core-navbar-buttons>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!notesLoaded\\\" (ionRefresh)=\\\"refreshNotes(false, $event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"notesLoaded\\\">\\r\\n        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"user\\\">\\r\\n            <core-user-avatar [user]=\\\"user\\\" [courseId]=\\\"courseId\\\" slot=\\\"start\\\" [linkProfile]=\\\"false\\\"></core-user-avatar>\\r\\n            <ion-label><h2>{{user!.fullname}}</h2></ion-label>\\r\\n        </ion-item>\\r\\n\\r\\n        <core-combobox [selection]=\\\"type\\\" (onChange)=\\\"typeChanged($event)\\\">\\r\\n            <ion-select-option class=\\\"ion-text-wrap\\\" value=\\\"site\\\">\\r\\n                {{ 'addon.notes.sitenotes' | translate }}\\r\\n            </ion-select-option>\\r\\n            <ion-select-option class=\\\"ion-text-wrap\\\" value=\\\"course\\\">\\r\\n                {{ 'addon.notes.coursenotes' | translate }}\\r\\n            </ion-select-option>\\r\\n            <ion-select-option class=\\\"ion-text-wrap\\\" value=\\\"personal\\\">\\r\\n                {{ 'addon.notes.personalnotes' | translate }}\\r\\n            </ion-select-option>\\r\\n        </core-combobox>\\r\\n\\r\\n        <ion-card class=\\\"core-warning-card\\\" *ngIf=\\\"hasOffline\\\">\\r\\n            <ion-item>\\r\\n                <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    {{ 'core.thereisdatatosync' | translate:{$a: 'addon.notes.notes' | translate | lowercase } }}\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <core-empty-box *ngIf=\\\"notes && notes.length == 0\\\" icon=\\\"fas-receipt\\\" [message]=\\\"'addon.notes.nonotes' | translate\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <ng-container *ngIf=\\\"notes && notes.length > 0\\\">\\r\\n            <ion-card *ngFor=\\\"let note of notes\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <core-user-avatar [user]=\\\"note\\\" [courseId]=\\\"courseId\\\" slot=\\\"start\\\" *ngIf=\\\"!userId\\\"></core-user-avatar>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\" *ngIf=\\\"!userId\\\">{{note.userfullname}}</p>\\r\\n                        <p *ngIf=\\\"!note.deleted && !note.offline\\\" slot=\\\"end\\\">\\r\\n                            <span class=\\\"ion-text-wrap\\\">{{note.lastmodified | coreDateDayOrTime}}</span>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <p *ngIf=\\\"note.offline\\\" slot=\\\"end\\\">\\r\\n                        <ion-icon name=\\\"fas-clock\\\" aria-hidden=\\\"true\\\"></ion-icon> <span class=\\\"ion-text-wrap\\\">\\r\\n                            {{ 'core.notsent' | translate }}\\r\\n                        </span>\\r\\n                    </p>\\r\\n                    <p *ngIf=\\\"note.deleted\\\" slot=\\\"end\\\">\\r\\n                        <ion-icon name=\\\"fas-trash\\\" aria-hidden=\\\"true\\\"></ion-icon> <span class=\\\"ion-text-wrap\\\">\\r\\n                            {{ 'core.deletedoffline' | translate }}\\r\\n                        </span>\\r\\n                    </p>\\r\\n                    <ion-button *ngIf=\\\"note.deleted\\\" slot=\\\"end\\\" fill=\\\"clear\\\" color=\\\"danger\\\" (click)=\\\"undoDeleteNote($event, note)\\\"\\r\\n                        [attr.aria-label]=\\\"'core.restore' | translate\\\">\\r\\n                        <ion-icon name=\\\"fas-undo-alt\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    </ion-button>\\r\\n                    <ion-button *ngIf=\\\"showDelete && !note.deleted && (type != 'personal' || note.usermodified == currentUserId)\\\"\\r\\n                        slot=\\\"end\\\" fill=\\\"clear\\\" [@coreSlideInOut]=\\\"'fromRight'\\\" color=\\\"danger\\\" (click)=\\\"deleteNote($event, note)\\\"\\r\\n                        [attr.aria-label]=\\\"'core.delete' | translate\\\">\\r\\n                        <ion-icon name=\\\"fas-trash\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    </ion-button>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label><core-format-text [text]=\\\"note.content\\\" [filter]=\\\"false\\\"></core-format-text></ion-label>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n        </ng-container>\\r\\n    </core-loading>\\r\\n\\r\\n    <ion-fab slot=\\\"fixed\\\" core-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" *ngIf=\\\"userId && notesLoaded\\\">\\r\\n        <ion-fab-button (click)=\\\"addNote($event)\\\" [attr.aria-label]=\\\"'addon.notes.addnewnote' |translate\\\">\\r\\n            <ion-icon name=\\\"fas-plus\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            <span class=\\\"sr-only\\\">{{ 'addon.notes.addnewnote' | translate }}</span>\\r\\n        </ion-fab-button>\\r\\n    </ion-fab>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\r\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\r\nimport { AddonNotesListPage } from './pages/list/list.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonNotesListPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreCommentsComponentsModule,\r\n        CoreTagComponentsModule,\r\n    ],\r\n    exports: [RouterModule],\r\n    declarations: [\r\n        AddonNotesListPage,\r\n    ],\r\n})\r\nexport class AddonNotesLazyModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { CoreConstants } from '@/core/constants';\r\nimport { AddonNotesAddComponent, AddonNotesAddModalReturn } from '@addons/notes/components/add/add-modal';\r\nimport { AddonNotes, AddonNotesNoteFormatted, AddonNotesPublishState } from '@addons/notes/services/notes';\r\nimport { AddonNotesOffline } from '@addons/notes/services/notes-offline';\r\nimport { AddonNotesSync, AddonNotesSyncProvider } from '@addons/notes/services/notes-sync';\r\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { CoreAnimations } from '@components/animations';\r\nimport { CoreUser, CoreUserProfile } from '@features/user/services/user';\r\nimport { IonContent, IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreTextUtils } from '@services/utils/text';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\n\r\n/**\r\n * Page that displays a list of notes.\r\n */\r\n@Component({\r\n    selector: 'page-addon-notes-list-page',\r\n    templateUrl: 'list.html',\r\n    animations: [CoreAnimations.SLIDE_IN_OUT],\r\n})\r\nexport class AddonNotesListPage implements OnInit, OnDestroy {\r\n\r\n     @ViewChild(IonContent) content?: IonContent;\r\n\r\n    courseId: number;\r\n    userId?: number;\r\n    type: AddonNotesPublishState = 'course';\r\n    refreshIcon = CoreConstants.ICON_LOADING;\r\n    syncIcon = CoreConstants.ICON_LOADING;\r\n    notes: AddonNotesNoteFormatted[] = [];\r\n    hasOffline = false;\r\n    notesLoaded = false;\r\n    user?: CoreUserProfile;\r\n    showDelete = false;\r\n    canDeleteNotes = false;\r\n    currentUserId: number;\r\n\r\n    protected syncObserver: CoreEventObserver;\r\n\r\n    constructor() {\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.userId = CoreNavigator.getRouteNumberParam('userId');\r\n\r\n        // Refresh data if notes are synchronized automatically.\r\n        this.syncObserver = CoreEvents.on(AddonNotesSyncProvider.AUTO_SYNCED, (data) => {\r\n            if (data.courseId == this.courseId) {\r\n                // Show the sync warnings.\r\n                this.showSyncWarnings(data.warnings);\r\n\r\n                // Refresh the data.\r\n                this.notesLoaded = false;\r\n                this.refreshIcon = CoreConstants.ICON_LOADING;\r\n                this.syncIcon = CoreConstants.ICON_LOADING;\r\n\r\n                this.content?.scrollToTop();\r\n                this.fetchNotes(false);\r\n            }\r\n        }, CoreSites.getCurrentSiteId());\r\n\r\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\r\n    }\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        await this.fetchNotes(true);\r\n\r\n        CoreUtils.ignoreErrors(AddonNotes.logView(this.courseId, this.userId));\r\n    }\r\n\r\n    /**\r\n     * Fetch notes.\r\n     *\r\n     * @param sync When to resync notes.\r\n     * @param showErrors When to display errors or not.\r\n     * @return Promise with the notes.\r\n     */\r\n    protected async fetchNotes(sync = false, showErrors = false): Promise<void> {\r\n        if (sync) {\r\n            await this.syncNotes(showErrors);\r\n        }\r\n\r\n        try {\r\n            const allNotes = await AddonNotes.getNotes(this.courseId, this.userId);\r\n\r\n            const notesList: AddonNotesNoteFormatted[] = allNotes[this.type + 'notes'] || [];\r\n\r\n            notesList.forEach((note) => {\r\n                note.content = CoreTextUtils.decodeHTML(note.content);\r\n            });\r\n\r\n            await AddonNotes.setOfflineDeletedNotes(notesList, this.courseId);\r\n\r\n            this.hasOffline = notesList.some((note) => note.offline || note.deleted);\r\n\r\n            if (this.userId) {\r\n                this.notes = notesList;\r\n\r\n                // Get the user profile to retrieve the user image.\r\n                this.user = await CoreUser.getProfile(this.userId, this.courseId, true);\r\n            } else {\r\n                this.notes = await AddonNotes.getNotesUserData(notesList);\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            let canDelete = this.notes && this.notes.length > 0;\r\n            if (canDelete && this.type == 'personal') {\r\n                canDelete = !!this.notes.find((note) => note.usermodified == this.currentUserId);\r\n            }\r\n            this.canDeleteNotes = canDelete;\r\n\r\n            this.notesLoaded = true;\r\n            this.refreshIcon = CoreConstants.ICON_REFRESH;\r\n            this.syncIcon = CoreConstants.ICON_SYNC;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh notes on PTR.\r\n     *\r\n     * @param showErrors Whether to display errors or not.\r\n     * @param refresher Refresher instance.\r\n     */\r\n    refreshNotes(showErrors: boolean, refresher?: IonRefresher): void {\r\n        this.refreshIcon = CoreConstants.ICON_LOADING;\r\n        this.syncIcon = CoreConstants.ICON_LOADING;\r\n\r\n        AddonNotes.invalidateNotes(this.courseId, this.userId).finally(() => {\r\n            this.fetchNotes(true, showErrors).finally(() => {\r\n                if (refresher) {\r\n                    refresher?.complete();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function called when the type has changed.\r\n     *\r\n     * @param type New type.\r\n     */\r\n    async typeChanged(type: AddonNotesPublishState): Promise<void> {\r\n        this.type = type;\r\n        this.notesLoaded = false;\r\n        this.refreshIcon = CoreConstants.ICON_LOADING;\r\n        this.syncIcon = CoreConstants.ICON_LOADING;\r\n\r\n        await this.fetchNotes(true);\r\n        CoreUtils.ignoreErrors(AddonNotes.logView(this.courseId, this.userId));\r\n    }\r\n\r\n    /**\r\n     * Add a new Note to user and course.\r\n     *\r\n     * @param e Event.\r\n     */\r\n    async addNote(e: Event): Promise<void> {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const modalData = await CoreDomUtils.openModal<AddonNotesAddModalReturn>({\r\n            component: AddonNotesAddComponent,\r\n            componentProps: {\r\n                userId: this.userId,\r\n                courseId: this.courseId,\r\n                type: this.type,\r\n            },\r\n        });\r\n\r\n        if (typeof modalData != 'undefined') {\r\n\r\n            if (modalData.sent && modalData.type) {\r\n                if (modalData.type != this.type) {\r\n                    this.type = modalData.type;\r\n                    this.notesLoaded = false;\r\n                }\r\n\r\n                this.refreshNotes(false);\r\n            } else if (modalData.type && modalData.type != this.type) {\r\n                this.typeChanged(modalData.type);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a note.\r\n     *\r\n     * @param e Click event.\r\n     * @param note Note to delete.\r\n     */\r\n    async deleteNote(e: Event, note: AddonNotesNoteFormatted): Promise<void> {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        try {\r\n            await CoreDomUtils.showDeleteConfirm('addon.notes.deleteconfirm');\r\n            try {\r\n                await AddonNotes.deleteNote(note, this.courseId);\r\n                this.showDelete = false;\r\n\r\n                this.refreshNotes(false);\r\n\r\n                CoreDomUtils.showToast('addon.notes.eventnotedeleted', true, 3000);\r\n\r\n            } catch (error) {\r\n                CoreDomUtils.showErrorModalDefault(error, 'Delete note failed.');\r\n            }\r\n        } catch {\r\n            // User cancelled, nothing to do.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore a note.\r\n     *\r\n     * @param e Click event.\r\n     * @param note Note to delete.\r\n     */\r\n    async undoDeleteNote(e: Event, note: AddonNotesNoteFormatted): Promise<void> {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        await AddonNotesOffline.undoDeleteNote(note.id);\r\n        this.refreshNotes(true);\r\n    }\r\n\r\n    /**\r\n     * Toggle delete.\r\n     */\r\n    toggleDelete(): void {\r\n        this.showDelete = !this.showDelete;\r\n    }\r\n\r\n    /**\r\n     * Tries to synchronize course notes.\r\n     *\r\n     * @param showErrors Whether to display errors or not.\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async syncNotes(showErrors: boolean): Promise<void> {\r\n        try {\r\n            const result = await AddonNotesSync.syncNotes(this.courseId);\r\n\r\n            this.showSyncWarnings(result.warnings);\r\n        } catch (error) {\r\n            if (showErrors) {\r\n                CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show sync warnings if any.\r\n     *\r\n     * @param warnings the warnings\r\n     */\r\n    protected showSyncWarnings(warnings: string[]): void {\r\n        const message = CoreTextUtils.buildMessage(warnings);\r\n\r\n        if (message) {\r\n            CoreDomUtils.showErrorModal(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.syncObserver && this.syncObserver.off();\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}