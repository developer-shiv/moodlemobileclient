{"version":3,"sources":["./src/core/features/user/pages/participants/participants.html","./src/core/features/user/pages/participants/participants.page.ts","./src/core/features/user/user-course-lazy.module.ts"],"names":[],"mappings":"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","file":"features-user-user-course-lazy-module.js","sourcesContent":["export default \"<core-navbar-buttons slot=\\\"end\\\">\\r\\n    <ion-button [hidden]=\\\"!searchEnabled\\\" (click)=\\\"toggleSearch()\\\" [attr.aria-label]=\\\"'core.search' | translate\\\">\\r\\n        <ion-icon name=\\\"fas-search\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n    </ion-button>\\r\\n</core-navbar-buttons>\\r\\n\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!participants.loaded || searchInProgress\\\"\\r\\n            (ionRefresh)=\\\"refreshParticipants($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n\\r\\n        <core-search-box *ngIf=\\\"showSearchBox\\\"\\r\\n            [disabled]=\\\"searchInProgress\\\" [spellcheck]=\\\"false\\\" [autoFocus]=\\\"true\\\" [lengthCheck]=\\\"1\\\"\\r\\n            autocorrect=\\\"off\\\" searchArea=\\\"CoreUserParticipants\\\"\\r\\n            (onSubmit)=\\\"search($event)\\\" (onClear)=\\\"clearSearch()\\\">\\r\\n        </core-search-box>\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"participants.loaded\\\">\\r\\n            <core-empty-box *ngIf=\\\"participants.empty && !searchInProgress && !searchQuery\\\" icon=\\\"far-user\\\"\\r\\n                [message]=\\\"'core.user.noparticipants' | translate\\\">\\r\\n            </core-empty-box>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"participants.empty && !searchInProgress && searchQuery\\\" icon=\\\"fas-search\\\"\\r\\n                [message]=\\\"'core.noresults' | translate\\\">\\r\\n            </core-empty-box>\\r\\n\\r\\n            <ion-list *ngIf=\\\"!participants.empty\\\">\\r\\n                <ion-item *ngFor=\\\"let participant of participants.items\\\"\\r\\n                    class=\\\"ion-text-wrap\\\" [attr.aria-current]=\\\"participants.getItemAriaCurrent(participant)\\\"\\r\\n                    [attr.aria-label]=\\\"participant.fullname\\\" (click)=\\\"participants.select(participant)\\\" button detail=\\\"true\\\">\\r\\n\\r\\n                    <core-user-avatar [user]=\\\"participant\\\" [linkProfile]=\\\"false\\\" [checkOnline]=\\\"true\\\" slot=\\\"start\\\">\\r\\n                    </core-user-avatar>\\r\\n\\r\\n                    <ion-label>\\r\\n                        <ng-container *ngIf=\\\"!searchQuery\\\">\\r\\n                            <p class=\\\"item-heading\\\">{{ participant.fullname }}</p>\\r\\n                            <p *ngIf=\\\"participant.lastcourseaccess\\\">\\r\\n                                <strong>{{ 'core.lastaccess' | translate }}: </strong>\\r\\n                                {{ participant.lastcourseaccess | coreTimeAgo }}\\r\\n                            </p>\\r\\n                            <p *ngIf=\\\"!participant.lastcourseaccess && participant.lastaccess\\\">\\r\\n                                <strong>{{ 'core.lastaccess' | translate }}: </strong>\\r\\n                                {{ participant.lastaccess | coreTimeAgo }}\\r\\n                            </p>\\r\\n                        </ng-container>\\r\\n\\r\\n                        <ng-container *ngIf=\\\"searchQuery\\\">\\r\\n                            <p class=\\\"item-heading\\\">\\r\\n                                <core-format-text [text]=\\\"participant.fullname\\\" [highlight]=\\\"searchQuery\\\" [filter]=\\\"false\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ng-container>\\r\\n                    </ion-label>\\r\\n\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n            <core-infinite-loading [enabled]=\\\"participants.loaded && !participants.completed\\\"\\r\\n                (action)=\\\"fetchMoreParticipants($event)\\\" [error]=\\\"fetchMoreParticipantsFailed\\\">\\r\\n            </core-infinite-loading>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { IonRefresher } from '@ionic/angular';\r\n\r\nimport { CoreApp } from '@services/app';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\r\nimport { CoreScreen } from '@services/screen';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\nimport { CoreUser, CoreUserProvider, CoreUserParticipant, CoreUserData } from '@features/user/services/user';\r\nimport { CoreUtils } from '@services/utils/utils';\r\n\r\n/**\r\n * Page that displays the list of course participants.\r\n */\r\n@Component({\r\n    selector: 'page-core-user-participants',\r\n    templateUrl: 'participants.html',\r\n})\r\nexport class CoreUserParticipantsPage implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n    participants: CoreUserParticipantsManager;\r\n    searchQuery: string | null = null;\r\n    searchInProgress = false;\r\n    searchEnabled = false;\r\n    showSearchBox = false;\r\n    fetchMoreParticipantsFailed = false;\r\n\r\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\r\n\r\n    constructor() {\r\n        const courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n\r\n        this.participants = new CoreUserParticipantsManager(CoreUserParticipantsPage, courseId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        this.searchEnabled = await CoreUser.canSearchParticipantsInSite();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async ngAfterViewInit(): Promise<void> {\r\n        await this.fetchInitialParticipants();\r\n\r\n        this.participants.start(this.splitView);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.participants.destroy();\r\n    }\r\n\r\n    /**\r\n     * Show or hide search box.\r\n     */\r\n    toggleSearch(): void {\r\n        this.showSearchBox = !this.showSearchBox;\r\n\r\n        if (this.showSearchBox) {\r\n            // Make search bar visible.\r\n            this.splitView.menuContent.scrollToTop();\r\n        } else {\r\n            this.clearSearch();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear search.\r\n     */\r\n    async clearSearch(): Promise<void> {\r\n        if (this.searchQuery === null) {\r\n            // Nothing to clear.\r\n            return;\r\n        }\r\n\r\n        this.searchQuery = null;\r\n        this.searchInProgress = false;\r\n        this.participants.resetItems();\r\n\r\n        await this.fetchInitialParticipants();\r\n    }\r\n\r\n    /**\r\n     * Start a new search.\r\n     *\r\n     * @param query Text to search for.\r\n     */\r\n    async search(query: string): Promise<void> {\r\n        CoreApp.closeKeyboard();\r\n\r\n        this.searchInProgress = true;\r\n        this.searchQuery = query;\r\n        this.participants.resetItems();\r\n\r\n        await this.fetchInitialParticipants();\r\n\r\n        this.searchInProgress = false;\r\n    }\r\n\r\n    /**\r\n     * Refresh participants.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    async refreshParticipants(refresher: IonRefresher): Promise<void> {\r\n        await CoreUtils.ignoreErrors(CoreUser.invalidateParticipantsList(this.participants.courseId));\r\n        await CoreUtils.ignoreErrors(this.fetchParticipants());\r\n\r\n        refresher?.complete();\r\n    }\r\n\r\n    /**\r\n     * Load a new batch of participants.\r\n     *\r\n     * @param complete Completion callback.\r\n     */\r\n    async fetchMoreParticipants(complete: () => void): Promise<void> {\r\n        try {\r\n            await this.fetchParticipants(this.participants.items);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading more participants');\r\n\r\n            this.fetchMoreParticipantsFailed = true;\r\n        }\r\n\r\n        complete();\r\n    }\r\n\r\n    /**\r\n     * Obtain the initial batch of participants.\r\n     */\r\n    private async fetchInitialParticipants(): Promise<void> {\r\n        try {\r\n            await this.fetchParticipants();\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading participants');\r\n\r\n            this.participants.setItems([]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the list of participants.\r\n     *\r\n     * @param loadedParticipants Participants list to continue loading from.\r\n     */\r\n    private async fetchParticipants(loadedParticipants: CoreUserParticipant[] | CoreUserData[] = []): Promise<void> {\r\n        if (this.searchQuery) {\r\n            const { participants, canLoadMore } = await CoreUser.searchParticipants(\r\n                this.participants.courseId,\r\n                this.searchQuery,\r\n                true,\r\n                Math.ceil(loadedParticipants.length / CoreUserProvider.PARTICIPANTS_LIST_LIMIT),\r\n                CoreUserProvider.PARTICIPANTS_LIST_LIMIT,\r\n            );\r\n\r\n            this.participants.setItems((loadedParticipants as CoreUserData[]).concat(participants), canLoadMore);\r\n        } else {\r\n            const { participants, canLoadMore } = await CoreUser.getParticipants(\r\n                this.participants.courseId,\r\n                loadedParticipants.length,\r\n            );\r\n\r\n            this.participants.setItems((loadedParticipants as CoreUserParticipant[]).concat(participants), canLoadMore);\r\n        }\r\n\r\n        this.fetchMoreParticipantsFailed = false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Helper to manage the list of participants.\r\n */\r\nclass CoreUserParticipantsManager extends CorePageItemsListManager<CoreUserParticipant | CoreUserData> {\r\n\r\n    courseId: number;\r\n\r\n    constructor(pageComponent: unknown, courseId: number) {\r\n        super(pageComponent);\r\n\r\n        this.courseId = courseId;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async select(participant: CoreUserParticipant | CoreUserData): Promise<void> {\r\n        if (CoreScreen.isMobile) {\r\n            await CoreNavigator.navigateToSitePath(\r\n                '/user/profile',\r\n                { params: { userId: participant.id, courseId: this.courseId } },\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        return super.select(participant);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    protected getItemPath(participant: CoreUserParticipant | CoreUserData): string {\r\n        return participant.id.toString();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    protected async logActivity(): Promise<void> {\r\n        await CoreUser.logParticipantsView(this.courseId);\r\n    }\r\n\r\n}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreSearchComponentsModule } from '@features/search/components/components.module';\r\n\r\nimport { CoreUserParticipantsPage } from './pages/participants/participants.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreUserParticipantsPage,\r\n        children: [\r\n            {\r\n                path: ':userId',\r\n                loadChildren: () => import('@features/user/pages/profile/profile.module').then(m => m.CoreUserProfilePageModule),\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreSearchComponentsModule,\r\n    ],\r\n    declarations: [\r\n        CoreUserParticipantsPage,\r\n    ],\r\n})\r\nexport class CoreUserCourseLazyModule {}\r\n"],"sourceRoot":"webpack:///"}