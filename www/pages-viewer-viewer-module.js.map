{"version":3,"sources":["./src/core/features/comments/pages/viewer/viewer.html","./src/core/features/comments/pages/viewer/viewer.module.ts","./src/core/features/comments/pages/viewer/viewer.page.ts","./src/core/features/comments/pages/viewer/viewer.scss"],"names":[],"mappings":"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","file":"pages-viewer-viewer-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text [text]=\\\"title\\\" [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"instanceId\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button *ngIf=\\\"canDeleteComments\\\" slot=\\\"end\\\" fill=\\\"clear\\\" (click)=\\\"toggleDelete()\\\"\\r\\n                [attr.aria-label]=\\\"'core.toggledelete' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-pen\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n            <core-context-menu>\\r\\n                <core-context-menu-item [hidden]=\\\"!(commentsLoaded && !hasOffline)\\\" [priority]=\\\"100\\\"\\r\\n                    [content]=\\\"'core.refresh' | translate\\\" (action)=\\\"refreshComments(false)\\\" [iconAction]=\\\"refreshIcon\\\"\\r\\n                    [closeOnClick]=\\\"true\\\">\\r\\n                </core-context-menu-item>\\r\\n                <core-context-menu-item [hidden]=\\\"!(commentsLoaded && hasOffline)\\\" [priority]=\\\"100\\\"\\r\\n                    [content]=\\\"'core.settings.synchronizenow' | translate\\\" (action)=\\\"refreshComments(true)\\\" [iconAction]=\\\"syncIcon\\\"\\r\\n                    [closeOnClick]=\\\"false\\\">\\r\\n                </core-context-menu-item>\\r\\n            </core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!commentsLoaded\\\" (ionRefresh)=\\\"refreshComments(false, $event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"commentsLoaded\\\">\\r\\n        <core-empty-box *ngIf=\\\"!comments || !comments.length\\\" icon=\\\"fas-comments\\\"\\r\\n            [message]=\\\"'core.comments.nocomments' | translate\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <!-- Load previous messages. -->\\r\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" position=\\\"top\\\" (action)=\\\"loadPrevious($event)\\\" [error]=\\\"loadMoreError\\\">\\r\\n        </core-infinite-loading>\\r\\n\\r\\n        <ion-list class=\\\"addon-messages-discussion-container\\\">\\r\\n            <ng-container *ngFor=\\\"let comment of comments; index as index; last as last\\\">\\r\\n\\r\\n                <p class=\\\"ion-text-center addon-messages-date\\\" *ngIf=\\\"comment.showDate\\\">\\r\\n                    {{ comment.timecreated * 1000 | coreFormatDate: \\\"strftimedayshort\\\" }}\\r\\n                </p>\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap addon-message\\\"\\r\\n                    [class.addon-message-mine]=\\\"comment.userid == currentUserId\\\"\\r\\n                    [class.addon-message-not-mine]=\\\"comment.userid != currentUserId\\\"\\r\\n                    [class.addon-message-no-user]=\\\"!comment.showUserData\\\"\\r\\n                    [@coreSlideInOut]=\\\"comment.userid == currentUserId ? '' : 'fromLeft'\\\">\\r\\n                    <ion-label>\\r\\n                        <!-- User data. -->\\r\\n                        <h2 class=\\\"addon-message-user\\\" *ngIf=\\\"comment.showUserData\\\">\\r\\n                            <core-user-avatar slot=\\\"start\\\" [user]=\\\"comment\\\" [linkProfile]=\\\"false\\\">\\r\\n                            </core-user-avatar>\\r\\n                            <div>{{ comment.fullname }}</div>\\r\\n                        </h2>\\r\\n\\r\\n                        <p class=\\\"addon-message-text\\\">\\r\\n                            <core-format-text [text]=\\\"comment.content\\\" [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"instanceId\\\"\\r\\n                                [courseId]=\\\"courseId\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <ion-note>\\r\\n                        <ng-container *ngIf=\\\"!comment.deleted\\\">\\r\\n                            {{ comment.timecreated * 1000 | coreFormatDate: 'strftimetime' }}\\r\\n                        </ng-container>\\r\\n                        <ng-container *ngIf=\\\"comment.deleted\\\">\\r\\n                            <ion-icon name=\\\"fas-trash\\\" aria-hidden=\\\"true\\\"></ion-icon> <span class=\\\"ion-text-wrap\\\">\\r\\n                                {{ 'core.deletedoffline' | translate }}\\r\\n                            </span>\\r\\n                        </ng-container>\\r\\n                    </ion-note>\\r\\n                    <div class=\\\"tail\\\" *ngIf=\\\"comment.showTail\\\"></div>\\r\\n                    <ion-button *ngIf=\\\"showDelete && !comment.deleted && comment.delete\\\" slot=\\\"end\\\" fill=\\\"clear\\\"\\r\\n                        [@coreSlideInOut]=\\\"'fromRight'\\\" color=\\\"danger\\\" (click)=\\\"deleteComment($event, comment)\\\"\\r\\n                        [attr.aria-label]=\\\"'core.delete' | translate\\\" class=\\\"addon-messages-delete-button\\\">\\r\\n                        <ion-icon name=\\\"fas-trash\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    </ion-button>\\r\\n                    <ion-button *ngIf=\\\"showDelete && comment.deleted\\\" slot=\\\"end\\\" fill=\\\"clear\\\" color=\\\"danger\\\"\\r\\n                        (click)=\\\"undoDeleteComment($event, comment)\\\" [attr.aria-label]=\\\"'core.restore' | translate\\\"\\r\\n                        class=\\\"addon-messages-delete-button\\\">\\r\\n                        <ion-icon name=\\\"fas-undo-alt\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    </ion-button>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n\\r\\n            <ion-item\\r\\n                *ngIf=\\\"offlineComment\\\"\\r\\n                class=\\\"ion-text-wrap addon-message addon-message-mine\\\"\\r\\n            >\\r\\n                <ion-label>\\r\\n                    <!-- User data. -->\\r\\n                    <p class=\\\"ion-text-center\\\">\\r\\n                        <ion-icon name=\\\"fas-exclamation-triangle\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        {{ 'core.thereisdatatosync' | translate:{$a: 'core.comments.comments' | translate | lowercase } }}\\r\\n                    </p>\\r\\n\\r\\n                    <p class=\\\"addon-message-text\\\">\\r\\n                        <core-format-text [text]=\\\"offlineComment.content\\\" [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"instanceId\\\"\\r\\n                            [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n                <ion-note>\\r\\n                    <ion-icon name=\\\"fas-clock\\\" aria-hidden=\\\"true\\\"></ion-icon> {{ 'core.notsent' | translate }}\\r\\n                </ion-note>\\r\\n                <div class=\\\"tail\\\"></div>\\r\\n                <ion-button *ngIf=\\\"showDelete\\\" slot=\\\"end\\\" fill=\\\"clear\\\"\\r\\n                    [@coreSlideInOut]=\\\"'fromRight'\\\" color=\\\"danger\\\" (click)=\\\"deleteComment($event, offlineComment)\\\"\\r\\n                    [attr.aria-label]=\\\"'core.delete' | translate\\\" class=\\\"addon-messages-delete-button\\\">\\r\\n                    <ion-icon name=\\\"fas-trash\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                </ion-button>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n<ion-footer color=\\\"light\\\" class=\\\"footer-adjustable\\\" *ngIf=\\\"commentsLoaded && canAddComments\\\">\\r\\n    <ion-toolbar color=\\\"light\\\">\\r\\n        <core-send-message-form [sendDisabled]=\\\"sending\\\" [message]=\\\"newComment\\\"\\r\\n            (onSubmit)=\\\"addComment($event)\\\" [placeholder]=\\\"'core.comments.addcomment' | translate\\\">\\r\\n        </core-send-message-form>\\r\\n    </ion-toolbar>\\r\\n</ion-footer>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreCommentsViewerPage } from './viewer.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreCommentsViewerPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        CoreCommentsViewerPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreCommentsViewerPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport { CoreAnimations } from '@components/animations';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CoreSites } from '@services/sites';\r\nimport {\r\n    CoreComments,\r\n    CoreCommentsCommentBasicData,\r\n    CoreCommentsData,\r\n    CoreCommentsProvider,\r\n} from '@features/comments/services/comments';\r\nimport {\r\n    CoreCommentsSync,\r\n    CoreCommentsSyncProvider,\r\n} from '@features/comments/services/comments-sync';\r\nimport { IonContent, IonRefresher } from '@ionic/angular';\r\nimport { ContextLevel, CoreConstants } from '@/core/constants';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { Translate } from '@singletons';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUser } from '@features/user/services/user';\r\nimport { CoreTextUtils } from '@services/utils/text';\r\nimport { CoreError } from '@classes/errors/error';\r\nimport { CoreCommentsOffline } from '@features/comments/services/comments-offline';\r\nimport { CoreCommentsDBRecord } from '@features/comments/services/database/comments';\r\nimport { CoreTimeUtils } from '@services/utils/time';\r\nimport { CoreApp } from '@services/app';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Page that displays comments.\r\n */\r\n@Component({\r\n    selector: 'page-core-comments-viewer',\r\n    templateUrl: 'viewer.html',\r\n    animations: [CoreAnimations.SLIDE_IN_OUT],\r\n    styleUrls: ['viewer.scss'],\r\n})\r\nexport class CoreCommentsViewerPage implements OnInit, OnDestroy {\r\n\r\n    @ViewChild(IonContent) content?: IonContent;\r\n\r\n    comments: CoreCommentsDataToDisplay[] = [];\r\n    commentsLoaded = false;\r\n    contextLevel!: ContextLevel;\r\n    instanceId!: number;\r\n    componentName!: string;\r\n    itemId = 0;\r\n    area = '';\r\n    page = 0;\r\n    title = '';\r\n    courseId?: number;\r\n    canLoadMore = false;\r\n    loadMoreError = false;\r\n    canAddComments = false;\r\n    canDeleteComments = false;\r\n    showDelete = false;\r\n    hasOffline = false;\r\n    refreshIcon = CoreConstants.ICON_LOADING;\r\n    syncIcon = CoreConstants.ICON_LOADING;\r\n    offlineComment?: CoreCommentsOfflineWithUser;\r\n    currentUserId: number;\r\n    sending = false;\r\n    newComment = '';\r\n\r\n    protected addDeleteCommentsAvailable = false;\r\n    protected syncObserver?: CoreEventObserver;\r\n    protected viewDestroyed = false;\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n    ) {\r\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\r\n\r\n        // Refresh data if comments are synchronized automatically.\r\n        this.syncObserver = CoreEvents.on(CoreCommentsSyncProvider.AUTO_SYNCED, (data) => {\r\n            if (data.contextLevel == this.contextLevel && data.instanceId == this.instanceId &&\r\n                    data.componentName == this.componentName && data.itemId == this.itemId && data.area == this.area) {\r\n                // Show the sync warnings.\r\n                this.showSyncWarnings(data.warnings);\r\n\r\n                // Refresh the data.\r\n                this.commentsLoaded = false;\r\n                this.refreshIcon = CoreConstants.ICON_LOADING;\r\n                this.syncIcon = CoreConstants.ICON_LOADING;\r\n\r\n                this.page = 0;\r\n                this.comments = [];\r\n                this.fetchComments(false);\r\n            }\r\n        }, CoreSites.getCurrentSiteId());\r\n    }\r\n\r\n    /**\r\n     * View loaded.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        // Is implicit the user can delete if he can add.\r\n        this.addDeleteCommentsAvailable = await CoreComments.isAddCommentsAvailable();\r\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\r\n\r\n        this.commentsLoaded = false;\r\n        this.contextLevel = CoreNavigator.getRouteParam<ContextLevel>('contextLevel')!;\r\n        this.instanceId = CoreNavigator.getRouteNumberParam('instanceId')!;\r\n        this.componentName = CoreNavigator.getRouteParam<string>('componentName')!;\r\n        this.itemId = CoreNavigator.getRouteNumberParam('itemId')!;\r\n        this.area = CoreNavigator.getRouteParam('area') || '';\r\n        this.title = CoreNavigator.getRouteNumberParam('title') ||\r\n            Translate.instant('core.comments.comments');\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId');\r\n\r\n        await this.fetchComments(true);\r\n    }\r\n\r\n    /**\r\n     * Fetches the comments.\r\n     *\r\n     * @param sync When to resync comments.\r\n     * @param showErrors When to display errors or not.\r\n     * @return Resolved when done.\r\n     */\r\n    protected async fetchComments(sync: boolean, showErrors = false): Promise<void> {\r\n        this.loadMoreError = false;\r\n\r\n        if (sync) {\r\n            await CoreUtils.ignoreErrors(this.syncComments(showErrors));\r\n        }\r\n\r\n        try {\r\n            // Get comments data.\r\n            const commentsResponse = await CoreComments.getComments(\r\n                this.contextLevel,\r\n                this.instanceId,\r\n                this.componentName,\r\n                this.itemId,\r\n                this.area,\r\n                this.page,\r\n            );\r\n            this.canAddComments = this.addDeleteCommentsAvailable && !!commentsResponse.canpost;\r\n\r\n            let comments = commentsResponse.comments.sort((a, b) => a.timecreated - b.timecreated);\r\n            if (typeof commentsResponse.count != 'undefined') {\r\n                this.canLoadMore = (this.comments.length + comments.length) < commentsResponse.count;\r\n            } else {\r\n                // Old style.\r\n                this.canLoadMore = commentsResponse.comments.length > 0 &&\r\n                    commentsResponse.comments.length >= CoreCommentsProvider.pageSize;\r\n            }\r\n\r\n            comments = await Promise.all(comments.map((comment) => this.loadCommentProfile(comment)));\r\n\r\n            this.comments = comments.concat(this.comments);\r\n\r\n            this.comments.forEach((comment, index) => {\r\n                comment.showDate = this.showDate(comment, this.comments[index - 1]);\r\n                comment.showUserData = this.showUserData(comment, this.comments[index - 1]);\r\n                comment.showTail = this.showTail(comment, this.comments[index + 1]);\r\n            });\r\n\r\n            this.canDeleteComments = this.addDeleteCommentsAvailable &&\r\n                (this.hasOffline || this.comments.some((comment) => !!comment.delete));\r\n\r\n            await this.loadOfflineData();\r\n        } catch (error) {\r\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\r\n            if (error && this.componentName == 'assignsubmission_comments') {\r\n                CoreDomUtils.showAlertTranslated('core.notice', 'core.comments.commentsnotworking');\r\n            } else {\r\n                CoreDomUtils.showErrorModalDefault(error, Translate.instant('core.error') + ': get_comments');\r\n            }\r\n        } finally {\r\n            this.commentsLoaded = true;\r\n            this.refreshIcon = CoreConstants.ICON_REFRESH;\r\n            this.syncIcon = CoreConstants.ICON_SYNC;\r\n\r\n            if (this.page == 0) {\r\n                this.scrollToBottom();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Function to load more commemts.\r\n     *\r\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\r\n     * @return Resolved when done.\r\n     */\r\n    loadPrevious(infiniteComplete?: () => void): Promise<void> {\r\n        this.page++;\r\n        this.canLoadMore = false;\r\n\r\n        return this.fetchComments(true).finally(() => {\r\n            infiniteComplete && infiniteComplete();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refresh the comments.\r\n     *\r\n     * @param showErrors Whether to display errors or not.\r\n     * @param refresher Refresher.\r\n     * @return Resolved when done.\r\n     */\r\n    async refreshComments(showErrors: boolean, refresher?: IonRefresher): Promise<void> {\r\n        this.commentsLoaded = false;\r\n        this.refreshIcon = CoreConstants.ICON_LOADING;\r\n        this.syncIcon = CoreConstants.ICON_LOADING;\r\n\r\n        try {\r\n            await this.invalidateComments();\r\n        } finally {\r\n            this.page = 0;\r\n            this.comments = [];\r\n\r\n            try {\r\n                await this.fetchComments(true, showErrors);\r\n            } finally {\r\n                refresher?.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show sync warnings if any.\r\n     *\r\n     * @param warnings the warnings\r\n     */\r\n    private showSyncWarnings(warnings: string[]): void {\r\n        const message = CoreTextUtils.buildMessage(warnings);\r\n        if (message) {\r\n            CoreDomUtils.showErrorModal(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tries to synchronize comments.\r\n     *\r\n     * @param showErrors Whether to display errors or not.\r\n     * @return Promise resolved if sync is successful, rejected otherwise.\r\n     */\r\n    private async syncComments(showErrors: boolean): Promise<void> {\r\n        try {\r\n            const result = await CoreCommentsSync.syncComments(\r\n                this.contextLevel,\r\n                this.instanceId,\r\n                this.componentName,\r\n                this.itemId,\r\n                this.area,\r\n            );\r\n            this.showSyncWarnings(result?.warnings || []);\r\n        } catch (error) {\r\n            if (showErrors) {\r\n                CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\r\n            }\r\n\r\n            throw new CoreError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the comment or store it offline.\r\n     *\r\n     * @param text Comment text to add.\r\n     */\r\n    async addComment(text: string): Promise<void> {\r\n        CoreApp.closeKeyboard();\r\n        const loadingModal = await CoreDomUtils.showModalLoading('core.sending', true);\r\n        // Freeze the add comment button.\r\n        this.sending = true;\r\n        try {\r\n            const commentsResponse = await CoreComments.addComment(\r\n                text,\r\n                this.contextLevel,\r\n                this.instanceId,\r\n                this.componentName,\r\n                this.itemId,\r\n                this.area,\r\n            );\r\n\r\n            CoreDomUtils.showToast(\r\n                commentsResponse ? 'core.comments.eventcommentcreated' : 'core.datastoredoffline',\r\n                true,\r\n                3000,\r\n            );\r\n\r\n            if (commentsResponse) {\r\n                this.invalidateComments();\r\n\r\n                const addedComments = await this.loadCommentProfile(commentsResponse);\r\n                addedComments.showDate = this.showDate(addedComments, this.comments[this.comments.length - 1]);\r\n                addedComments.showUserData = this.showUserData(addedComments, this.comments[this.comments.length - 1]);\r\n                addedComments.showTail = this.showTail(addedComments, this.comments[this.comments.length + 1]);\r\n\r\n                // Add the comment to the top.\r\n                this.comments = this.comments.concat([addedComments]);\r\n                this.canDeleteComments = this.addDeleteCommentsAvailable;\r\n\r\n                CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\r\n                    contextLevel: this.contextLevel,\r\n                    instanceId: this.instanceId,\r\n                    component: this.componentName,\r\n                    itemId: this.itemId,\r\n                    area: this.area,\r\n                    countChange: 1,\r\n                }, CoreSites.getCurrentSiteId());\r\n\r\n            } else if (commentsResponse === false) {\r\n                // Comments added in offline mode.\r\n                await this.loadOfflineData();\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            loadingModal.dismiss();\r\n            this.sending = false;\r\n\r\n            // New comments.\r\n            this.scrollToBottom();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a comment.\r\n     *\r\n     * @param e Click event.\r\n     * @param comment Comment to delete.\r\n     */\r\n    async deleteComment(e: Event, comment: CoreCommentsDataToDisplay | CoreCommentsOfflineWithUser): Promise<void> {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const modified = 'lastmodified' in comment\r\n            ? comment.lastmodified\r\n            : comment.timecreated;\r\n        const time = CoreTimeUtils.userDate(\r\n            modified * 1000,\r\n            'core.strftimerecentfull',\r\n        );\r\n\r\n        const deleteComment: CoreCommentsCommentBasicData = {\r\n            contextlevel: this.contextLevel,\r\n            instanceid: this.instanceId,\r\n            component: this.componentName,\r\n            itemid: this.itemId,\r\n            area: this.area,\r\n            content: comment.content,\r\n            id: 'id' in comment ? comment.id : undefined,\r\n        };\r\n\r\n        try {\r\n            await CoreDomUtils.showDeleteConfirm('core.comments.deletecommentbyon', {\r\n                $a:\r\n                    { user: comment.fullname || '', time: time },\r\n            });\r\n        } catch {\r\n            // User cancelled, nothing to do.\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const deletedOnline = await CoreComments.deleteComment(deleteComment);\r\n            this.showDelete = false;\r\n\r\n            if (deletedOnline && 'id' in comment) {\r\n                const index = this.comments.findIndex((commentinList) => commentinList.id == comment.id);\r\n\r\n                if (index >= 0) {\r\n                    this.comments.splice(index, 1);\r\n\r\n                    CoreEvents.trigger(CoreCommentsProvider.COMMENTS_COUNT_CHANGED_EVENT, {\r\n                        contextLevel: this.contextLevel,\r\n                        instanceId: this.instanceId,\r\n                        component: this.componentName,\r\n                        itemId: this.itemId,\r\n                        area: this.area,\r\n                        countChange: -1,\r\n                    }, CoreSites.getCurrentSiteId());\r\n                }\r\n            } else {\r\n                this.loadOfflineData();\r\n            }\r\n\r\n            this.invalidateComments();\r\n\r\n            CoreDomUtils.showToast('core.comments.eventcommentdeleted', true, 3000);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'Delete comment failed.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invalidate comments.\r\n     *\r\n     * @return Resolved when done.\r\n     */\r\n    protected invalidateComments(): Promise<void> {\r\n        return CoreComments.invalidateCommentsData(\r\n            this.contextLevel,\r\n            this.instanceId,\r\n            this.componentName,\r\n            this.itemId,\r\n            this.area,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Loads the profile info onto the comment object.\r\n     *\r\n     * @param comment Comment object.\r\n     * @return Promise resolved with modified comment when done.\r\n     */\r\n    protected async loadCommentProfile(comment: CoreCommentsDataToDisplay): Promise<CoreCommentsDataToDisplay> {\r\n        // Get the user profile image.\r\n        try {\r\n            const user = await CoreUser.getProfile(comment.userid!, undefined, true);\r\n            comment.profileimageurl = user.profileimageurl;\r\n            comment.fullname = user.fullname;\r\n        } catch {\r\n            // Ignore errors.\r\n        }\r\n\r\n        return comment;\r\n\r\n    }\r\n\r\n    /**\r\n     * Check if the user info should be displayed for the current message.\r\n     * User data is only displayed if the previous message was from another user.\r\n     *\r\n     * @param comment Comment object.\r\n     * @param prevComment Previous comment object.\r\n     * @return Whether user data should be shown.\r\n     */\r\n    protected showUserData(\r\n        comment: CoreCommentsDataToDisplay,\r\n        prevComment?: CoreCommentsDataToDisplay,\r\n    ): boolean {\r\n        return comment.userid != this.currentUserId && (!prevComment || prevComment.userid != comment.userid || !!comment.showDate);\r\n    }\r\n\r\n    /**\r\n     * Check if a css tail should be shown.\r\n     *\r\n     * @param comment Comment object.\r\n     * @param nextComment Previous comment object.\r\n     * @return Whether user data should be shown.\r\n     */\r\n    protected showTail(\r\n        comment: CoreCommentsDataToDisplay,\r\n        nextComment?: CoreCommentsDataToDisplay,\r\n    ): boolean {\r\n        return !nextComment || nextComment.userid != comment.userid || !!nextComment.showDate;\r\n    }\r\n\r\n    /**\r\n     * Check if the date should be displayed between messages (when the day changes at midnight for example).\r\n     *\r\n     * @param comment Comment object.\r\n     * @param prevComment Previous comment object.\r\n     * @return True if messages are from diferent days, false othetwise.\r\n     */\r\n    protected showDate(\r\n        comment: CoreCommentsDataToDisplay,\r\n        prevComment?: CoreCommentsDataToDisplay,\r\n    ): boolean {\r\n        if (!prevComment) {\r\n            return true;\r\n        }\r\n\r\n        // Check if day has changed.\r\n        return !moment(comment.timecreated * 1000).isSame(prevComment.timecreated * 1000, 'day');\r\n    }\r\n\r\n    /**\r\n     * Load offline comments.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async loadOfflineData(): Promise<void> {\r\n        const promises: Promise<void>[] = [];\r\n        let hasDeletedComments = false;\r\n\r\n        // Load the only offline comment allowed if any.\r\n        promises.push(CoreCommentsOffline.getComment(\r\n            this.contextLevel,\r\n            this.instanceId,\r\n            this.componentName,\r\n            this.itemId,\r\n            this.area,\r\n        ).then(async (offlineComment) => {\r\n            this.offlineComment = offlineComment;\r\n\r\n            if (!offlineComment) {\r\n                return;\r\n            }\r\n\r\n            if (this.newComment == '') {\r\n                this.newComment = this.offlineComment!.content;\r\n            }\r\n\r\n            this.offlineComment!.userid = this.currentUserId;\r\n\r\n            return;\r\n        }));\r\n\r\n        // Load deleted comments offline.\r\n        promises.push(CoreCommentsOffline.getDeletedComments(\r\n            this.contextLevel,\r\n            this.instanceId,\r\n            this.componentName,\r\n            this.itemId,\r\n            this.area,\r\n        ).then((deletedComments) => {\r\n            hasDeletedComments = deletedComments && deletedComments.length > 0;\r\n\r\n            if (hasDeletedComments) {\r\n                deletedComments.forEach((deletedComment) => {\r\n                    const comment = this.comments.find((comment) => comment.id == deletedComment.commentid);\r\n\r\n                    if (comment) {\r\n                        comment.deleted = !!deletedComment.deleted;\r\n                    }\r\n                });\r\n            }\r\n\r\n            return;\r\n        }));\r\n\r\n        await Promise.all(promises);\r\n\r\n        this.hasOffline = !!this.offlineComment || hasDeletedComments;\r\n    }\r\n\r\n    /**\r\n     * Restore a comment.\r\n     *\r\n     * @param e Click event.\r\n     * @param comment Comment to delete.\r\n     */\r\n    async undoDeleteComment(e: Event, comment: CoreCommentsDataToDisplay): Promise<void> {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        await CoreCommentsOffline.undoDeleteComment(comment.id);\r\n\r\n        comment.deleted = false;\r\n        this.showDelete = false;\r\n    }\r\n\r\n    /**\r\n     * Scroll bottom when render has finished.\r\n     */\r\n    protected scrollToBottom(): void {\r\n        // Need a timeout to leave time to the view to be rendered.\r\n        setTimeout(() => {\r\n            if (!this.viewDestroyed) {\r\n                this.content?.scrollToBottom();\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Toggle delete.\r\n     */\r\n    toggleDelete(): void {\r\n        this.showDelete = !this.showDelete;\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.syncObserver?.off();\r\n        this.viewDestroyed = true;\r\n    }\r\n\r\n}\r\n\r\nexport type CoreCommentsDataToDisplay = CoreCommentsData & {\r\n    profileimageurl?: string;\r\n    fullname?: string;\r\n    deleted?: boolean;\r\n    showDate?: boolean;\r\n    showTail?: boolean;\r\n    showUserData?: boolean;\r\n};\r\n\r\nexport type CoreCommentsOfflineWithUser = CoreCommentsDBRecord & {\r\n    profileimageurl?: string;\r\n    fullname?: string;\r\n    userid?: number;\r\n    deleted?: boolean;\r\n};\r\n","export default \"/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/*\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/*\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n * Extracted from ionic.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host ion-content {\\n  --background: var(--background-alternative);\\n}\\n:host ion-content::part(scroll) {\\n  padding-bottom: 0 !important;\\n}\\n:host .addon-messages-discussion-container {\\n  display: flex;\\n  flex-direction: column;\\n  padding-bottom: 15px;\\n  background: var(--background-alternative);\\n}\\n:host .addon-messages-date {\\n  font-weight: normal;\\n  font-size: 0.9rem;\\n}\\n:host ion-item.addon-message {\\n  border: 0;\\n  border-radius: 4px;\\n  padding: 0 8px 0 8px;\\n  margin: 10px 8px 0 8px;\\n  --background: var(--addon-messages-message-bg);\\n  background: var(--background);\\n  align-self: flex-start;\\n  width: 90%;\\n  max-width: 90%;\\n  --min-height: var(--a11y-min-target-size);\\n  position: relative;\\n  transition: width 500ms ease-in-out;\\n  overflow: visible;\\n}\\n:host ion-item.addon-message::part(native) {\\n  --inner-border-width: 0;\\n  --inner-padding-end: 0;\\n  padding: 0;\\n  margin: 0;\\n}\\n:host ion-item.addon-message core-format-text > p:only-child {\\n  display: inline;\\n}\\n:host ion-item.addon-message .addon-message-user {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  align-items: center;\\n  margin-bottom: 0.5rem;\\n  margin-top: 0;\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .addon-message-user core-user-avatar {\\n  display: block;\\n  --core-avatar-size: var(--addon-messages-avatar-size);\\n  margin: 0;\\n}\\n:host ion-item.addon-message .addon-message-user div {\\n  font-weight: 500;\\n  flex-grow: 1;\\n  padding-left: 0.5rem;\\n  padding-right: 0.5rem;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message .addon-message-user div {\\n    padding-left: unset;\\n    padding-right: unset;\\n    -webkit-padding-start: 0.5rem;\\n    padding-inline-start: 0.5rem;\\n    -webkit-padding-end: 0.5rem;\\n    padding-inline-end: 0.5rem;\\n  }\\n}\\n:host ion-item.addon-message ion-note {\\n  color: var(--addon-messages-message-note-text);\\n  font-size: var(--addon-messages-message-note-font-size);\\n  margin: 0;\\n  padding: 0 0 8px 0;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message[tappable]:active {\\n  --background: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message ion-label {\\n  margin: 0;\\n  padding: 8px 0;\\n}\\n:host ion-item.addon-message .addon-message-text {\\n  display: inline-flex;\\n}\\n:host ion-item.addon-message .addon-message-text * {\\n  color: var(--ion-text-color);\\n}\\n:host ion-item.addon-message .tail {\\n  content: \\\"\\\";\\n  width: 0;\\n  height: 0;\\n  border: 0.5rem solid transparent;\\n  position: absolute;\\n  touch-action: none;\\n  bottom: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine {\\n  --background: var(--addon-messages-message-mine-bg);\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active {\\n  --background: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner {\\n  float: right;\\n  margin-left: 5px;\\n  margin-right: -3px;\\n  margin-top: 2px;\\n  margin-bottom: -2px;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .spinner {\\n  float: left;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .spinner {\\n    margin-left: unset;\\n    margin-right: unset;\\n    -webkit-margin-start: 5px;\\n    margin-inline-start: 5px;\\n    -webkit-margin-end: -3px;\\n    margin-inline-end: -3px;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine .spinner svg {\\n  width: 16px;\\n  height: 16px;\\n}\\n:host ion-item.addon-message.addon-message-mine .tail {\\n  right: -8px;\\n  margin-right: -0.5rem;\\n  border-bottom-color: var(--addon-messages-message-mine-bg);\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-mine .tail {\\n  left: unset;\\n  right: unset;\\n  left: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-mine .tail {\\n    margin-right: unset;\\n    -webkit-margin-end: -0.5rem;\\n    margin-inline-end: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message.addon-message-mine[tappable]:active .tail {\\n  border-bottom-color: var(--addon-messages-message-mine-activated-bg);\\n}\\n:host ion-item.addon-message.addon-message-not-mine .tail {\\n  border-bottom-color: var(--addon-messages-message-bg);\\n  left: -8px;\\n  margin-left: -0.5rem;\\n}\\n[dir=rtl] :host ion-item.addon-message.addon-message-not-mine .tail {\\n  left: unset;\\n  right: unset;\\n  right: -8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host ion-item.addon-message.addon-message-not-mine .tail {\\n    margin-left: unset;\\n    -webkit-margin-start: -0.5rem;\\n    margin-inline-start: -0.5rem;\\n  }\\n}\\n:host ion-item.addon-message[tappable].addon-message-not-mine.activated .tail {\\n  border-bottom-color: var(--addon-messages-message-activated-bg);\\n}\\n:host ion-item.addon-message .addon-messages-delete-button {\\n  min-height: initial;\\n  line-height: initial;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  height: var(--a11y-min-target-size) !important;\\n  align-self: flex-end;\\n}\\n:host ion-item.addon-message .addon-messages-delete-button ion-icon {\\n  font-size: 1.4em;\\n  line-height: initial;\\n  color: var(--ion-color-danger);\\n}\\n:host ion-item.addon-message.addon-message-no-user {\\n  margin-top: 8px;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine {\\n  padding-top: 0;\\n}\\n:host ion-item.addon-message.addon-message-mine + ion-item.addon-message.addon-message-no-user.addon-message-mine .item-heading,\\n:host ion-item.addon-message.addon-message-not-mine + ion-item.addon-message.addon-message-no-user.addon-message-not-mine .item-heading {\\n  margin-bottom: 0;\\n}\\n:host-context(.ios) ion-footer .toolbar:last-child {\\n  padding-bottom: 4px;\\n  min-height: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";"],"sourceRoot":"webpack:///"}