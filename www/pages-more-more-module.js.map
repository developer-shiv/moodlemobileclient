{"version":3,"sources":["./src/core/features/mainmenu/pages/more/more.html","./src/core/features/mainmenu/pages/more/more.module.ts","./src/core/features/mainmenu/pages/more/more.scss","./src/core/features/mainmenu/pages/more/more.ts"],"names":[],"mappings":"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","file":"pages-more-more-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <h1><core-format-text [text]=\\\"siteName\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text></h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-loading [hideUntil]=\\\"!loggedOut\\\">\\r\\n        <ion-list>\\r\\n            <ion-item button *ngIf=\\\"siteInfo\\\" class=\\\"ion-text-wrap\\\" core-user-link [userId]=\\\"siteInfo.userid\\\" detail=\\\"true\\\">\\r\\n                <core-user-avatar [user]=\\\"siteInfo\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{siteInfo.fullname}}</p>\\r\\n                    <p class=\\\"core-moremenu-siteinfo core-moremenu-sitename\\\">\\r\\n                        <core-format-text [text]=\\\"siteName\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\" [wsNotFiltered]=\\\"true\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                    <p class=\\\"core-moremenu-siteinfo core-moremenu-siteurl\\\">{{ siteUrl }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <core-spacer></core-spacer>\\r\\n            <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"(!handlers || !handlers.length) && !handlersLoaded\\\">\\r\\n                <ion-label><ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner></ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item button *ngFor=\\\"let handler of handlers\\\" [ngClass]=\\\"['core-moremenu-handler', handler.class || '']\\\"\\r\\n                (click)=\\\"openHandler(handler)\\\" [attr.aria-label]=\\\"handler.title | translate\\\" detail=\\\"true\\\">\\r\\n                <ion-icon [name]=\\\"handler.icon\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ handler.title | translate}}</p>\\r\\n                </ion-label>\\r\\n                <ion-badge slot=\\\"end\\\" *ngIf=\\\"handler.showBadge\\\" [hidden]=\\\"handler.loading || !handler.badge\\\" aria-hidden=\\\"true\\\">\\r\\n                    {{handler.badge}}\\r\\n                </ion-badge>\\r\\n                <span *ngIf=\\\"handler.showBadge && handler.badge && handler.badgeA11yText\\\" class=\\\"sr-only\\\">\\r\\n                    {{ handler.badgeA11yText | translate: {$a : handler.badge } }}\\r\\n                </span>\\r\\n                <ion-spinner slot=\\\"end\\\" *ngIf=\\\"handler.showBadge && handler.loading\\\" [attr.aria-label]=\\\"'core.loading' | translate\\\">\\r\\n                </ion-spinner>\\r\\n            </ion-item>\\r\\n            <ng-container *ngFor=\\\"let item of customItems\\\">\\r\\n                <ion-item button *ngIf=\\\"item.type != 'embedded'\\\" [href]=\\\"item.url\\\" [attr.aria-label]=\\\"item.label\\\" core-link\\r\\n                    [capture]=\\\"item.type == 'app'\\\" [inApp]=\\\"item.type == 'inappbrowser'\\\" class=\\\"core-moremenu-customitem\\\" detail=\\\"true\\\"\\r\\n                    [detailIcon]=\\\"item.type == 'browser' ? 'open-outline' : 'chevron-forward'\\\">\\r\\n                    <ion-icon [name]=\\\"item.icon\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{item.label}}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item button *ngIf=\\\"item.type == 'embedded'\\\" (click)=\\\"openItem(item)\\\" [attr.aria-label]=\\\"item.label\\\"\\r\\n                    class=\\\"core-moremenu-customitem\\\" detail=\\\"true\\\">\\r\\n                    <ion-icon [name]=\\\"item.icon\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{item.label}}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n            <ion-item button *ngIf=\\\"showScanQR\\\" (click)=\\\"scanQR()\\\" detail=\\\"true\\\">\\r\\n                <ion-icon name=\\\"fas-qrcode\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'core.scanqr' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item button *ngIf=\\\"showWeb && siteInfo\\\" [href]=\\\"siteInfo.siteurl\\\" core-link autoLogin=\\\"yes\\\"\\r\\n                [attr.aria-label]=\\\"'core.mainmenu.website' | translate\\\" detail=\\\"true\\\" detailIcon=\\\"open-outline\\\">\\r\\n                <ion-icon name=\\\"fas-globe\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'core.mainmenu.website' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item button *ngIf=\\\"showHelp\\\" [href]=\\\"docsUrl\\\" core-link autoLogin=\\\"no\\\"\\r\\n                [attr.aria-label]=\\\"'core.mainmenu.help' | translate\\\" detail=\\\"true\\\" detailIcon=\\\"open-outline\\\">\\r\\n                <ion-icon name=\\\"far-life-ring\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'core.mainmenu.help' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item button (click)=\\\"openPreferences()\\\" [attr.aria-label]=\\\"'core.settings.preferences' | translate\\\" detail=\\\"true\\\">\\r\\n                <ion-icon name=\\\"fas-wrench\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'core.settings.preferences' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item button (click)=\\\"logout()\\\" [attr.aria-label]=\\\"logoutLabel | translate\\\" detail=\\\"true\\\">\\r\\n                <ion-icon name=\\\"fas-sign-out-alt\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ logoutLabel | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <core-spacer></core-spacer>\\r\\n            <ion-item button (click)=\\\"openSettings()\\\" [attr.aria-label]=\\\"'core.settings.appsettings' | translate\\\" detail=\\\"true\\\">\\r\\n                <ion-icon name=\\\"fas-cogs\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'core.settings.appsettings' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Injector, NgModule } from '@angular/core';\r\nimport { RouterModule, ROUTES } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreMainMenuMorePage } from './more';\r\nimport { buildTabMainRoutes } from '@features/mainmenu/mainmenu-tab-routing.module';\r\nimport { CoreMainMenuProvider } from '@features/mainmenu/services/mainmenu';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CoreSharedModule,\r\n    ],\r\n    providers: [\r\n        {\r\n            provide: ROUTES,\r\n            multi: true,\r\n            deps: [Injector],\r\n            useFactory: (injector: Injector) => buildTabMainRoutes(injector, {\r\n                component: CoreMainMenuMorePage,\r\n                data: {\r\n                    mainMenuTabRoot: CoreMainMenuProvider.MORE_PAGE_NAME,\r\n                },\r\n            }),\r\n        },\r\n    ],\r\n    declarations: [\r\n        CoreMainMenuMorePage,\r\n    ],\r\n    exports: [\r\n        RouterModule,\r\n    ],\r\n})\r\nexport class CoreMainMenuMorePageModule {}\r\n","export default \"/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/*\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/*\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n * Extracted from ionic.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\nion-item {\\n  --border-color: var(--core-more-item-border,\\n         var(--ion-item-border-color,\\n         var(--ion-border-color,\\n         var(--ion-color-step-150,\\n         rgba(0, 0, 0, 0.13)))));\\n}\\nion-item ion-icon {\\n  color: var(--core-more-icon, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.54));\\n}\\n:host-context(ion-app.ios) ion-item ion-icon {\\n  color: var(--core-more-icon, inherit);\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreSiteInfo } from '@classes/site';\r\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\r\nimport { CoreMainMenuDelegate, CoreMainMenuHandlerData } from '../../services/mainmenu-delegate';\r\nimport { CoreMainMenu, CoreMainMenuCustomItem } from '../../services/mainmenu';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreCustomURLSchemes } from '@services/urlschemes';\r\nimport { CoreContentLinksHelper } from '@features/contentlinks/services/contentlinks-helper';\r\nimport { CoreTextUtils } from '@services/utils/text';\r\nimport { Translate } from '@singletons';\r\n\r\n/**\r\n * Page that displays the main menu of the app.\r\n */\r\n@Component({\r\n    selector: 'page-core-mainmenu-more',\r\n    templateUrl: 'more.html',\r\n    styleUrls: ['more.scss'],\r\n})\r\nexport class CoreMainMenuMorePage implements OnInit, OnDestroy {\r\n\r\n    handlers?: CoreMainMenuHandlerData[];\r\n    allHandlers?: CoreMainMenuHandlerData[];\r\n    handlersLoaded = false;\r\n    siteInfo?: CoreSiteInfo;\r\n    siteName?: string;\r\n    logoutLabel = 'core.mainmenu.changesite';\r\n    showScanQR: boolean;\r\n    showWeb?: boolean;\r\n    showHelp?: boolean;\r\n    docsUrl?: string;\r\n    customItems?: CoreMainMenuCustomItem[];\r\n    siteUrl?: string;\r\n    loggedOut = false;\r\n\r\n    protected subscription!: Subscription;\r\n    protected langObserver: CoreEventObserver;\r\n    protected updateSiteObserver: CoreEventObserver;\r\n\r\n    constructor() {\r\n\r\n        this.langObserver = CoreEvents.on(CoreEvents.LANGUAGE_CHANGED, this.loadSiteInfo.bind(this));\r\n        this.updateSiteObserver = CoreEvents.on(\r\n            CoreEvents.SITE_UPDATED,\r\n            this.loadSiteInfo.bind(this),\r\n            CoreSites.getCurrentSiteId(),\r\n        );\r\n        this.loadSiteInfo();\r\n        this.showScanQR = CoreUtils.canScanQR() &&\r\n                !CoreSites.getCurrentSite()?.isFeatureDisabled('CoreMainMenuDelegate_QrReader');\r\n    }\r\n\r\n    /**\r\n     * Initialize component.\r\n     */\r\n    ngOnInit(): void {\r\n        // Load the handlers.\r\n        this.subscription = CoreMainMenuDelegate.getHandlersObservable().subscribe((handlers) => {\r\n            this.allHandlers = handlers;\r\n\r\n            this.initHandlers();\r\n        });\r\n\r\n        window.addEventListener('resize', this.initHandlers.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        window.removeEventListener('resize', this.initHandlers.bind(this));\r\n        this.langObserver?.off();\r\n        this.updateSiteObserver?.off();\r\n        this.subscription?.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Init handlers on change (size or handlers).\r\n     */\r\n    initHandlers(): void {\r\n        if (!this.allHandlers) {\r\n            return;\r\n        }\r\n\r\n        // Calculate the main handlers not to display them in this view.\r\n        const mainHandlers = this.allHandlers\r\n            .filter((handler) => !handler.onlyInMore)\r\n            .slice(0, CoreMainMenu.getNumItems());\r\n\r\n        // Get only the handlers that don't appear in the main view.\r\n        this.handlers = this.allHandlers.filter((handler) => mainHandlers.indexOf(handler) == -1);\r\n\r\n        this.handlersLoaded = CoreMainMenuDelegate.areHandlersLoaded();\r\n    }\r\n\r\n    /**\r\n     * Load the site info required by the view.\r\n     */\r\n    protected async loadSiteInfo(): Promise<void> {\r\n        const currentSite = CoreSites.getCurrentSite();\r\n\r\n        if (!currentSite) {\r\n            return;\r\n        }\r\n\r\n        this.siteInfo = currentSite.getInfo();\r\n        this.siteName = currentSite.getSiteName();\r\n        this.siteUrl = currentSite.getURL();\r\n        this.logoutLabel = CoreLoginHelper.getLogoutLabel(currentSite);\r\n        this.showWeb = !currentSite.isFeatureDisabled('CoreMainMenuDelegate_website');\r\n        this.showHelp = !currentSite.isFeatureDisabled('CoreMainMenuDelegate_help');\r\n\r\n        this.docsUrl = await currentSite.getDocsUrl();\r\n\r\n        this.customItems = await CoreMainMenu.getCustomMenuItems();\r\n    }\r\n\r\n    /**\r\n     * Open a handler.\r\n     *\r\n     * @param handler Handler to open.\r\n     */\r\n    openHandler(handler: CoreMainMenuHandlerData): void {\r\n        const params = handler.pageParams;\r\n\r\n        CoreNavigator.navigateToSitePath(handler.page, { params });\r\n    }\r\n\r\n    /**\r\n     * Open an embedded custom item.\r\n     *\r\n     * @param item Item to open.\r\n     */\r\n    openItem(item: CoreMainMenuCustomItem): void {\r\n        CoreNavigator.navigateToSitePath('viewer/iframe', { params: { title: item.label, url: item.url } });\r\n    }\r\n\r\n    /**\r\n     * Open preferences.\r\n     */\r\n    openPreferences(): void {\r\n        CoreNavigator.navigateToSitePath('preferences');\r\n    }\r\n\r\n    /**\r\n     * Open settings.\r\n     */\r\n    openSettings(): void {\r\n        CoreNavigator.navigateToSitePath('settings');\r\n    }\r\n\r\n    /**\r\n     * Scan and treat a QR code.\r\n     */\r\n    async scanQR(): Promise<void> {\r\n        // Scan for a QR code.\r\n        const text = await CoreUtils.scanQR();\r\n\r\n        if (!text) {\r\n            return;\r\n        }\r\n\r\n        if (CoreCustomURLSchemes.isCustomURL(text)) {\r\n            // Is a custom URL scheme, handle it.\r\n            CoreCustomURLSchemes.handleCustomURL(text).catch((error) => {\r\n                CoreCustomURLSchemes.treatHandleCustomURLError(error);\r\n            });\r\n        } else if (/^[^:]{2,}:\\/\\/[^ ]+$/i.test(text)) { // Check if it's a URL.\r\n            // Check if the app can handle the URL.\r\n            const treated = await CoreContentLinksHelper.handleLink(text, undefined, true, true);\r\n\r\n            if (!treated) {\r\n                // Can't handle it, open it in browser.\r\n                CoreSites.getCurrentSite()?.openInBrowserWithAutoLoginIfSameSite(text);\r\n            }\r\n        } else {\r\n            // It's not a URL, open it in a modal so the user can see it and copy it.\r\n            CoreTextUtils.viewText(Translate.instant('core.qrscanner'), text, {\r\n                displayCopyButton: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logout the user.\r\n     */\r\n    logout(): void {\r\n        this.loggedOut = true;\r\n        CoreSites.logout();\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}