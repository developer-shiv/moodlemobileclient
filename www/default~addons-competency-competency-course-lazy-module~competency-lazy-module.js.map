{"version":3,"sources":["./src/addons/competency/pages/coursecompetencies/coursecompetencies.html","./src/addons/competency/pages/coursecompetencies/coursecompetencies.module.ts","./src/addons/competency/pages/coursecompetencies/coursecompetencies.page.ts"],"names":[],"mappings":"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","file":"default~addons-competency-competency-course-lazy-module~competency-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.competency.coursecompetencies' | translate }}</h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!competenciesLoaded\\\" (ionRefresh)=\\\"refreshCourseCompetencies($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"competenciesLoaded\\\">\\r\\n        <ion-card *ngIf=\\\"!user && competencies && competencies.statistics.competencycount > 0\\\">\\r\\n            <ng-container *ngIf=\\\"competencies.cangradecompetencies\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"competencies.settings.pushratingstouserplans\\\">\\r\\n                    <ion-label>{{ 'addon.competency.coursecompetencyratingsarepushedtouserplans' | translate }}</ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!competencies.settings.pushratingstouserplans\\\" color=\\\"danger\\\">\\r\\n                    <ion-label>{{ 'addon.competency.coursecompetencyratingsarenotpushedtouserplans' | translate }}</ion-label>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"competencies.statistics.canbegradedincourse\\\">\\r\\n                <ion-label>\\r\\n                    <span id=\\\"addon-competency-course-{{courseId}}-progress\\\">\\r\\n                        {{ 'addon.competency.xcompetenciesproficientoutofyincourse' | translate: {$a:\\r\\n                            {x: competencies.statistics.proficientcompetencycount, y: competencies.statistics.competencycount} } }}\\r\\n                    </span>\\r\\n                    <core-progress-bar [progress]=\\\"competencies.statistics.proficientcompetencypercentage\\\"\\r\\n                        ariaDescribedBy=\\\"addon-competency-course-{{courseId}}-progress\\\">\\r\\n                    </core-progress-bar>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\"\\r\\n                *ngIf=\\\"competencies.statistics.canmanagecoursecompetencies && competencies.statistics.leastproficientcount > 0\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">{{ 'addon.competency.competenciesmostoftennotproficientincourse' | translate }}</p>\\r\\n                    <p *ngFor=\\\"let comp of competencies.statistics.leastproficient\\\">\\r\\n                        <button class=\\\"as-link\\\" (click)=\\\"openCompetencySummary(comp.id)\\\">\\r\\n                            {{ comp.shortname }} - {{ comp.idnumber }}\\r\\n                        </button>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <h2 class=\\\"ion-margin-horizontal\\\" *ngIf=\\\"competencies && competencies.statistics.competencycount > 0\\\">\\r\\n            {{ 'addon.competency.coursecompetencies' | translate }}\\r\\n        </h2>\\r\\n        <ion-card *ngIf=\\\"user\\\">\\r\\n             <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <core-user-avatar [user]=\\\"user\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n               <ion-label><h2>{{ user.fullname }}</h2></ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n        <core-empty-box *ngIf=\\\"competencies && competencies.statistics.competencycount == 0\\\"\\r\\n            icon=\\\"fas-award\\\" message=\\\"{{ 'addon.competency.nocompetenciesincourse' | translate }}\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <div *ngIf=\\\"competencies\\\">\\r\\n            <ion-card *ngFor=\\\"let competency of competencies.competencies\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" (click)=\\\"openCompetency(competency.competency.id)\\\"\\r\\n                    [attr.aria-label]=\\\"competency.competency.shortname\\\" detail=\\\"true\\\" button>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">\\r\\n                            {{competency.competency.shortname}} <em>{{competency.competency.idnumber}}</em>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"competency.usercompetencycourse && competency.usercompetencycourse.gradename\\\"\\r\\n                        [color]=\\\"competency.usercompetencycourse.proficiency ? 'success' : 'danger'\\\">\\r\\n                        {{ competency.usercompetencycourse.gradename }}\\r\\n                    </ion-badge>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p *ngIf=\\\"competency.competency.description\\\">\\r\\n                            <core-format-text [text]=\\\"competency.competency.description\\\" contextLevel=\\\"course\\\"\\r\\n                                [contextInstanceId]=\\\"courseId\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                        <div>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.path' | translate }}</p>\\r\\n                            <p>\\r\\n                                <a *ngIf=\\\"competency.comppath.showlinks\\\"\\r\\n                                    [href]=\\\"competency.comppath.pluginbaseurl + '/competencies.php?competencyframeworkid=' +\\r\\n                                    competency.comppath.framework.id + '&pagecontextid=' + competency.comppath.pagecontextid\\\"\\r\\n                                    core-link [title]=\\\"competency.comppath.framework.name\\\">\\r\\n                                    {{ competency.comppath.framework.name }}\\r\\n                                </a>\\r\\n                                <ng-container *ngIf=\\\"!competency.comppath.showlinks\\\">\\r\\n                                    {{ competency.comppath.framework.name }}\\r\\n                                </ng-container>\\r\\n                                &nbsp;/&nbsp;\\r\\n                                <ng-container *ngFor=\\\"let ancestor of competency.comppath.ancestors\\\">\\r\\n                                    <button class=\\\"as-link\\\" *ngIf=\\\"competency.comppath.showlinks\\\"\\r\\n                                        (click)=\\\"openCompetencySummary(ancestor.id)\\\">\\r\\n                                        {{ ancestor.name }}\\r\\n                                    </button>\\r\\n                                    <ng-container *ngIf=\\\"!competency.comppath.showlinks\\\">{{ ancestor.name }}</ng-container>\\r\\n                                    <ng-container *ngIf=\\\"!ancestor.last\\\">&nbsp;/&nbsp;</ng-container>\\r\\n                                </ng-container>\\r\\n                            </p>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"competencies.statistics.canmanagecoursecompetencies\\\">\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.uponcoursecompletion' | translate }}</p>\\r\\n                             <ng-container *ngFor=\\\"let ruleoutcome of competency.ruleoutcomeoptions\\\">\\r\\n                                <span *ngIf=\\\"ruleoutcome.selected\\\">{{ ruleoutcome.text }}</span>\\r\\n                            </ng-container>\\r\\n                        </div>\\r\\n                        <div>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.activities' | translate }}</p>\\r\\n                            <p *ngIf=\\\"competency.coursemodules.length == 0\\\">\\r\\n                                {{ 'addon.competency.noactivities' | translate }}\\r\\n                            </p>\\r\\n                            <ion-item class=\\\"ion-text-wrap core-course-module-handler item-media\\\" [attr.aria-label]=\\\"activity.name\\\"\\r\\n                                core-link *ngFor=\\\"let activity of competency.coursemodules\\\" [href]=\\\"activity.url\\\" capture=\\\"true\\\">\\r\\n                                <img slot=\\\"start\\\" [src]=\\\"activity.iconurl\\\" core-external-content alt=\\\"\\\"\\r\\n                                    *ngIf=\\\"activity.iconurl\\\" class=\\\"core-module-icon\\\">\\r\\n                                <ion-label>\\r\\n                                    <core-format-text [text]=\\\"activity.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"activity.id\\\"\\r\\n                                        [courseId]=\\\"courseId\\\">\\r\\n                                    </core-format-text>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"competency.plans\\\">\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.userplans' | translate }}</p>\\r\\n                            <p *ngIf=\\\"competency.plans.length == 0\\\">\\r\\n                                {{ 'addon.competency.nouserplanswithcompetency' | translate }}\\r\\n                            </p>\\r\\n                            <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let plan of competency.plans\\\" [href]=\\\"plan.url\\\"\\r\\n                                [attr.aria-label]=\\\"plan.name\\\" core-link capture=\\\"true\\\">\\r\\n                                <ion-label>\\r\\n                                   <core-format-text [text]=\\\"plan.name\\\" contextLevel=\\\"user\\\" [contextInstanceId]=\\\"plan.userid\\\">\\r\\n                                   </core-format-text>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </div>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-card>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonCompetencyCourseCompetenciesPage } from './coursecompetencies.page';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonCompetencyCourseCompetenciesPage,\r\n    ],\r\n})\r\nexport class AddonCompetencyCourseCompetenciesPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AddonCompetencyDataForCourseCompetenciesPageWSResponse, AddonCompetency } from '@addons/competency/services/competency';\r\nimport { AddonCompetencyHelper } from '@addons/competency/services/competency-helper';\r\nimport { CoreUserProfile } from '@features/user/services/user';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { AddonCompetencyMainMenuHandlerService } from '@addons/competency/services/handlers/mainmenu';\r\nimport { ContextLevel } from '@/core/constants';\r\n\r\n/**\r\n * Page that displays the list of competencies of a course.\r\n */\r\n@Component({\r\n    selector: 'page-addon-competency-coursecompetencies',\r\n    templateUrl: 'coursecompetencies.html',\r\n})\r\nexport class AddonCompetencyCourseCompetenciesPage implements OnInit {\r\n\r\n    competenciesLoaded = false;\r\n    competencies?: AddonCompetencyDataForCourseCompetenciesPageWSResponse;\r\n    user?: CoreUserProfile;\r\n    courseId!: number;\r\n\r\n    protected userId!: number;\r\n\r\n    /**\r\n     * View loaded.\r\n     */\r\n    ngOnInit(): void {\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.userId = CoreNavigator.getRouteNumberParam('userId')!;\r\n\r\n        this.fetchCourseCompetencies().finally(() => {\r\n            this.competenciesLoaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetches the competencies and updates the view.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchCourseCompetencies(): Promise<void> {\r\n        try {\r\n            this.competencies = await AddonCompetency.getCourseCompetencies(this.courseId, this.userId);\r\n\r\n            // Get the user profile image.\r\n            this.user = await AddonCompetencyHelper.getProfile(this.userId);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting course competencies data.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens a competency.\r\n     *\r\n     * @param competencyId\r\n     */\r\n    openCompetency(competencyId: number): void {\r\n        CoreNavigator.navigateToSitePath(\r\n            '/' + AddonCompetencyMainMenuHandlerService.PAGE_NAME + '/competencies/' + competencyId,\r\n            {\r\n                params: { courseId: this.courseId, userId: this.userId },\r\n            },\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Opens the summary of a competency.\r\n     *\r\n     * @param competencyId\r\n     */\r\n    openCompetencySummary(competencyId: number): void {\r\n        CoreNavigator.navigateToSitePath('/' + AddonCompetencyMainMenuHandlerService.PAGE_NAME + '/summary/' + competencyId, {\r\n            params: {\r\n                contextLevel: ContextLevel.COURSE,\r\n                contextInstanceId: this.courseId,\r\n            } });\r\n    }\r\n\r\n    /**\r\n     * Refreshes the competencies.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    refreshCourseCompetencies(refresher?: IonRefresher): void {\r\n        AddonCompetency.invalidateCourseCompetencies(this.courseId, this.userId).finally(() => {\r\n            this.fetchCourseCompetencies().finally(() => {\r\n                refresher?.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}