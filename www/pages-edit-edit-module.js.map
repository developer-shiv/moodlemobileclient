{"version":3,"sources":["./src/addons/mod/glossary/pages/edit/edit.html","./src/addons/mod/glossary/pages/edit/edit.module.ts","./src/addons/mod/glossary/pages/edit/edit.ts"],"names":[],"mappings":"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","file":"pages-edit-edit-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1 *ngIf=\\\"glossary\\\">\\r\\n            <core-format-text [text]=\\\"glossary.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <form #editFormEl *ngIf=\\\"glossary\\\">\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_glossary.concept' | translate }}</ion-label>\\r\\n                <ion-input type=\\\"text\\\" [placeholder]=\\\"'addon.mod_glossary.concept' | translate\\\" [(ngModel)]=\\\"entry.concept\\\"\\r\\n                    name=\\\"concept\\\">\\r\\n                </ion-input>\\r\\n            </ion-item>\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_glossary.definition' | translate }}</ion-label>\\r\\n                <core-rich-text-editor [control]=\\\"definitionControl\\\" (contentChanged)=\\\"onDefinitionChange($event)\\\"\\r\\n                    [placeholder]=\\\"'addon.mod_glossary.definition' | translate\\\" name=\\\"addon_mod_glossary_edit\\\"\\r\\n                    [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [autoSave]=\\\"true\\\" contextLevel=\\\"module\\\"\\r\\n                    [contextInstanceId]=\\\"cmId\\\" elementId=\\\"definition_editor\\\" [draftExtraParams]=\\\"editorExtraParams\\\">\\r\\n                </core-rich-text-editor>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"categories.length > 0\\\">\\r\\n                <ion-label position=\\\"stacked\\\" id=\\\"addon-mod-glossary-categories-label\\\">\\r\\n                    {{ 'addon.mod_glossary.categories' | translate }}\\r\\n                </ion-label>\\r\\n                <ion-select [(ngModel)]=\\\"options.categories\\\" multiple=\\\"true\\\" aria-labelledby=\\\"addon-mod-glossary-categories-label\\\"\\r\\n                    interface=\\\"action-sheet\\\" [placeholder]=\\\"'addon.mod_glossary.categories' | translate\\\" name=\\\"categories\\\"\\r\\n                    [interfaceOptions]=\\\"{header: 'addon.mod_glossary.categories' | translate}\\\">\\r\\n                    <ion-select-option *ngFor=\\\"let category of categories\\\" [value]=\\\"category.id\\\">\\r\\n                        {{ category.name }}\\r\\n                    </ion-select-option>\\r\\n                </ion-select>\\r\\n            </ion-item>\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\" id=\\\"addon-mod-glossary-aliases-label\\\">\\r\\n                    {{ 'addon.mod_glossary.aliases' | translate }}\\r\\n                </ion-label>\\r\\n                <ion-textarea [(ngModel)]=\\\"options.aliases\\\" rows=\\\"1\\\" [core-auto-rows]=\\\"options.aliases\\\"\\r\\n                    aria-labelledby=\\\"addon-mod-glossary-aliases-label\\\" name=\\\"aliases\\\">\\r\\n                </ion-textarea>\\r\\n            </ion-item>\\r\\n            <ion-item-divider>\\r\\n                <ion-label><h2>{{ 'addon.mod_glossary.attachment' | translate }}</h2></ion-label>\\r\\n            </ion-item-divider>\\r\\n            <core-attachments [files]=\\\"attachments\\\" [component]=\\\"component\\\" [componentId]=\\\"glossary.coursemodule\\\"\\r\\n                [allowOffline]=\\\"true\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-attachments>\\r\\n            <ng-container *ngIf=\\\"glossary.usedynalink\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label><h2>{{ 'addon.mod_glossary.linking' | translate }}</h2></ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.entryusedynalink' | translate }}</ion-label>\\r\\n                    <ion-toggle [(ngModel)]=\\\"options.usedynalink\\\" name=\\\"usedynalink\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.casesensitive' | translate }}</ion-label>\\r\\n                    <ion-toggle [disabled]=\\\"!options.usedynalink\\\" [(ngModel)]=\\\"options.casesensitive\\\" name=\\\"casesensitive\\\">\\r\\n                    </ion-toggle>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.fullmatch' | translate }}</ion-label>\\r\\n                    <ion-toggle [disabled]=\\\"!options.usedynalink\\\" [(ngModel)]=\\\"options.fullmatch\\\" name=\\\"fullmatch\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n            <ion-button class=\\\"ion-margin\\\" expand=\\\"block\\\" [disabled]=\\\"!entry.concept || !entry.definition\\\" (click)=\\\"save()\\\">\\r\\n                {{ 'core.save' | translate }}\\r\\n            </ion-button>\\r\\n        </form>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { AddonModGlossaryEditPage } from './edit';\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreEditorComponentsModule } from '@features/editor/components/components.module';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CanLeaveGuard } from '@guards/can-leave';\r\n\r\nconst routes: Routes = [{\r\n    path: '',\r\n    component: AddonModGlossaryEditPage,\r\n    canDeactivate: [CanLeaveGuard],\r\n}];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModGlossaryEditPage,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreEditorComponentsModule,\r\n    ],\r\n})\r\nexport class AddonModGlossaryEditPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, ViewChild, ElementRef, Optional } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { CoreError } from '@classes/errors/error';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\r\nimport { CanLeave } from '@guards/can-leave';\r\nimport { FileEntry } from '@ionic-native/file/ngx';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreTextUtils } from '@services/utils/text';\r\nimport { Translate } from '@singletons';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport { CoreForms } from '@singletons/form';\r\nimport {\r\n    AddonModGlossary,\r\n    AddonModGlossaryCategory,\r\n    AddonModGlossaryEntryOption,\r\n    AddonModGlossaryGlossary,\r\n    AddonModGlossaryNewEntry,\r\n    AddonModGlossaryNewEntryWithFiles,\r\n    AddonModGlossaryProvider,\r\n} from '../../services/glossary';\r\nimport { AddonModGlossaryHelper } from '../../services/glossary-helper';\r\nimport { AddonModGlossaryOffline } from '../../services/glossary-offline';\r\n\r\n/**\r\n * Page that displays the edit form.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-glossary-edit',\r\n    templateUrl: 'edit.html',\r\n})\r\nexport class AddonModGlossaryEditPage implements OnInit, CanLeave {\r\n\r\n    @ViewChild('editFormEl') formElement?: ElementRef;\r\n\r\n    component = AddonModGlossaryProvider.COMPONENT;\r\n    cmId!: number;\r\n    courseId!: number;\r\n    loaded = false;\r\n    glossary?: AddonModGlossaryGlossary;\r\n    attachments: FileEntry[] = [];\r\n    definitionControl = new FormControl();\r\n    categories: AddonModGlossaryCategory[] = [];\r\n    editorExtraParams: Record<string, unknown> = {};\r\n    entry: AddonModGlossaryNewEntry = {\r\n        concept: '',\r\n        definition: '',\r\n        timecreated: 0,\r\n    };\r\n\r\n    options = {\r\n        categories: <string[]> [],\r\n        aliases: '',\r\n        usedynalink: false,\r\n        casesensitive: false,\r\n        fullmatch: false,\r\n    };\r\n\r\n    protected timecreated!: number;\r\n    protected concept?: string;\r\n    protected syncId?: string;\r\n    protected syncObserver?: CoreEventObserver;\r\n    protected isDestroyed = false;\r\n    protected originalData?: AddonModGlossaryNewEntryWithFiles;\r\n    protected saved = false;\r\n\r\n    constructor(@Optional() protected splitView: CoreSplitViewComponent) {}\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.timecreated = CoreNavigator.getRouteNumberParam('timecreated')!;\r\n        this.concept = CoreNavigator.getRouteParam<string>('concept')!;\r\n        this.editorExtraParams.timecreated = this.timecreated;\r\n\r\n        this.fetchData();\r\n    }\r\n\r\n    /**\r\n     * Fetch required data.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchData(): Promise<void> {\r\n        try {\r\n            this.glossary = await AddonModGlossary.getGlossary(this.courseId, this.cmId);\r\n\r\n            if (this.timecreated > 0) {\r\n                await this.loadOfflineData();\r\n            }\r\n\r\n            this.categories = await AddonModGlossary.getAllCategories(this.glossary.id, {\r\n                cmId: this.cmId,\r\n            });\r\n\r\n            this.loaded = true;\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingglossary', true);\r\n\r\n            CoreNavigator.back();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load offline data when editing an offline entry.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async loadOfflineData(): Promise<void> {\r\n        const entry = await AddonModGlossaryOffline.getNewEntry(this.glossary!.id, this.concept || '', this.timecreated);\r\n\r\n        this.entry.concept = entry.concept || '';\r\n        this.entry.definition = entry.definition || '';\r\n        this.entry.timecreated = entry.timecreated;\r\n\r\n        this.originalData = {\r\n            concept: this.entry.concept,\r\n            definition: this.entry.definition,\r\n            files: [],\r\n            timecreated: entry.timecreated,\r\n        };\r\n\r\n        if (entry.options) {\r\n            this.options.categories = (entry.options.categories && (<string> entry.options.categories).split(',')) || [];\r\n            this.options.aliases = <string> entry.options.aliases || '';\r\n            this.options.usedynalink = !!entry.options.usedynalink;\r\n            if (this.options.usedynalink) {\r\n                this.options.casesensitive = !!entry.options.casesensitive;\r\n                this.options.fullmatch = !!entry.options.fullmatch;\r\n            }\r\n        }\r\n\r\n        // Treat offline attachments if any.\r\n        if (entry.attachments?.offline) {\r\n            this.attachments = await AddonModGlossaryHelper.getStoredFiles(this.glossary!.id, entry.concept, entry.timecreated);\r\n\r\n            this.originalData.files = this.attachments.slice();\r\n        }\r\n\r\n        this.definitionControl.setValue(this.entry.definition);\r\n    }\r\n\r\n    /**\r\n     * Reset the form data.\r\n     */\r\n    protected resetForm(): void {\r\n        this.entry.concept = '';\r\n        this.entry.definition = '';\r\n        this.entry.timecreated = 0;\r\n        this.originalData = undefined;\r\n\r\n        this.options.categories = [];\r\n        this.options.aliases = '';\r\n        this.options.usedynalink = false;\r\n        this.options.casesensitive = false;\r\n        this.options.fullmatch = false;\r\n        this.attachments.length = 0; // Empty the array.\r\n\r\n        this.definitionControl.setValue('');\r\n    }\r\n\r\n    /**\r\n     * Definition changed.\r\n     *\r\n     * @param text The new text.\r\n     */\r\n    onDefinitionChange(text: string): void {\r\n        this.entry.definition = text;\r\n    }\r\n\r\n    /**\r\n     * Check if we can leave the page or not.\r\n     *\r\n     * @return Resolved if we can leave it, rejected if not.\r\n     */\r\n    async canLeave(): Promise<boolean> {\r\n        if (this.saved) {\r\n            return true;\r\n        }\r\n\r\n        if (AddonModGlossaryHelper.hasEntryDataChanged(this.entry, this.attachments, this.originalData)) {\r\n            // Show confirmation if some data has been modified.\r\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\r\n        }\r\n\r\n        // Delete the local files from the tmp folder.\r\n        CoreFileUploader.clearTmpFiles(this.attachments);\r\n\r\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Save the entry.\r\n     */\r\n    async save(): Promise<void> {\r\n        let definition = this.entry.definition;\r\n        let entryId: number | undefined;\r\n        const timecreated = this.entry.timecreated || Date.now();\r\n\r\n        if (!this.entry.concept || !definition) {\r\n            CoreDomUtils.showErrorModal('addon.mod_glossary.fillfields', true);\r\n\r\n            return;\r\n        }\r\n\r\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\r\n        definition = CoreTextUtils.formatHtmlLines(definition);\r\n\r\n        try {\r\n            // Upload attachments first if any.\r\n            const { saveOffline, attachmentsResult } = await this.uploadAttachments(timecreated);\r\n\r\n            const options: Record<string, AddonModGlossaryEntryOption> = {\r\n                aliases: this.options.aliases,\r\n                categories: this.options.categories.join(','),\r\n            };\r\n\r\n            if (this.glossary!.usedynalink) {\r\n                options.usedynalink = this.options.usedynalink ? 1 : 0;\r\n                if (this.options.usedynalink) {\r\n                    options.casesensitive = this.options.casesensitive ? 1 : 0;\r\n                    options.fullmatch = this.options.fullmatch ? 1 : 0;\r\n                }\r\n            }\r\n\r\n            if (saveOffline) {\r\n                if (this.entry && !this.glossary!.allowduplicatedentries) {\r\n                    // Check if the entry is duplicated in online or offline mode.\r\n                    const isUsed = await AddonModGlossary.isConceptUsed(this.glossary!.id, this.entry.concept, {\r\n                        timeCreated: this.entry.timecreated,\r\n                        cmId: this.cmId,\r\n                    });\r\n\r\n                    if (isUsed) {\r\n                        // There's a entry with same name, reject with error message.\r\n                        throw new CoreError(Translate.instant('addon.mod_glossary.errconceptalreadyexists'));\r\n                    }\r\n                }\r\n\r\n                // Save entry in offline.\r\n                await AddonModGlossaryOffline.addNewEntry(\r\n                    this.glossary!.id,\r\n                    this.entry.concept,\r\n                    definition,\r\n                    this.courseId,\r\n                    options,\r\n                    <CoreFileUploaderStoreFilesResult> attachmentsResult,\r\n                    timecreated,\r\n                    undefined,\r\n                    undefined,\r\n                    this.entry,\r\n                );\r\n            } else {\r\n                // Try to send it to server.\r\n                // Don't allow offline if there are attachments since they were uploaded fine.\r\n                await AddonModGlossary.addEntry(\r\n                    this.glossary!.id,\r\n                    this.entry.concept,\r\n                    definition,\r\n                    this.courseId,\r\n                    options,\r\n                    attachmentsResult,\r\n                    {\r\n                        timeCreated: timecreated,\r\n                        discardEntry: this.entry,\r\n                        allowOffline: !this.attachments.length,\r\n                        checkDuplicates: !this.glossary!.allowduplicatedentries,\r\n                    },\r\n                );\r\n            }\r\n\r\n            // Delete the local files from the tmp folder.\r\n            CoreFileUploader.clearTmpFiles(this.attachments);\r\n\r\n            if (entryId) {\r\n                // Data sent to server, delete stored files (if any).\r\n                AddonModGlossaryHelper.deleteStoredFiles(this.glossary!.id, this.entry.concept, timecreated);\r\n                CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'glossary' });\r\n            }\r\n\r\n            CoreEvents.trigger(AddonModGlossaryProvider.ADD_ENTRY_EVENT, {\r\n                glossaryId: this.glossary!.id,\r\n                entryId: entryId,\r\n            }, CoreSites.getCurrentSiteId());\r\n\r\n            CoreForms.triggerFormSubmittedEvent(this.formElement, !!entryId, CoreSites.getCurrentSiteId());\r\n\r\n            if (this.splitView?.outletActivated) {\r\n                if (this.timecreated > 0) {\r\n                    // Reload the data.\r\n                    await this.loadOfflineData();\r\n                } else {\r\n                    // Empty form.\r\n                    this.resetForm();\r\n                }\r\n            } else {\r\n                this.saved = true;\r\n                CoreNavigator.back();\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.cannoteditentry', true);\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Upload entry attachments if any.\r\n     *\r\n     * @param timecreated Entry's timecreated.\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async uploadAttachments(\r\n        timecreated: number,\r\n    ): Promise<{saveOffline: boolean; attachmentsResult?: number | CoreFileUploaderStoreFilesResult}> {\r\n        if (!this.attachments.length) {\r\n            return {\r\n                saveOffline: false,\r\n            };\r\n        }\r\n\r\n        try {\r\n            const attachmentsResult = await CoreFileUploader.uploadOrReuploadFiles(\r\n                this.attachments,\r\n                AddonModGlossaryProvider.COMPONENT,\r\n                this.glossary!.id,\r\n            );\r\n\r\n            return {\r\n                saveOffline: false,\r\n                attachmentsResult,\r\n            };\r\n        } catch {\r\n            // Cannot upload them in online, save them in offline.\r\n            const attachmentsResult = await AddonModGlossaryHelper.storeFiles(\r\n                this.glossary!.id,\r\n                this.entry.concept,\r\n                timecreated,\r\n                this.attachments,\r\n            );\r\n\r\n            return {\r\n                saveOffline: true,\r\n                attachmentsResult,\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}