{"version":3,"sources":["./src/core/features/login/pages/credentials/credentials.html","./src/core/features/login/pages/credentials/credentials.module.ts","./src/core/features/login/pages/credentials/credentials.ts"],"names":[],"mappings":"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","file":"pages-credentials-credentials-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <h1>{{ 'core.login.login' | translate }}</h1>\\r\\n\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"openSettings()\\\" [attr.aria-label]=\\\"'core.settings.appsettings' | translate\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"fas-cog\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"ion-padding\\\">\\r\\n    <core-loading [hideUntil]=\\\"pageLoaded\\\">\\r\\n        <div class=\\\"ion-text-wrap ion-text-center ion-margin-bottom\\\">\\r\\n            <div class=\\\"core-login-site-logo\\\">\\r\\n                <!-- Show site logo or a default image. -->\\r\\n                <img *ngIf=\\\"logoUrl\\\" [src]=\\\"logoUrl\\\" role=\\\"presentation\\\" alt=\\\"\\\" onError=\\\"this.src='assets/img/login_logo.png'\\\">\\r\\n                <img *ngIf=\\\"!logoUrl\\\" src=\\\"assets/img/login_logo.png\\\" role=\\\"presentation\\\" alt=\\\"\\\">\\r\\n            </div>\\r\\n\\r\\n            <h3 *ngIf=\\\"siteName\\\" class=\\\"ion-padding core-sitename\\\">\\r\\n                <core-format-text [text]=\\\"siteName\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n            </h3>\\r\\n            <p class=\\\"core-siteurl\\\">{{siteUrl}}</p>\\r\\n        </div>\\r\\n\\r\\n        <form [formGroup]=\\\"credForm\\\" (ngSubmit)=\\\"login($event)\\\" class=\\\"core-login-form\\\" #credentialsForm>\\r\\n            <ion-item *ngIf=\\\"siteChecked && !isBrowserSSO\\\">\\r\\n                <ion-label class=\\\"sr-only\\\">{{ 'core.login.username' | translate }}</ion-label>\\r\\n                <ion-input type=\\\"text\\\" name=\\\"username\\\" placeholder=\\\"{{ 'core.login.username' | translate }}\\\"\\r\\n                    formControlName=\\\"username\\\" autocapitalize=\\\"none\\\" autocorrect=\\\"off\\\" autocomplete=\\\"username\\\" enterkeyhint=\\\"next\\\"\\r\\n                    required=\\\"true\\\">\\r\\n                </ion-input>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"siteChecked && !isBrowserSSO\\\" class=\\\"ion-margin-bottom\\\">\\r\\n                <ion-label class=\\\"sr-only\\\">{{ 'core.login.password' | translate }}</ion-label>\\r\\n                <core-show-password name=\\\"password\\\">\\r\\n                    <ion-input name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"{{ 'core.login.password' | translate }}\\\"\\r\\n                        formControlName=\\\"password\\\" [clearOnEdit]=\\\"false\\\" autocomplete=\\\"current-password\\\" enterkeyhint=\\\"go\\\"\\r\\n                        required=\\\"true\\\">\\r\\n                    </ion-input>\\r\\n                </core-show-password>\\r\\n            </ion-item>\\r\\n            <ion-button expand=\\\"block\\\" type=\\\"submit\\\" [disabled]=\\\"siteChecked && !isBrowserSSO && !credForm.valid\\\"\\r\\n                class=\\\"ion-margin core-login-login-button\\\">\\r\\n                {{ 'core.login.loginbutton' | translate }}\\r\\n            </ion-button>\\r\\n             <!-- Remove this once Ionic fixes this bug: https://github.com/ionic-team/ionic-framework/issues/19368 -->\\r\\n            <input type=\\\"submit\\\" class=\\\"core-submit-hidden-enter\\\" />\\r\\n\\r\\n            <ng-container *ngIf=\\\"showScanQR\\\">\\r\\n                <div class=\\\"ion-text-center ion-padding\\\">{{ 'core.login.or' | translate }}</div>\\r\\n                <ion-button expand=\\\"block\\\" color=\\\"light\\\" class=\\\"ion-margin\\\" lines=\\\"none\\\" (click)=\\\"showInstructionsAndScanQR()\\\">\\r\\n                    <ion-icon slot=\\\"start\\\" name=\\\"fas-qrcode\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label>{{ 'core.scanqr' | translate }}</ion-label>\\r\\n                </ion-button>\\r\\n            </ng-container>\\r\\n        </form>\\r\\n\\r\\n        <!-- Forgotten password option. -->\\r\\n        <ion-button\\r\\n            *ngIf=\\\"showForgottenPassword\\\"\\r\\n            expand=\\\"block\\\"\\r\\n            fill=\\\"clear\\\"\\r\\n            color=\\\"dark\\\"\\r\\n            class=\\\"core-login-forgotten-password core-button-as-link ion-text-wrap\\\"\\r\\n            (click)=\\\"forgottenPassword()\\\"\\r\\n        >\\r\\n            <ion-label>{{ 'core.login.forgotten' | translate }}</ion-label>\\r\\n        </ion-button>\\r\\n\\r\\n        <ion-list *ngIf=\\\"identityProviders && identityProviders.length\\\" class=\\\"ion-padding-top core-login-identity-providers\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\r\\n                <ion-label><h3 class=\\\"item-heading\\\">{{ 'core.login.potentialidps' | translate }}</h3></ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item button *ngFor=\\\"let provider of identityProviders\\\" class=\\\"ion-text-wrap core-oauth-icon\\\"\\r\\n                (click)=\\\"oauthClicked(provider)\\\" [attr.aria-label]=\\\"provider.name\\\" detail=\\\"false\\\">\\r\\n                <img [src]=\\\"provider.iconurl\\\" alt=\\\"\\\" width=\\\"32\\\" height=\\\"32\\\" slot=\\\"start\\\">\\r\\n                <ion-label>{{provider.name}}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n\\r\\n        <ion-list *ngIf=\\\"canSignup\\\" class=\\\"ion-padding-top core-login-sign-up\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\r\\n                <ion-label><h3 class=\\\"item-heading\\\">{{ 'core.login.firsttime' | translate }}</h3></ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\" *ngIf=\\\"authInstructions\\\">\\r\\n                <ion-label><p><core-format-text [text]=\\\"authInstructions\\\" [filter]=\\\"false\\\"></core-format-text></p></ion-label>\\r\\n            </ion-item>\\r\\n            <ion-button expand=\\\"block\\\" class=\\\"ion-margin ion-text-wrap\\\" color=\\\"light\\\" (click)=\\\"openEmailSignup()\\\">\\r\\n                {{ 'core.login.startsignup' | translate }}\\r\\n            </ion-button>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreLoginCredentialsPage } from './credentials';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreLoginCredentialsPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        CoreLoginCredentialsPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreLoginCredentialsPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { CoreApp } from '@services/app';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\r\nimport { CoreConstants } from '@/core/constants';\r\nimport { Translate } from '@singletons';\r\nimport { CoreSiteIdentityProvider, CoreSitePublicConfigResponse } from '@classes/site';\r\nimport { CoreEvents } from '@singletons/events';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreForms } from '@singletons/form';\r\n\r\n/**\r\n * Page to enter the user credentials.\r\n */\r\n@Component({\r\n    selector: 'page-core-login-credentials',\r\n    templateUrl: 'credentials.html',\r\n    styleUrls: ['../../login.scss'],\r\n})\r\nexport class CoreLoginCredentialsPage implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('credentialsForm') formElement?: ElementRef<HTMLFormElement>;\r\n\r\n    credForm!: FormGroup;\r\n    siteUrl!: string;\r\n    siteChecked = false;\r\n    siteName?: string;\r\n    logoUrl?: string;\r\n    authInstructions?: string;\r\n    canSignup?: boolean;\r\n    identityProviders?: CoreSiteIdentityProvider[];\r\n    pageLoaded = false;\r\n    isBrowserSSO = false;\r\n    isFixedUrlSet = false;\r\n    showForgottenPassword = true;\r\n    showScanQR = false;\r\n\r\n    protected siteConfig?: CoreSitePublicConfigResponse;\r\n    protected eventThrown = false;\r\n    protected viewLeft = false;\r\n    protected siteId?: string;\r\n    protected urlToOpen?: string;\r\n    protected valueChangeSubscription?: Subscription;\r\n\r\n    constructor(\r\n        protected fb: FormBuilder,\r\n    ) {}\r\n\r\n    /**\r\n     * Initialize the component.\r\n     */\r\n    ngOnInit(): void {\r\n        const siteUrl = CoreNavigator.getRouteParam<string>('siteUrl');\r\n        if (!siteUrl) {\r\n            CoreDomUtils.showErrorModal('Site URL not supplied.');\r\n            CoreNavigator.back();\r\n\r\n            return;\r\n        }\r\n\r\n        this.siteUrl = siteUrl;\r\n        this.siteName = CoreNavigator.getRouteParam('siteName');\r\n        this.logoUrl = !CoreConstants.CONFIG.forceLoginLogo && CoreNavigator.getRouteParam('logoUrl') || undefined;\r\n        this.siteConfig = CoreNavigator.getRouteParam('siteConfig');\r\n        this.urlToOpen = CoreNavigator.getRouteParam('urlToOpen');\r\n        this.showScanQR = CoreLoginHelper.displayQRInCredentialsScreen();\r\n\r\n        this.credForm = this.fb.group({\r\n            username: [CoreNavigator.getRouteParam<string>('username') || '', Validators.required],\r\n            password: ['', Validators.required],\r\n        });\r\n\r\n        this.treatSiteConfig();\r\n        this.isFixedUrlSet = CoreLoginHelper.isFixedUrlSet();\r\n\r\n        if (this.isFixedUrlSet) {\r\n            // Fixed URL, we need to check if it uses browser SSO login.\r\n            this.checkSite(this.siteUrl);\r\n        } else {\r\n            this.siteChecked = true;\r\n            this.pageLoaded = true;\r\n        }\r\n\r\n        if (CoreApp.isIOS()) {\r\n            // Make iOS auto-fill work. The field that isn't focused doesn't get updated, do it manually.\r\n            // Debounce it to prevent triggering this function too often when the user is typing.\r\n            this.valueChangeSubscription = this.credForm.valueChanges.pipe(debounceTime(1000)).subscribe((changes) => {\r\n                if (!this.formElement || !this.formElement.nativeElement) {\r\n                    return;\r\n                }\r\n\r\n                const usernameInput = this.formElement.nativeElement.querySelector<HTMLInputElement>('input[name=\"username\"]');\r\n                const passwordInput = this.formElement.nativeElement.querySelector<HTMLInputElement>('input[name=\"password\"]');\r\n                const usernameValue = usernameInput?.value;\r\n                const passwordValue = passwordInput?.value;\r\n\r\n                if (usernameValue !== undefined && usernameValue !== changes.username) {\r\n                    this.credForm.get('username')?.setValue(usernameValue);\r\n                }\r\n                if (passwordValue !== undefined && passwordValue !== changes.password) {\r\n                    this.credForm.get('password')?.setValue(passwordValue);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a site uses local_mobile, requires SSO login, etc.\r\n     * This should be used only if a fixed URL is set, otherwise this check is already performed in CoreLoginSitePage.\r\n     *\r\n     * @param siteUrl Site URL to check.\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async checkSite(siteUrl: string): Promise<void> {\r\n        this.pageLoaded = false;\r\n\r\n        // If the site is configured with http:// protocol we force that one, otherwise we use default mode.\r\n        const protocol = siteUrl.indexOf('http://') === 0 ? 'http://' : undefined;\r\n\r\n        try {\r\n            const result = await CoreSites.checkSite(siteUrl, protocol);\r\n\r\n            this.siteChecked = true;\r\n            this.siteUrl = result.siteUrl;\r\n\r\n            this.siteConfig = result.config;\r\n            this.treatSiteConfig();\r\n\r\n            if (result && result.warning) {\r\n                CoreDomUtils.showErrorModal(result.warning, true, 4000);\r\n            }\r\n\r\n            if (CoreLoginHelper.isSSOLoginNeeded(result.code)) {\r\n                // SSO. User needs to authenticate in a browser.\r\n                this.isBrowserSSO = true;\r\n\r\n                // Check that there's no SSO authentication ongoing and the view hasn't changed.\r\n                if (!CoreApp.isSSOAuthenticationOngoing() && !this.viewLeft) {\r\n                    CoreLoginHelper.confirmAndOpenBrowserForSSOLogin(\r\n                        result.siteUrl,\r\n                        result.code,\r\n                        result.service,\r\n                        result.config?.launchurl,\r\n                    );\r\n                }\r\n            } else {\r\n                this.isBrowserSSO = false;\r\n            }\r\n\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            this.pageLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Treat the site configuration (if it exists).\r\n     */\r\n    protected treatSiteConfig(): void {\r\n        if (this.siteConfig) {\r\n            this.siteName = CoreConstants.CONFIG.sitename ? CoreConstants.CONFIG.sitename : this.siteConfig.sitename;\r\n            this.logoUrl = CoreLoginHelper.getLogoUrl(this.siteConfig);\r\n            this.authInstructions = this.siteConfig.authinstructions || Translate.instant('core.login.loginsteps');\r\n\r\n            const disabledFeatures = CoreLoginHelper.getDisabledFeatures(this.siteConfig);\r\n            this.identityProviders = CoreLoginHelper.getValidIdentityProviders(this.siteConfig, disabledFeatures);\r\n            this.canSignup = this.siteConfig.registerauth == 'email' &&\r\n                    !CoreLoginHelper.isEmailSignupDisabled(this.siteConfig, disabledFeatures);\r\n            this.showForgottenPassword = !CoreLoginHelper.isForgottenPasswordDisabled(this.siteConfig, disabledFeatures);\r\n\r\n            if (!this.eventThrown && !this.viewLeft) {\r\n                this.eventThrown = true;\r\n                CoreEvents.trigger(CoreEvents.LOGIN_SITE_CHECKED, { config: this.siteConfig });\r\n            }\r\n        } else {\r\n            this.authInstructions = undefined;\r\n            this.canSignup = false;\r\n            this.identityProviders = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tries to authenticate the user.\r\n     *\r\n     * @param e Event.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async login(e?: Event): Promise<void> {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        }\r\n\r\n        CoreApp.closeKeyboard();\r\n\r\n        // Get input data.\r\n        const siteUrl = this.siteUrl;\r\n        const username = this.credForm.value.username;\r\n        const password = this.credForm.value.password;\r\n\r\n        if (!this.siteChecked || this.isBrowserSSO) {\r\n            // Site wasn't checked (it failed) or a previous check determined it was SSO. Let's check again.\r\n            await this.checkSite(siteUrl);\r\n\r\n            if (!this.isBrowserSSO) {\r\n                // Site doesn't use browser SSO, throw app's login again.\r\n                return this.login();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (!username) {\r\n            CoreDomUtils.showErrorModal('core.login.usernamerequired', true);\r\n\r\n            return;\r\n        }\r\n        if (!password) {\r\n            CoreDomUtils.showErrorModal('core.login.passwordrequired', true);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!CoreApp.isOnline()) {\r\n            CoreDomUtils.showErrorModal('core.networkerrormsg', true);\r\n\r\n            return;\r\n        }\r\n\r\n        const modal = await CoreDomUtils.showModalLoading();\r\n\r\n        // Start the authentication process.\r\n        try {\r\n            const data = await CoreSites.getUserToken(siteUrl, username, password);\r\n\r\n            const id = await CoreSites.newSite(data.siteUrl, data.token, data.privateToken);\r\n\r\n            // Reset fields so the data is not in the view anymore.\r\n            this.credForm.controls['username'].reset();\r\n            this.credForm.controls['password'].reset();\r\n\r\n            this.siteId = id;\r\n\r\n            await CoreNavigator.navigateToSiteHome({ params: { urlToOpen: this.urlToOpen } });\r\n        } catch (error) {\r\n            CoreLoginHelper.treatUserTokenError(siteUrl, error, username, password);\r\n\r\n            if (error.loggedout) {\r\n                CoreNavigator.navigate('/login/sites', { reset: true });\r\n            } else if (error.errorcode == 'forcepasswordchangenotice') {\r\n                // Reset password field.\r\n                this.credForm.controls.password.reset();\r\n            }\r\n        } finally {\r\n            modal.dismiss();\r\n\r\n            CoreForms.triggerFormSubmittedEvent(this.formElement, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forgotten password button clicked.\r\n     */\r\n    forgottenPassword(): void {\r\n        CoreLoginHelper.forgottenPasswordClicked(this.siteUrl, this.credForm.value.username, this.siteConfig);\r\n    }\r\n\r\n    /**\r\n     * An OAuth button was clicked.\r\n     *\r\n     * @param provider The provider that was clicked.\r\n     */\r\n    oauthClicked(provider: CoreSiteIdentityProvider): void {\r\n        if (!CoreLoginHelper.openBrowserForOAuthLogin(this.siteUrl, provider, this.siteConfig?.launchurl)) {\r\n            CoreDomUtils.showErrorModal('Invalid data.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show instructions and scan QR code.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    async showInstructionsAndScanQR(): Promise<void> {\r\n        try {\r\n            await CoreLoginHelper.showScanQRInstructions();\r\n\r\n            await CoreLoginHelper.scanQR();\r\n        } catch {\r\n            // Ignore errors.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open email signup page.\r\n     */\r\n    openEmailSignup(): void {\r\n        CoreNavigator.navigate('/login/emailsignup', { params: { siteUrl: this.siteUrl } });\r\n    }\r\n\r\n    /**\r\n     * Open settings page.\r\n     */\r\n    openSettings(): void {\r\n        CoreNavigator.navigate('/settings');\r\n    }\r\n\r\n    /**\r\n     * View destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.viewLeft = true;\r\n        CoreEvents.trigger(CoreEvents.LOGIN_SITE_UNCHECKED, { config: this.siteConfig }, this.siteId);\r\n        this.valueChangeSubscription?.unsubscribe();\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}