{"version":3,"sources":["./src/addons/mod/assign/pages/edit/edit.html","./src/addons/mod/assign/pages/index/index.html","./src/addons/mod/assign/pages/submission-list/submission-list.html","./src/addons/mod/assign/pages/submission-review/submission-review.html","./src/addons/mod/assign/assign-lazy.module.ts","./src/addons/mod/assign/pages/edit/edit.ts","./src/addons/mod/assign/pages/index/index.page.ts","./src/addons/mod/assign/pages/submission-list/submission-list.page.ts","./src/addons/mod/assign/pages/submission-review/submission-review.ts"],"names":[],"mappings":"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","file":"assign-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"moduleId\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"save()\\\">\\r\\n                {{ 'core.save' | translate }}\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list *ngIf=\\\"userSubmission && userSubmission.plugins && userSubmission.plugins.length\\\">\\r\\n            <!-- @todo: plagiarism_print_disclosure -->\\r\\n            <form name=\\\"addon-mod_assign-edit-form\\\" #editSubmissionForm>\\r\\n                <!-- Submission statement. -->\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"submissionStatement\\\">\\r\\n                    <ion-label>\\r\\n                        <core-format-text [text]=\\\"submissionStatement\\\" [filter]=\\\"false\\\">\\r\\n                        </core-format-text>\\r\\n                    </ion-label>\\r\\n                    <ion-checkbox slot=\\\"end\\\" name=\\\"submissionstatement\\\" [(ngModel)]=\\\"submissionStatementAccepted\\\"></ion-checkbox>\\r\\n                    <!-- ion-checkbox doesn't use an input. Create a hidden input to hold the value. -->\\r\\n                    <input type=\\\"hidden\\\" [ngModel]=\\\"submissionStatementAccepted\\\" name=\\\"submissionstatement\\\">\\r\\n                </ion-item>\\r\\n\\r\\n                <addon-mod-assign-submission-plugin *ngFor=\\\"let plugin of userSubmission.plugins\\\" [assign]=\\\"assign\\\"\\r\\n                    [submission]=\\\"userSubmission\\\" [plugin]=\\\"plugin\\\" [edit]=\\\"true\\\" [allowOffline]=\\\"allowOffline\\\">\\r\\n                </addon-mod-assign-submission-plugin>\\r\\n            </form>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module?.id\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- The buttons defined by the component will be added in here. -->\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!activityComponent?.loaded\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <addon-mod-assign-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" (dataRetrieved)=\\\"updateData($event)\\\"></addon-mod-assign-index>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"moduleId\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n\\r\\n        <ion-buttons slot=\\\"end\\\"></ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded || !submissions.loaded\\\" (ionRefresh)=\\\"refreshList($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"loaded && submissions.loaded\\\">\\r\\n            <core-empty-box *ngIf=\\\"!submissions || submissions.empty\\\" icon=\\\"fas-file-signature\\\"\\r\\n                [message]=\\\"'addon.mod_assign.submissionstatus_' | translate\\\">\\r\\n            </core-empty-box>\\r\\n\\r\\n            <ion-list>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"(groupInfo.separateGroups || groupInfo.visibleGroups)\\\">\\r\\n                    <ion-label id=\\\"addon-assign-groupslabel\\\" *ngIf=\\\"groupInfo.separateGroups\\\">\\r\\n                        {{ 'core.groupsseparate' | translate }}\\r\\n                    </ion-label>\\r\\n                    <ion-label id=\\\"addon-assign-groupslabel\\\" *ngIf=\\\"groupInfo.visibleGroups\\\">\\r\\n                        {{ 'core.groupsvisible' | translate }}\\r\\n                    </ion-label>\\r\\n                    <ion-select [(ngModel)]=\\\"groupId\\\" (ionChange)=\\\"setGroup(groupId)\\\" aria-labelledby=\\\"addon-assign-groupslabel\\\"\\r\\n                        interface=\\\"action-sheet\\\" slot=\\\"end\\\" [interfaceOptions]=\\\"{header: 'core.group' | translate}\\\">\\r\\n                        <ion-select-option *ngFor=\\\"let groupOpt of groupInfo.groups\\\" [value]=\\\"groupOpt.id\\\">\\r\\n                            {{groupOpt.name}}\\r\\n                        </ion-select-option>\\r\\n                    </ion-select>\\r\\n                </ion-item>\\r\\n                <!-- List of submissions. -->\\r\\n                <ng-container *ngFor=\\\"let submission of submissions.items\\\">\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" (click)=\\\"submissions.select(submission)\\\" button\\r\\n                        [attr.aria-current]=\\\"submissions.getItemAriaCurrent(submission)\\\" detail=\\\"true\\\">\\r\\n                        <core-user-avatar [user]=\\\"submission\\\" [linkProfile]=\\\"false\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\" *ngIf=\\\"submission.userfullname\\\">{{submission.userfullname}}</p>\\r\\n                            <p class=\\\"item-heading\\\" *ngIf=\\\"!submission.userfullname\\\">\\r\\n                                {{ 'addon.mod_assign.hiddenuser' | translate }}{{submission.blindid}}\\r\\n                            </p>\\r\\n                            <p *ngIf=\\\"assign && assign!.teamsubmission\\\">\\r\\n                                <span *ngIf=\\\"submission.groupname\\\">{{submission.groupname}}</span>\\r\\n                                <span *ngIf=\\\"assign!.preventsubmissionnotingroup && !submission.groupname && submission.noGroups\\r\\n                                    && !submission.blindid\\\" class=\\\"text-danger\\\">\\r\\n                                    {{ 'addon.mod_assign.noteam' | translate }}\\r\\n                                </span>\\r\\n                                <span *ngIf=\\\"assign!.preventsubmissionnotingroup && !submission.groupname && submission.manyGroups\\r\\n                                    && !submission.blindid\\\" class=\\\"text-danger\\\">\\r\\n                                    {{ 'addon.mod_assign.multipleteams' | translate }}\\r\\n                                </span>\\r\\n                                <span *ngIf=\\\"!assign!.preventsubmissionnotingroup && !submission.groupname\\\">\\r\\n                                    {{ 'addon.mod_assign.defaultteam' | translate }}\\r\\n                                </span>\\r\\n                            </p>\\r\\n                            <ion-badge class=\\\"ion-text-center ion-text-wrap\\\" [color]=\\\"submission.statusColor\\\"\\r\\n                                *ngIf=\\\"submission.statusTranslated\\\">\\r\\n                                {{ submission.statusTranslated }}\\r\\n                            </ion-badge>\\r\\n                            <ion-badge class=\\\"ion-text-center ion-text-wrap\\\" [color]=\\\"submission.gradingColor\\\"\\r\\n                                *ngIf=\\\"submission.gradingStatusTranslationId\\\">\\r\\n                                {{ submission.gradingStatusTranslationId | translate }}\\r\\n                            </ion-badge>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n\\r\\n                <ion-card class=\\\"ion-text-wrap core-warning-card\\\" *ngIf=\\\"!haveAllParticipants\\\">\\r\\n                    <ion-item>\\r\\n                        <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        <ion-label>{{ 'addon.mod_assign.notallparticipantsareshown' | translate }}</ion-label>\\r\\n                    </ion-item>\\r\\n                </ion-card>\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>\\r\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"moduleId\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n\\r\\n        <ion-buttons slot=\\\"end\\\"></ion-buttons>\\r\\n    </ion-toolbar>\\r\\n\\r\\n    <core-navbar-buttons slot=\\\"end\\\">\\r\\n        <ion-button [hidden]=\\\"!canSaveGrades\\\" fill=\\\"clear\\\" (click)=\\\"submitGrade()\\\">\\r\\n            {{ 'core.done' | translate }}\\r\\n        </ion-button>\\r\\n    </core-navbar-buttons>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshSubmission($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <addon-mod-assign-submission [courseId]=\\\"courseId\\\" [moduleId]=\\\"moduleId\\\" [submitId]=\\\"submitId\\\" [blindId]=\\\"blindId\\\">\\r\\n        </addon-mod-assign-submission>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { conditionalRoutes } from '@/app/app-routing.module';\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CanLeaveGuard } from '@guards/can-leave';\r\nimport { CoreScreen } from '@services/screen';\r\nimport { AddonModAssignComponentsModule } from './components/components.module';\r\nimport { AddonModAssignEditPage } from './pages/edit/edit';\r\nimport { AddonModAssignIndexPage } from './pages/index/index.page';\r\nimport { AddonModAssignSubmissionListPage } from './pages/submission-list/submission-list.page';\r\nimport { AddonModAssignSubmissionReviewPage } from './pages/submission-review/submission-review';\r\n\r\nconst commonRoutes: Routes = [\r\n    {\r\n        path: ':courseId/:cmId',\r\n        component: AddonModAssignIndexPage,\r\n    },\r\n    {\r\n        path: ':courseId/:cmId/edit',\r\n        component: AddonModAssignEditPage,\r\n        canDeactivate: [CanLeaveGuard],\r\n    },\r\n];\r\n\r\nconst mobileRoutes: Routes = [\r\n    ...commonRoutes,\r\n    {\r\n        path: ':courseId/:cmId/submission',\r\n        component: AddonModAssignSubmissionListPage,\r\n    },\r\n    {\r\n        path: ':courseId/:cmId/submission/:submitId',\r\n        component: AddonModAssignSubmissionReviewPage,\r\n        canDeactivate: [CanLeaveGuard],\r\n    },\r\n];\r\n\r\nconst tabletRoutes: Routes = [\r\n    ...commonRoutes,\r\n    {\r\n        path: ':courseId/:cmId/submission',\r\n        component: AddonModAssignSubmissionListPage,\r\n        children: [\r\n            {\r\n                path: ':submitId',\r\n                component: AddonModAssignSubmissionReviewPage,\r\n                canDeactivate: [CanLeaveGuard],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nconst routes: Routes = [\r\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\r\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        AddonModAssignComponentsModule,\r\n    ],\r\n    declarations: [\r\n        AddonModAssignIndexPage,\r\n        AddonModAssignSubmissionListPage,\r\n        AddonModAssignSubmissionReviewPage,\r\n        AddonModAssignEditPage,\r\n    ],\r\n})\r\nexport class AddonModAssignLazyModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CoreError } from '@classes/errors/error';\r\nimport { CoreFileUploaderHelper } from '@features/fileuploader/services/fileuploader-helper';\r\nimport { CanLeave } from '@guards/can-leave';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\r\nimport { CoreSync } from '@services/sync';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreFormFields, CoreForms } from '@singletons/form';\r\nimport { Translate } from '@singletons';\r\nimport { CoreEvents } from '@singletons/events';\r\nimport {\r\n    AddonModAssignAssign,\r\n    AddonModAssignSubmission,\r\n    AddonModAssignProvider,\r\n    AddonModAssign,\r\n    AddonModAssignSubmissionStatusOptions,\r\n    AddonModAssignGetSubmissionStatusWSResponse,\r\n    AddonModAssignSavePluginData,\r\n} from '../../services/assign';\r\nimport { AddonModAssignHelper } from '../../services/assign-helper';\r\nimport { AddonModAssignOffline } from '../../services/assign-offline';\r\nimport { AddonModAssignSync } from '../../services/assign-sync';\r\n\r\n/**\r\n * Page that allows adding or editing an assigment submission.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-assign-edit',\r\n    templateUrl: 'edit.html',\r\n})\r\nexport class AddonModAssignEditPage implements OnInit, OnDestroy, CanLeave {\r\n\r\n    @ViewChild('editSubmissionForm') formElement?: ElementRef;\r\n\r\n    title: string; // Title to display.\r\n    assign?: AddonModAssignAssign; // Assignment.\r\n    courseId!: number; // Course ID the assignment belongs to.\r\n    moduleId!: number; // Module ID the submission belongs to.\r\n    userSubmission?: AddonModAssignSubmission; // The user submission.\r\n    allowOffline = false; // Whether offline is allowed.\r\n    submissionStatement?: string; // The submission statement.\r\n    submissionStatementAccepted = false; // Whether submission statement is accepted.\r\n    loaded = false; // Whether data has been loaded.\r\n\r\n    protected userId: number; // User doing the submission.\r\n    protected isBlind = false; // Whether blind is used.\r\n    protected editText: string; // \"Edit submission\" translated text.\r\n    protected saveOffline = false; // Whether to save data in offline.\r\n    protected hasOffline = false; // Whether the assignment has offline data.\r\n    protected isDestroyed = false; // Whether the component has been destroyed.\r\n    protected forceLeave = false; // To allow leaving the page without checking for changes.\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n    ) {\r\n        this.userId = CoreSites.getCurrentSiteUserId(); // Right now we can only edit current user's submissions.\r\n        this.editText = Translate.instant('addon.mod_assign.editsubmission');\r\n        this.title = this.editText;\r\n    }\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        this.moduleId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.isBlind = !!CoreNavigator.getRouteNumberParam('blindId');\r\n\r\n        this.fetchAssignment().finally(() => {\r\n            this.loaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if we can leave the page or not.\r\n     *\r\n     * @return Resolved if we can leave it, rejected if not.\r\n     */\r\n    async canLeave(): Promise<boolean> {\r\n        if (this.forceLeave) {\r\n            return true;\r\n        }\r\n\r\n        // Check if data has changed.\r\n        const changed = await this.hasDataChanged();\r\n        if (changed) {\r\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\r\n        }\r\n\r\n        // Nothing has changed or user confirmed to leave. Clear temporary data from plugins.\r\n        AddonModAssignHelper.clearSubmissionPluginTmpData(this.assign!, this.userSubmission, this.getInputData());\r\n\r\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Fetch assignment data.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchAssignment(): Promise<void> {\r\n        const currentUserId = CoreSites.getCurrentSiteUserId();\r\n\r\n        try {\r\n            // Get assignment data.\r\n            this.assign = await AddonModAssign.getAssignment(this.courseId, this.moduleId);\r\n            this.title = this.assign.name || this.title;\r\n\r\n            if (!this.isDestroyed) {\r\n                // Block the assignment.\r\n                CoreSync.blockOperation(AddonModAssignProvider.COMPONENT, this.assign.id);\r\n            }\r\n\r\n            // Wait for sync to be over (if any).\r\n            await AddonModAssignSync.waitForSync(this.assign.id);\r\n\r\n            // Get submission status. Ignore cache to get the latest data.\r\n            const options: AddonModAssignSubmissionStatusOptions = {\r\n                userId: this.userId,\r\n                isBlind: this.isBlind,\r\n                cmId: this.assign.cmid,\r\n                filter: false,\r\n                readingStrategy: CoreSitesReadingStrategy.ONLY_NETWORK,\r\n            };\r\n\r\n            let submissionStatus: AddonModAssignGetSubmissionStatusWSResponse;\r\n            try {\r\n                submissionStatus = await AddonModAssign.getSubmissionStatus(this.assign.id, options);\r\n                this.userSubmission =\r\n                    AddonModAssign.getSubmissionObjectFromAttempt(this.assign, submissionStatus.lastattempt);\r\n            } catch (error) {\r\n                // Cannot connect. Get cached data.\r\n                options.filter = true;\r\n                options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\r\n\r\n                submissionStatus = await AddonModAssign.getSubmissionStatus(this.assign.id, options);\r\n                this.userSubmission =\r\n                    AddonModAssign.getSubmissionObjectFromAttempt(this.assign, submissionStatus.lastattempt);\r\n\r\n                // Check if the user can edit it in offline.\r\n                const canEditOffline =\r\n                    await AddonModAssignHelper.canEditSubmissionOffline(this.assign, this.userSubmission);\r\n                if (!canEditOffline) {\r\n                    // Submission cannot be edited in offline, reject.\r\n                    this.allowOffline = false;\r\n                    throw error;\r\n                }\r\n            }\r\n\r\n            if (!submissionStatus.lastattempt?.canedit) {\r\n                // Can't edit. Reject.\r\n                throw new CoreError(Translate.instant('core.nopermissions', { $a: this.editText }));\r\n            }\r\n\r\n            this.allowOffline = true; // If offline isn't allowed we shouldn't have reached this point.\r\n            // Only show submission statement if we are editing our own submission.\r\n            if (this.assign.requiresubmissionstatement && !this.assign.submissiondrafts && this.userId == currentUserId) {\r\n                this.submissionStatement = this.assign.submissionstatement;\r\n            } else {\r\n                this.submissionStatement = undefined;\r\n            }\r\n\r\n            try {\r\n                // Check if there's any offline data for this submission.\r\n                const offlineData = await AddonModAssignOffline.getSubmission(this.assign.id, this.userId);\r\n\r\n                this.hasOffline = offlineData?.plugindata && Object.keys(offlineData.plugindata).length > 0;\r\n            } catch {\r\n                // No offline data found.\r\n                this.hasOffline = false;\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting assigment data.');\r\n\r\n            // Leave the player.\r\n            this.leaveWithoutCheck();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the input data.\r\n     *\r\n     * @return Input data.\r\n     */\r\n    protected getInputData(): CoreFormFields {\r\n        return CoreForms.getDataFromForm(document.forms['addon-mod_assign-edit-form']);\r\n    }\r\n\r\n    /**\r\n     * Check if data has changed.\r\n     *\r\n     * @return Promise resolved with boolean: whether data has changed.\r\n     */\r\n    protected async hasDataChanged(): Promise<boolean> {\r\n        // Usually the hasSubmissionDataChanged call will be resolved inmediately, causing the modal to be shown just an instant.\r\n        // We'll wait a bit before showing it to prevent this \"blink\".\r\n        const modal = await CoreDomUtils.showModalLoading();\r\n\r\n        const data = this.getInputData();\r\n\r\n        return AddonModAssignHelper.hasSubmissionDataChanged(this.assign!, this.userSubmission, data).finally(() => {\r\n            modal.dismiss();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Leave the view without checking for changes.\r\n     */\r\n    protected leaveWithoutCheck(): void {\r\n        this.forceLeave = true;\r\n        CoreNavigator.back();\r\n    }\r\n\r\n    /**\r\n     * Get data to submit based on the input data.\r\n     *\r\n     * @param inputData The input data.\r\n     * @return Promise resolved with the data to submit.\r\n     */\r\n    protected async prepareSubmissionData(inputData: CoreFormFields): Promise<AddonModAssignSavePluginData> {\r\n        // If there's offline data, always save it in offline.\r\n        this.saveOffline = this.hasOffline;\r\n\r\n        try {\r\n            return await AddonModAssignHelper.prepareSubmissionPluginData(\r\n                this.assign!,\r\n                this.userSubmission,\r\n                inputData,\r\n                this.hasOffline,\r\n            );\r\n        } catch (error) {\r\n            if (this.allowOffline && !this.saveOffline) {\r\n                // Cannot submit in online, prepare for offline usage.\r\n                this.saveOffline = true;\r\n\r\n                return await AddonModAssignHelper.prepareSubmissionPluginData(\r\n                    this.assign!,\r\n                    this.userSubmission,\r\n                    inputData,\r\n                    true,\r\n                );\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save the submission.\r\n     */\r\n    async save(): Promise<void> {\r\n        // Check if data has changed.\r\n        const changed = await this.hasDataChanged();\r\n        if (!changed) {\r\n            // Nothing to save, just go back.\r\n            this.leaveWithoutCheck();\r\n\r\n            return;\r\n        }\r\n        try {\r\n            await this.saveSubmission();\r\n            this.leaveWithoutCheck();\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'Error saving submission.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save the submission.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async saveSubmission(): Promise<void> {\r\n        const inputData = this.getInputData();\r\n\r\n        if (this.submissionStatement && (!inputData.submissionstatement || inputData.submissionstatement === 'false')) {\r\n            throw Translate.instant('addon.mod_assign.acceptsubmissionstatement');\r\n        }\r\n\r\n        let modal = await CoreDomUtils.showModalLoading();\r\n        let size = -1;\r\n\r\n        // Get size to ask for confirmation.\r\n        try {\r\n            size = await AddonModAssignHelper.getSubmissionSizeForEdit(this.assign!, this.userSubmission!, inputData);\r\n        } catch (error) {\r\n            // Error calculating size, return -1.\r\n            size = -1;\r\n        }\r\n\r\n        modal.dismiss();\r\n\r\n        try {\r\n            // Confirm action.\r\n            await CoreFileUploaderHelper.confirmUploadFile(size, true, this.allowOffline);\r\n\r\n            modal = await CoreDomUtils.showModalLoading('core.sending', true);\r\n\r\n            const pluginData = await this.prepareSubmissionData(inputData);\r\n            if (!Object.keys(pluginData).length) {\r\n                // Nothing to save.\r\n                return;\r\n            }\r\n\r\n            let sent: boolean;\r\n\r\n            if (this.saveOffline) {\r\n                // Save submission in offline.\r\n                sent = false;\r\n                await AddonModAssignOffline.saveSubmission(\r\n                    this.assign!.id,\r\n                    this.courseId,\r\n                    pluginData,\r\n                    this.userSubmission!.timemodified,\r\n                    !this.assign!.submissiondrafts,\r\n                    this.userId,\r\n                );\r\n            } else {\r\n                // Try to send it to server.\r\n                sent = await AddonModAssign.saveSubmission(\r\n                    this.assign!.id,\r\n                    this.courseId,\r\n                    pluginData,\r\n                    this.allowOffline,\r\n                    this.userSubmission!.timemodified,\r\n                    !!this.assign!.submissiondrafts,\r\n                    this.userId,\r\n                );\r\n            }\r\n\r\n            // Clear temporary data from plugins.\r\n            AddonModAssignHelper.clearSubmissionPluginTmpData(this.assign!, this.userSubmission, inputData);\r\n\r\n            if (sent) {\r\n                CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'assign' });\r\n            }\r\n\r\n            // Submission saved, trigger events.\r\n            CoreForms.triggerFormSubmittedEvent(this.formElement, sent, CoreSites.getCurrentSiteId());\r\n\r\n            CoreEvents.trigger(\r\n                AddonModAssignProvider.SUBMISSION_SAVED_EVENT,\r\n                {\r\n                    assignmentId: this.assign!.id,\r\n                    submissionId: this.userSubmission!.id,\r\n                    userId: this.userId,\r\n                },\r\n                CoreSites.getCurrentSiteId(),\r\n            );\r\n\r\n            if (!this.assign!.submissiondrafts) {\r\n                // No drafts allowed, so it was submitted. Trigger event.\r\n                CoreEvents.trigger(\r\n                    AddonModAssignProvider.SUBMITTED_FOR_GRADING_EVENT,\r\n                    {\r\n                        assignmentId: this.assign!.id,\r\n                        submissionId: this.userSubmission!.id,\r\n                        userId: this.userId,\r\n                    },\r\n                    CoreSites.getCurrentSiteId(),\r\n                );\r\n            }\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component being destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.isDestroyed = true;\r\n\r\n        // Unblock the assignment.\r\n        if (this.assign) {\r\n            CoreSync.unblockOperation(AddonModAssignProvider.COMPONENT, this.assign.id);\r\n        }\r\n    }\r\n\r\n}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, ViewChild } from '@angular/core';\r\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\r\nimport { AddonModAssignIndexComponent } from '../../components/index/index';\r\n\r\n/**\r\n * Page that displays an assign.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-assign-index',\r\n    templateUrl: 'index.html',\r\n})\r\nexport class AddonModAssignIndexPage extends CoreCourseModuleMainActivityPage<AddonModAssignIndexComponent> {\r\n\r\n    @ViewChild(AddonModAssignIndexComponent) activityComponent?: AddonModAssignIndexComponent;\r\n\r\n}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { Params } from '@angular/router';\r\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreSites } from '@services/sites';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { Translate } from '@singletons';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport {\r\n    AddonModAssignAssign,\r\n    AddonModAssignSubmission,\r\n    AddonModAssignProvider,\r\n    AddonModAssign,\r\n    AddonModAssignGrade,\r\n} from '../../services/assign';\r\nimport { AddonModAssignHelper, AddonModAssignSubmissionFormatted } from '../../services/assign-helper';\r\nimport { AddonModAssignOffline } from '../../services/assign-offline';\r\nimport {\r\n    AddonModAssignSyncProvider,\r\n    AddonModAssignSync,\r\n    AddonModAssignManualSyncData,\r\n    AddonModAssignAutoSyncData,\r\n} from '../../services/assign-sync';\r\n\r\n/**\r\n * Page that displays a list of submissions of an assignment.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-assign-submission-list',\r\n    templateUrl: 'submission-list.html',\r\n})\r\nexport class AddonModAssignSubmissionListPage implements AfterViewInit, OnDestroy {\r\n\r\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\r\n\r\n    title = ''; // Title to display.\r\n    assign?: AddonModAssignAssign; // Assignment.\r\n    submissions: AddonModAssignSubmissionListManager; // List of submissions\r\n    loaded = false; // Whether data has been loaded.\r\n    haveAllParticipants = true; // Whether all participants have been loaded.\r\n    groupId = 0; // Group ID to show.\r\n    courseId!: number; // Course ID the assignment belongs to.\r\n    moduleId!: number; // Module ID the submission belongs to.\r\n\r\n    groupInfo: CoreGroupInfo = {\r\n        groups: [],\r\n        separateGroups: false,\r\n        visibleGroups: false,\r\n        defaultGroupId: 0,\r\n    };\r\n\r\n    protected selectedStatus?: string; // The status to see.\r\n    protected gradedObserver: CoreEventObserver; // Observer to refresh data when a grade changes.\r\n    protected syncObserver: CoreEventObserver; // Observer to refresh data when the async is synchronized.\r\n    protected submissionsData: { canviewsubmissions: boolean; submissions?: AddonModAssignSubmission[] } = {\r\n        canviewsubmissions: false,\r\n    };\r\n\r\n    constructor() {\r\n        this.submissions = new AddonModAssignSubmissionListManager(AddonModAssignSubmissionListPage);\r\n\r\n        // Update data if some grade changes.\r\n        this.gradedObserver = CoreEvents.on(\r\n            AddonModAssignProvider.GRADED_EVENT,\r\n            (data) => {\r\n                if (\r\n                    this.loaded &&\r\n                    this.assign &&\r\n                    data.assignmentId == this.assign.id &&\r\n                    data.userId == CoreSites.getCurrentSiteUserId()\r\n                ) {\r\n                    // Grade changed, refresh the data.\r\n                    this.loaded = false;\r\n\r\n                    this.refreshAllData(true).finally(() => {\r\n                        this.loaded = true;\r\n                    });\r\n                }\r\n            },\r\n            CoreSites.getCurrentSiteId(),\r\n        );\r\n\r\n        // Refresh data if this assign is synchronized.\r\n        const events = [AddonModAssignSyncProvider.AUTO_SYNCED, AddonModAssignSyncProvider.MANUAL_SYNCED];\r\n        this.syncObserver = CoreEvents.onMultiple<AddonModAssignAutoSyncData | AddonModAssignManualSyncData>(\r\n            events,\r\n            (data) => {\r\n                if (!this.loaded || ('context' in data && data.context == 'submission-list')) {\r\n                    return;\r\n                }\r\n\r\n                this.loaded = false;\r\n\r\n                this.refreshAllData(false).finally(() => {\r\n                    this.loaded = true;\r\n                });\r\n            },\r\n            CoreSites.getCurrentSiteId(),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngAfterViewInit(): void {\r\n        this.moduleId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.groupId = CoreNavigator.getRouteNumberParam('groupId') || 0;\r\n        this.selectedStatus = CoreNavigator.getRouteParam('status');\r\n\r\n        if (this.selectedStatus) {\r\n            if (this.selectedStatus == AddonModAssignProvider.NEED_GRADING) {\r\n                this.title = Translate.instant('addon.mod_assign.numberofsubmissionsneedgrading');\r\n            } else {\r\n                this.title = Translate.instant('addon.mod_assign.submissionstatus_' + this.selectedStatus);\r\n            }\r\n        } else {\r\n            this.title = Translate.instant('addon.mod_assign.numberofparticipants');\r\n        }\r\n        this.fetchAssignment(true).finally(() => {\r\n            this.loaded = true;\r\n            this.submissions.start(this.splitView);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch assignment data.\r\n     *\r\n     * @param sync Whether to try to synchronize data.\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchAssignment(sync = false): Promise<void> {\r\n        try {\r\n            // Get assignment data.\r\n            this.assign = await AddonModAssign.getAssignment(this.courseId, this.moduleId);\r\n\r\n            this.title = this.assign.name || this.title;\r\n\r\n            if (sync) {\r\n                try {\r\n                    // Try to synchronize data.\r\n                    const result = await AddonModAssignSync.syncAssign(this.assign.id);\r\n\r\n                    if (result && result.updated) {\r\n                        CoreEvents.trigger(\r\n                            AddonModAssignSyncProvider.MANUAL_SYNCED,\r\n                            {\r\n                                assignId: this.assign.id,\r\n                                warnings: result.warnings,\r\n                                gradesBlocked: result.gradesBlocked,\r\n                                context: 'submission-list',\r\n                            },\r\n                            CoreSites.getCurrentSiteId(),\r\n                        );\r\n                    }\r\n                } catch (error) {\r\n                    // Ignore errors, probably user is offline or sync is blocked.\r\n                }\r\n            }\r\n\r\n            // Get assignment submissions.\r\n            this.submissionsData = await AddonModAssign.getSubmissions(this.assign.id, { cmId: this.assign.cmid });\r\n\r\n            if (!this.submissionsData.canviewsubmissions) {\r\n                // User shouldn't be able to reach here.\r\n                throw new Error('Cannot view submissions.');\r\n            }\r\n\r\n            // Check if groupmode is enabled to avoid showing wrong numbers.\r\n            this.groupInfo = await CoreGroups.getActivityGroupInfo(this.assign.cmid, false);\r\n\r\n            await this.setGroup(CoreGroups.validateGroupId(this.groupId, this.groupInfo));\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting assigment data.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set group to see the summary.\r\n     *\r\n     * @param groupId Group ID.\r\n     * @return Resolved when done.\r\n     */\r\n    async setGroup(groupId: number): Promise<void> {\r\n        this.groupId = groupId;\r\n\r\n        this.haveAllParticipants = true;\r\n\r\n        if (!CoreSites.getCurrentSite()?.wsAvailable('mod_assign_list_participants')) {\r\n            // Submissions are not displayed in Moodle 3.1 without the local plugin, see MOBILE-2968.\r\n            this.haveAllParticipants = false;\r\n            this.submissions.resetItems();\r\n\r\n            return;\r\n        }\r\n\r\n        // Fetch submissions and grades.\r\n        const submissions =\r\n            await AddonModAssignHelper.getSubmissionsUserData(\r\n                this.assign!,\r\n                this.submissionsData.submissions,\r\n                this.groupId,\r\n            );\r\n        // Get assignment grades only if workflow is not enabled to check grading date.\r\n        const grades = !this.assign!.markingworkflow\r\n            ? await AddonModAssign.getAssignmentGrades(this.assign!.id, { cmId: this.assign!.cmid })\r\n            : [];\r\n\r\n        // Filter the submissions to get only the ones with the right status and add some extra data.\r\n        const getNeedGrading = this.selectedStatus == AddonModAssignProvider.NEED_GRADING;\r\n        const searchStatus = getNeedGrading ? AddonModAssignProvider.SUBMISSION_STATUS_SUBMITTED : this.selectedStatus;\r\n\r\n        const promises: Promise<void>[] = [];\r\n        const showSubmissions: AddonModAssignSubmissionForList[] = [];\r\n\r\n        submissions.forEach((submission: AddonModAssignSubmissionForList) => {\r\n            if (!searchStatus || searchStatus == submission.status) {\r\n                promises.push(\r\n                    CoreUtils.ignoreErrors(\r\n                        AddonModAssignOffline.getSubmissionGrade(this.assign!.id, submission.userid),\r\n                    ).then(async (data) => {\r\n                        if (getNeedGrading) {\r\n                            // Only show the submissions that need to be graded.\r\n                            const add = await AddonModAssign.needsSubmissionToBeGraded(submission, this.assign!.id);\r\n\r\n                            if (!add) {\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        // Load offline grades.\r\n                        const notSynced = !!data && submission.timemodified < data.timemodified;\r\n\r\n                        if (submission.gradingstatus == 'graded' && !this.assign!.markingworkflow) {\r\n                            // Get the last grade of the submission.\r\n                            const grade = grades\r\n                                .filter((grade) => grade.userid == submission.userid)\r\n                                .reduce(\r\n                                    (a, b) => (a && a.timemodified > b.timemodified ? a : b),\r\n                                    <AddonModAssignGrade | undefined> undefined,\r\n                                );\r\n\r\n                            if (grade && grade.timemodified < submission.timemodified) {\r\n                                submission.gradingstatus = AddonModAssignProvider.GRADED_FOLLOWUP_SUBMIT;\r\n                            }\r\n                        }\r\n                        submission.statusColor = AddonModAssign.getSubmissionStatusColor(submission.status);\r\n                        submission.gradingColor = AddonModAssign.getSubmissionGradingStatusColor(\r\n                            submission.gradingstatus,\r\n                        );\r\n\r\n                        // Show submission status if not submitted for grading.\r\n                        if (submission.statusColor != 'success' || !submission.gradingstatus) {\r\n                            submission.statusTranslated = Translate.instant(\r\n                                'addon.mod_assign.submissionstatus_' + submission.status,\r\n                            );\r\n                        } else {\r\n                            submission.statusTranslated = '';\r\n                        }\r\n\r\n                        if (notSynced) {\r\n                            submission.gradingStatusTranslationId = 'addon.mod_assign.gradenotsynced';\r\n                            submission.gradingColor = '';\r\n                        } else if (submission.statusColor != 'danger' || submission.gradingColor != 'danger') {\r\n                            // Show grading status if one of the statuses is not done.\r\n                            submission.gradingStatusTranslationId = AddonModAssign.getSubmissionGradingStatusTranslationId(\r\n                                submission.gradingstatus,\r\n                            );\r\n                        } else {\r\n                            submission.gradingStatusTranslationId = '';\r\n                        }\r\n\r\n                        showSubmissions.push(submission);\r\n\r\n                        return;\r\n                    }),\r\n                );\r\n            }\r\n        });\r\n\r\n        await Promise.all(promises);\r\n\r\n        this.submissions.setItems(showSubmissions);\r\n    }\r\n\r\n    /**\r\n     * Refresh all the data.\r\n     *\r\n     * @param sync Whether to try to synchronize data.\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async refreshAllData(sync?: boolean): Promise<void> {\r\n        const promises: Promise<void>[] = [];\r\n\r\n        promises.push(AddonModAssign.invalidateAssignmentData(this.courseId));\r\n        if (this.assign) {\r\n            promises.push(AddonModAssign.invalidateAllSubmissionData(this.assign.id));\r\n            promises.push(AddonModAssign.invalidateAssignmentUserMappingsData(this.assign.id));\r\n            promises.push(AddonModAssign.invalidateAssignmentGradesData(this.assign.id));\r\n            promises.push(AddonModAssign.invalidateListParticipantsData(this.assign.id));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n        } finally {\r\n            this.fetchAssignment(sync);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the list.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    refreshList(refresher?: IonRefresher): void {\r\n        this.refreshAllData(true).finally(() => {\r\n            refresher?.complete();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Component being destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.gradedObserver?.off();\r\n        this.syncObserver?.off();\r\n        this.submissions.destroy();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Helper class to manage submissions.\r\n */\r\nclass AddonModAssignSubmissionListManager extends CorePageItemsListManager<AddonModAssignSubmissionForList> {\r\n\r\n    constructor(pageComponent: unknown) {\r\n        super(pageComponent);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    protected getItemPath(submission: AddonModAssignSubmissionForList): string {\r\n        return String(submission.submitid);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    protected getItemQueryParams(submission: AddonModAssignSubmissionForList): Params {\r\n        return {\r\n            blindId: submission.blindid,\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Calculated data for an assign submission.\r\n */\r\ntype AddonModAssignSubmissionForList = AddonModAssignSubmissionFormatted & {\r\n    statusColor?: string; // Calculated in the app. Color of the submission status.\r\n    gradingColor?: string; // Calculated in the app. Color of the submission grading status.\r\n    statusTranslated?: string; // Calculated in the app. Translated text of the submission status.\r\n    gradingStatusTranslationId?: string; // Calculated in the app. Key of the text of the submission grading status.\r\n};\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CoreCourse } from '@features/course/services/course';\r\nimport { CanLeave } from '@guards/can-leave';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreScreen } from '@services/screen';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { AddonModAssignSubmissionComponent } from '../../components/submission/submission';\r\nimport { AddonModAssign, AddonModAssignAssign } from '../../services/assign';\r\n\r\n/**\r\n * Page that displays a submission.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-assign-submission-review',\r\n    templateUrl: 'submission-review.html',\r\n})\r\nexport class AddonModAssignSubmissionReviewPage implements OnInit, CanLeave {\r\n\r\n    @ViewChild(AddonModAssignSubmissionComponent) submissionComponent?: AddonModAssignSubmissionComponent;\r\n\r\n    title = ''; // Title to display.\r\n    moduleId!: number; // Module ID the submission belongs to.\r\n    courseId!: number; // Course ID the assignment belongs to.\r\n    submitId!: number; // User that did the submission.\r\n    blindId?: number; // Blinded user ID (if it's blinded).\r\n    loaded = false; // Whether data has been loaded.\r\n    canSaveGrades = false; // Whether the user can save grades.\r\n\r\n    protected assign?: AddonModAssignAssign; // The assignment the submission belongs to.\r\n    protected blindMarking = false; // Whether it uses blind marking.\r\n    protected forceLeave = false; // To allow leaving the page without checking for changes.\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n    ) { }\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.moduleId = CoreNavigator.getRouteNumberParam('cmId')!;\r\n            this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n            this.submitId = CoreNavigator.getRouteNumberParam('submitId') || 0;\r\n            this.blindId = CoreNavigator.getRouteNumberParam('blindId', { params });\r\n\r\n            this.fetchSubmission().finally(() => {\r\n                this.loaded = true;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if we can leave the page or not.\r\n     *\r\n     * @return Resolved if we can leave it, rejected if not.\r\n     */\r\n    async canLeave(): Promise<boolean> {\r\n        if (!this.submissionComponent || this.forceLeave) {\r\n            return true;\r\n        }\r\n\r\n        // Check if data has changed.\r\n        return this.submissionComponent.canLeave();\r\n    }\r\n\r\n    /**\r\n     * User entered the page.\r\n     */\r\n    ionViewDidEnter(): void {\r\n        this.submissionComponent?.ionViewDidEnter();\r\n    }\r\n\r\n    /**\r\n     * User left the page.\r\n     */\r\n    ionViewDidLeave(): void {\r\n        this.submissionComponent?.ionViewDidLeave();\r\n    }\r\n\r\n    /**\r\n     * Get the submission.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchSubmission(): Promise<void> {\r\n        this.assign = await AddonModAssign.getAssignment(this.courseId, this.moduleId);\r\n        this.title = this.assign.name;\r\n\r\n        this.blindMarking = !!this.assign.blindmarking && !this.assign.revealidentities;\r\n\r\n        const gradeInfo = await CoreCourse.getModuleBasicGradeInfo(this.moduleId);\r\n        if (!gradeInfo) {\r\n            return;\r\n        }\r\n\r\n        // Grades can be saved if simple grading.\r\n        if (gradeInfo.advancedgrading && gradeInfo.advancedgrading[0] &&\r\n                typeof gradeInfo.advancedgrading[0].method != 'undefined') {\r\n\r\n            const method = gradeInfo.advancedgrading[0].method || 'simple';\r\n            this.canSaveGrades = method == 'simple';\r\n        } else {\r\n            this.canSaveGrades = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh all the data.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async refreshAllData(): Promise<void> {\r\n        const promises: Promise<void>[] = [];\r\n\r\n        promises.push(AddonModAssign.invalidateAssignmentData(this.courseId));\r\n        if (this.assign) {\r\n            promises.push(AddonModAssign.invalidateSubmissionData(this.assign.id));\r\n            promises.push(AddonModAssign.invalidateAssignmentUserMappingsData(this.assign.id));\r\n            promises.push(AddonModAssign.invalidateSubmissionStatusData(\r\n                this.assign.id,\r\n                this.submitId,\r\n                undefined,\r\n                this.blindMarking,\r\n            ));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n        } finally {\r\n            this.submissionComponent && this.submissionComponent.invalidateAndRefresh(true);\r\n\r\n            await this.fetchSubmission();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    refreshSubmission(refresher?: IonRefresher): void {\r\n        this.refreshAllData().finally(() => {\r\n            refresher?.complete();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Submit a grade and feedback.\r\n     */\r\n    async submitGrade(): Promise<void> {\r\n        if (!this.submissionComponent) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await this.submissionComponent.submitGrade();\r\n            // Grade submitted, leave the view if not in tablet.\r\n            if (!CoreScreen.isTablet) {\r\n                this.forceLeave = true;\r\n                CoreNavigator.back();\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'core.error', true);\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}