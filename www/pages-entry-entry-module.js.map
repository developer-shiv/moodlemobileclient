{"version":3,"sources":["./src/addons/mod/glossary/pages/entry/entry.html","./src/addons/mod/glossary/pages/entry/entry.module.ts","./src/addons/mod/glossary/pages/entry/entry.ts"],"names":[],"mappings":"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","file":"pages-entry-entry-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1 *ngIf=\\\"entry\\\">\\r\\n            <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\r\\n            </core-format-text>\\r\\n        </h1>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ng-container *ngIf=\\\"entry && loaded\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"showAuthor\\\">\\r\\n                <core-user-avatar [user]=\\\"entry\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>\\r\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\"\\r\\n                            [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </h2>\\r\\n                    <p>{{ entry.userfullname }}</p>\\r\\n                </ion-label>\\r\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate\\\">{{ entry.timemodified | coreDateDayOrTime }}</ion-note>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!showAuthor\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">\\r\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate\\\">{{ entry.timemodified | coreDateDayOrTime }}</ion-note>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"componentId\\\" [text]=\\\"entry.definition\\\"\\r\\n                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\r\\n                    </core-format-text>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <div *ngIf=\\\"entry.attachment\\\" lines=\\\"none\\\">\\r\\n                <core-file *ngFor=\\\"let file of entry.attachments\\\" [file]=\\\"file\\\" [component]=\\\"component\\\"\\r\\n                    [componentId]=\\\"componentId\\\">\\r\\n                </core-file>\\r\\n            </div>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"tagsEnabled && entry && entry.tags && entry.tags.length > 0\\\">\\r\\n                <ion-label>\\r\\n                    <div slot=\\\"start\\\">{{ 'core.tag.tags' | translate }}:</div>\\r\\n                    <core-tag-list [tags]=\\\"entry.tags\\\"></core-tag-list>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!entry.approved\\\">\\r\\n                <ion-label><p><em>{{ 'addon.mod_glossary.entrypendingapproval' | translate }}</em></p></ion-label>\\r\\n            </ion-item>\\r\\n            <core-comments *ngIf=\\\"glossary && glossary.allowcomments && entry && entry.id > 0 && commentsEnabled\\\"\\r\\n                contextLevel=\\\"module\\\" [instanceId]=\\\"glossary.coursemodule\\\" component=\\\"mod_glossary\\\"\\r\\n                [itemId]=\\\"entry.id\\\" area=\\\"glossary_entry\\\" [courseId]=\\\"glossary.course\\\" [showItem]=\\\"true\\\">\\r\\n            </core-comments>\\r\\n            <core-rating-rate *ngIf=\\\"glossary && ratingInfo\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\r\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"entry.id\\\" [itemSetId]=\\\"0\\\" [courseId]=\\\"glossary.course\\\"\\r\\n                [aggregateMethod]=\\\"glossary.assessed\\\" [scaleId]=\\\"glossary.scale\\\" [userId]=\\\"entry.userid\\\"\\r\\n                (onUpdate)=\\\"ratingUpdated()\\\">\\r\\n            </core-rating-rate>\\r\\n            <core-rating-aggregate *ngIf=\\\"glossary && ratingInfo\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\r\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"entry.id\\\" [courseId]=\\\"glossary.course\\\"\\r\\n                [aggregateMethod]=\\\"glossary.assessed\\\" [scaleId]=\\\"glossary.scale\\\">\\r\\n            </core-rating-aggregate>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-card *ngIf=\\\"!entry\\\" class=\\\"core-warning-card\\\">\\r\\n            <ion-item>\\r\\n                <ion-label>{{ 'addon.mod_glossary.errorloadingentry' | translate }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonModGlossaryEntryPage } from './entry';\r\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\r\nimport { CoreRatingComponentsModule } from '@features/rating/components/components.module';\r\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [{\r\n    path: '',\r\n    component: AddonModGlossaryEntryPage,\r\n}];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModGlossaryEntryPage,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreCommentsComponentsModule,\r\n        CoreRatingComponentsModule,\r\n        CoreTagComponentsModule,\r\n    ],\r\n})\r\nexport class AddonModGlossaryEntryPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CoreCommentsCommentsComponent } from '@features/comments/components/comments/comments';\r\nimport { CoreComments } from '@features/comments/services/comments';\r\nimport { CoreRatingInfo } from '@features/rating/services/rating';\r\nimport { CoreTag } from '@features/tag/services/tag';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport {\r\n    AddonModGlossary,\r\n    AddonModGlossaryEntry,\r\n    AddonModGlossaryGlossary,\r\n    AddonModGlossaryProvider,\r\n} from '../../services/glossary';\r\n\r\n/**\r\n * Page that displays a glossary entry.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-glossary-entry',\r\n    templateUrl: 'entry.html',\r\n})\r\nexport class AddonModGlossaryEntryPage implements OnInit {\r\n\r\n    @ViewChild(CoreCommentsCommentsComponent) comments?: CoreCommentsCommentsComponent;\r\n\r\n    component = AddonModGlossaryProvider.COMPONENT;\r\n    componentId?: number;\r\n    entry?: AddonModGlossaryEntry;\r\n    glossary?: AddonModGlossaryGlossary;\r\n    loaded = false;\r\n    showAuthor = false;\r\n    showDate = false;\r\n    ratingInfo?: CoreRatingInfo;\r\n    tagsEnabled = false;\r\n    commentsEnabled = false;\r\n    courseId!: number;\r\n\r\n    protected entryId!: number;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\r\n        this.entryId = CoreNavigator.getRouteNumberParam('entryId')!;\r\n        this.tagsEnabled = CoreTag.areTagsAvailableInSite();\r\n        this.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\r\n\r\n        try {\r\n            await this.fetchEntry();\r\n\r\n            if (!this.glossary) {\r\n                return;\r\n            }\r\n\r\n            await CoreUtils.ignoreErrors(AddonModGlossary.logEntryView(this.entryId, this.componentId!, this.glossary.name));\r\n        } finally {\r\n            this.loaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param refresher Refresher.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async doRefresh(refresher?: IonRefresher): Promise<void> {\r\n        if (this.glossary?.allowcomments && this.entry && this.entry.id > 0 && this.commentsEnabled && this.comments) {\r\n            // Refresh comments. Don't add it to promises because we don't want the comments fetch to block the entry fetch.\r\n            CoreUtils.ignoreErrors(this.comments.doRefresh());\r\n        }\r\n\r\n        try {\r\n            await CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(this.entryId));\r\n\r\n            await this.fetchEntry();\r\n        } finally {\r\n            refresher?.complete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convenience function to get the glossary entry.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchEntry(): Promise<void> {\r\n        try {\r\n            const result = await AddonModGlossary.getEntry(this.entryId);\r\n\r\n            this.entry = result.entry;\r\n            this.ratingInfo = result.ratinginfo;\r\n\r\n            if (this.glossary) {\r\n                // Glossary already loaded, nothing else to load.\r\n                return;\r\n            }\r\n\r\n            // Load the glossary.\r\n            this.glossary = await AddonModGlossary.getGlossaryById(this.courseId, this.entry.glossaryid);\r\n            this.componentId = this.glossary.coursemodule;\r\n\r\n            switch (this.glossary.displayformat) {\r\n                case 'fullwithauthor':\r\n                case 'encyclopedia':\r\n                    this.showAuthor = true;\r\n                    this.showDate = true;\r\n                    break;\r\n                case 'fullwithoutauthor':\r\n                    this.showAuthor = false;\r\n                    this.showDate = true;\r\n                    break;\r\n                default: // Default, and faq, simple, entrylist, continuous.\r\n                    this.showAuthor = false;\r\n                    this.showDate = false;\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function called when rating is updated online.\r\n     */\r\n    ratingUpdated(): void {\r\n        AddonModGlossary.invalidateEntry(this.entryId);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}