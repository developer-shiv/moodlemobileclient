(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~features-grades-grades-course-lazy-module~features-grades-grades-lazy-module"],{

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/core/features/grades/pages/course/course.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/core/features/grades/pages/course/course.html ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header>\r\n    <ion-toolbar>\r\n        <ion-buttons slot=\"start\">\r\n            <ion-back-button [text]=\"'core.back' | translate\"></ion-back-button>\r\n        </ion-buttons>\r\n        <h1>{{ 'core.grades.grades' | translate }}</h1>\r\n    </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n    <core-split-view [mode]=\"splitViewMode\">\r\n        <ion-refresher slot=\"fixed\" [disabled]=\"!grades.loaded\" (ionRefresh)=\"refreshGrades($event.target)\">\r\n            <ion-refresher-content pullingText=\"{{ 'core.pulltorefresh' | translate }}\"></ion-refresher-content>\r\n        </ion-refresher>\r\n        <core-loading [hideUntil]=\"grades.loaded\" class=\"safe-area-page\">\r\n            <core-empty-box *ngIf=\"grades.empty\" icon=\"fas-chart-bar\" [message]=\"'core.grades.nogradesreturned' | translate\">\r\n            </core-empty-box>\r\n            <div *ngIf=\"!grades.empty\" class=\"core-grades-container\">\r\n                <table cellspacing=\"0\" cellpadding=\"0\" class=\"core-grades-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th\r\n                                *ngFor=\"let column of grades.columns\"\r\n                                id=\"{{column.name}}\"\r\n                                class=\"ion-text-start\"\r\n                                [class.ion-hide-md-down]=\"column.hiddenPhone\"\r\n                                [attr.colspan]=\"column.colspan\"\r\n                            >\r\n                                {{ 'core.grades.' + column.name | translate }}\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr\r\n                            *ngFor=\"let row of grades.rows\"\r\n                            role=\"button row\"\r\n                            [attr.tabindex]=\"row.itemtype != 'category' ? 0 : null\"\r\n                            (ariaButtonClick)=\"row.itemtype != 'category' && grades.select(row)\"\r\n                            [class]=\"row.rowclass\"\r\n                            [ngClass]='{\"core-grades-grade-clickable\": row.itemtype != \"category\"}'\r\n                        >\r\n                            <ng-container *ngIf=\"row.itemtype\">\r\n                                <td\r\n                                    *ngIf=\"row.itemtype == 'category'\"\r\n                                    class=\"core-grades-table-category\"\r\n                                    [attr.rowspan]=\"row.rowspan\"\r\n                                ></td>\r\n                                <th\r\n                                    class=\"core-grades-table-gradeitem ion-text-start\"\r\n                                    [class.column-itemname]=\"row.itemtype == 'category'\"\r\n                                    [attr.aria-current]=\"grades.getItemAriaCurrent(row)\"\r\n                                    [attr.colspan]=\"row.colspan\"\r\n                                >\r\n                                    <ion-icon *ngIf=\"row.icon\" name=\"{{row.icon}}\" slot=\"start\" [attr.aria-label]=\"row.iconAlt\">\r\n                                    </ion-icon>\r\n                                    <img *ngIf=\"row.image\" [src]=\"row.image\" slot=\"start\" class=\"core-module-icon\"\r\n                                        [alt]=\"row.iconAlt\"/>\r\n                                    <span [innerHTML]=\"row.gradeitem\"></span>\r\n                                </th>\r\n                                <ng-container *ngFor=\"let column of grades.columns\">\r\n                                    <td\r\n                                        *ngIf=\"column.name != 'gradeitem' && row[column.name] != undefined\"\r\n                                        [class]=\"'ion-text-start core-grades-table-' + column.name\"\r\n                                        [class.ion-hide-md-down]=\"column.hiddenPhone\"\r\n                                        [innerHTML]=\"row[column.name]\"\r\n                                    ></td>\r\n                                </ng-container>\r\n                            </ng-container>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </core-loading>\r\n    </core-split-view>\r\n</ion-content>\r\n");

/***/ }),

/***/ "./src/core/features/grades/pages/course/course.module.ts":
/*!****************************************************************!*\
  !*** ./src/core/features/grades/pages/course/course.module.ts ***!
  \****************************************************************/
/*! exports provided: CoreGradesCoursePageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoreGradesCoursePageModule", function() { return CoreGradesCoursePageModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var _core_shared_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/core/shared.module */ "./src/core/shared.module.ts");
/* harmony import */ var _course_page__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./course.page */ "./src/core/features/grades/pages/course/course.page.ts");
// (C) Copyright 2015 Moodle Pty Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.




let CoreGradesCoursePageModule = class CoreGradesCoursePageModule {
};
CoreGradesCoursePageModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _core_shared_module__WEBPACK_IMPORTED_MODULE_2__["CoreSharedModule"],
        ],
        declarations: [
            _course_page__WEBPACK_IMPORTED_MODULE_3__["CoreGradesCoursePage"],
        ],
    })
], CoreGradesCoursePageModule);



/***/ }),

/***/ "./src/core/features/grades/pages/course/course.page.ts":
/*!**************************************************************!*\
  !*** ./src/core/features/grades/pages/course/course.page.ts ***!
  \**************************************************************/
/*! exports provided: CoreGradesCoursePage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoreGradesCoursePage", function() { return CoreGradesCoursePage; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var _services_utils_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/utils/dom */ "./src/core/services/utils/dom.ts");
/* harmony import */ var _features_grades_services_grades__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @features/grades/services/grades */ "./src/core/features/grades/services/grades.ts");
/* harmony import */ var _features_grades_services_grades_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @features/grades/services/grades-helper */ "./src/core/features/grades/services/grades-helper.ts");
/* harmony import */ var _services_sites__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @services/sites */ "./src/core/services/sites.ts");
/* harmony import */ var _services_utils_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @services/utils/utils */ "./src/core/services/utils/utils.ts");
/* harmony import */ var _components_split_view_split_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @components/split-view/split-view */ "./src/core/components/split-view/split-view.ts");
/* harmony import */ var _classes_page_items_list_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @classes/page-items-list-manager */ "./src/core/classes/page-items-list-manager.ts");
/* harmony import */ var _services_navigator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @services/navigator */ "./src/core/services/navigator.ts");
// (C) Copyright 2015 Moodle Pty Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var CoreGradesCoursePage_1;











/**
 * Page that displays a course grades.
 */
let CoreGradesCoursePage = CoreGradesCoursePage_1 = class CoreGradesCoursePage {
    constructor(route) {
        var _a, _b, _c;
        this.route = route;
        const courseId = _services_navigator__WEBPACK_IMPORTED_MODULE_10__["CoreNavigator"].getRouteNumberParam('courseId', { route });
        const userId = (_a = _services_navigator__WEBPACK_IMPORTED_MODULE_10__["CoreNavigator"].getRouteNumberParam('userId', { route })) !== null && _a !== void 0 ? _a : _services_sites__WEBPACK_IMPORTED_MODULE_6__["CoreSites"].getCurrentSiteUserId();
        const useSplitView = (_b = route.snapshot.data.useSplitView) !== null && _b !== void 0 ? _b : true;
        const outsideGradesTab = (_c = route.snapshot.data.outsideGradesTab) !== null && _c !== void 0 ? _c : false;
        this.splitViewMode = useSplitView ? undefined : _components_split_view_split_view__WEBPACK_IMPORTED_MODULE_8__["CoreSplitViewMode"].MENU_ONLY;
        this.grades = new CoreGradesCourseManager(CoreGradesCoursePage_1, courseId, userId, outsideGradesTab);
    }
    /**
     * @inheritdoc
     */
    ngAfterViewInit() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            yield this.fetchInitialGrades();
            this.grades.start(this.splitView);
        });
    }
    /**
     * @inheritdoc
     */
    ngOnDestroy() {
        this.grades.destroy();
    }
    /**
     * Refresh grades.
     *
     * @param refresher Refresher.
     */
    refreshGrades(refresher) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const { courseId, userId } = this.grades;
            yield _services_utils_utils__WEBPACK_IMPORTED_MODULE_7__["CoreUtils"].ignoreErrors(_features_grades_services_grades__WEBPACK_IMPORTED_MODULE_4__["CoreGrades"].invalidateCourseGradesData(courseId, userId));
            yield _services_utils_utils__WEBPACK_IMPORTED_MODULE_7__["CoreUtils"].ignoreErrors(this.fetchGrades());
            refresher === null || refresher === void 0 ? void 0 : refresher.complete();
        });
    }
    /**
     * Obtain the initial table of grades.
     */
    fetchInitialGrades() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            try {
                yield this.fetchGrades();
            }
            catch (error) {
                _services_utils_dom__WEBPACK_IMPORTED_MODULE_3__["CoreDomUtils"].showErrorModalDefault(error, 'Error loading course');
                this.grades.setTable({ columns: [], rows: [] });
            }
        });
    }
    /**
     * Update the table of grades.
     */
    fetchGrades() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            const table = yield _features_grades_services_grades__WEBPACK_IMPORTED_MODULE_4__["CoreGrades"].getCourseGradesTable(this.grades.courseId, this.grades.userId);
            const formattedTable = yield _features_grades_services_grades_helper__WEBPACK_IMPORTED_MODULE_5__["CoreGradesHelper"].formatGradesTable(table);
            this.grades.setTable(formattedTable);
        });
    }
};
CoreGradesCoursePage.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"] }
];
CoreGradesCoursePage.propDecorators = {
    splitView: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"], args: [_components_split_view_split_view__WEBPACK_IMPORTED_MODULE_8__["CoreSplitViewComponent"],] }]
};
CoreGradesCoursePage = CoreGradesCoursePage_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'page-core-grades-course',
        template: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"])(__webpack_require__(/*! raw-loader!./course.html */ "./node_modules/raw-loader/dist/cjs.js!./src/core/features/grades/pages/course/course.html")).default,
        styles: [Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"])(__webpack_require__(/*! ./course.scss */ "./src/core/features/grades/pages/course/course.scss")).default]
    })
], CoreGradesCoursePage);

/**
 * Helper to manage the table of grades.
 */
class CoreGradesCourseManager extends _classes_page_items_list_manager__WEBPACK_IMPORTED_MODULE_9__["CorePageItemsListManager"] {
    constructor(pageComponent, courseId, userId, outsideGradesTab) {
        super(pageComponent);
        this.courseId = courseId;
        this.userId = userId;
        this.outsideGradesTab = outsideGradesTab;
    }
    /**
     * Set grades table.
     *
     * @param table Grades table.
     */
    setTable(table) {
        this.columns = table.columns;
        this.rows = table.rows;
        this.setItems(table.rows.filter(this.isFilledRow));
    }
    /**
     * @inheritdoc
     */
    select(row) {
        const _super = Object.create(null, {
            select: { get: () => super.select }
        });
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            if (this.outsideGradesTab) {
                yield _services_navigator__WEBPACK_IMPORTED_MODULE_10__["CoreNavigator"].navigateToSitePath(`/grades/${this.courseId}/${row.id}`);
                return;
            }
            return _super.select.call(this, row);
        });
    }
    /**
     * @inheritdoc
     */
    getDefaultItem() {
        return null;
    }
    /**
     * @inheritdoc
     */
    getItemPath(row) {
        return row.id.toString();
    }
    /**
     * @inheritdoc
     */
    getItemQueryParams() {
        return { userId: this.userId };
    }
    /**
     * @inheritdoc
     */
    logActivity() {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function* () {
            yield _features_grades_services_grades__WEBPACK_IMPORTED_MODULE_4__["CoreGrades"].logCourseGradesView(this.courseId, this.userId);
        });
    }
    /**
     * Check whether the given row is filled or not.
     *
     * @param row Grades table row.
     * @return Whether the given row is filled or not.
     */
    isFilledRow(row) {
        return 'id' in row;
    }
}


/***/ }),

/***/ "./src/core/features/grades/pages/course/course.scss":
/*!***********************************************************!*\
  !*** ./src/core/features/grades/pages/course/course.scss ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/*\n * App Global variables SCSS\n * ----------------------------------------------------------------------------\n * Place here the different files you should import to use global variables.\n */\n/*\n * App custom mixins for SCSS\n * ----------------------------------------------------------------------------\n * Place here our custom mixins.\n */\n/*\n * Imported ionic mixins for SCSS\n * ----------------------------------------------------------------------------\n * Place here our custom mixins.\n * Extracted from ionic.mixins.scss\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\n */\n/*\n * App Custom App variables SCSS\n * ----------------------------------------------------------------------------\n * Place here all custom app variables.\n */\n/*\n * App Global variables SCSS\n * ----------------------------------------------------------------------------\n * Place here all global variables.\n */\n/**\n * Layout Breakpoints\n *\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\n */\n:host {\n  --header-background: var(--white);\n  --odd-cell-background: var(--gray-lighter);\n  --even-cell-background: var(--white);\n  --odd-cell-hover: var(--gray-light);\n  --even-cell-hover: var(--gray-lighter);\n  --icon-color: #999999;\n}\n:host .odd {\n  --cell-background: var(--odd-cell-background);\n  --cell-hover: var(--odd-cell-hover);\n}\n:host .even {\n  --cell-background: var(--even-cell-background);\n  --cell-hover: var(--even-cell-hover);\n}\n:host-context(body.dark) {\n  --header-background: var(--black);\n  --odd-cell-background: var(--gray-darker);\n  --even-cell-background: var(--black);\n  --odd-cell-hover: var(--gray-dark);\n  --even-cell-hover: var(--gray-darker);\n  --icon-color: #eeeeee;\n}\n:host-context(ion-app.md) {\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, .13))));\n}\n:host-context(ion-app.ios) {\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));\n}\n.core-grades-table {\n  border-collapse: collapse;\n  line-height: 20px;\n  width: 100%;\n  font-size: 16px;\n  color: var(--ion-text-color);\n}\n.core-grades-table tr {\n  border-bottom: 1px solid var(--border-color);\n}\n.core-grades-table th, .core-grades-table td {\n  padding-right: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  vertical-align: top;\n  white-space: normal;\n  text-align: start;\n}\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\n  .core-grades-table th, .core-grades-table td {\n    padding-right: unset;\n    -webkit-padding-end: 10px;\n    padding-inline-end: 10px;\n  }\n}\n.core-grades-table thead th {\n  vertical-align: bottom;\n  font-weight: bold;\n  background-color: var(--header-background);\n}\n.core-grades-table tbody th {\n  font-weight: normal;\n}\n.core-grades-table #gradeitem {\n  padding-left: 5px;\n}\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\n  .core-grades-table #gradeitem {\n    padding-left: unset;\n    -webkit-padding-start: 5px;\n    padding-inline-start: 5px;\n  }\n}\n.core-grades-table .core-grades-table-gradeitem {\n  padding-left: 5px;\n  font-weight: bold;\n}\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\n  .core-grades-table .core-grades-table-gradeitem {\n    padding-left: unset;\n    -webkit-padding-start: 5px;\n    padding-inline-start: 5px;\n  }\n}\n.core-grades-table .core-grades-table-gradeitem.column-itemname {\n  padding-left: 0;\n}\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\n  .core-grades-table .core-grades-table-gradeitem.column-itemname {\n    padding-left: unset;\n    -webkit-padding-start: 0;\n    padding-inline-start: 0;\n  }\n}\n.core-grades-table .core-grades-table-gradeitem img {\n  width: 16px;\n  height: 16px;\n}\n.core-grades-table .core-grades-table-gradeitem ion-icon {\n  color: var(--icon-color);\n}\n.core-grades-table .core-grades-table-gradeitem span {\n  margin-left: 5px;\n}\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\n  .core-grades-table .core-grades-table-gradeitem span {\n    margin-left: unset;\n    -webkit-margin-start: 5px;\n    margin-inline-start: 5px;\n  }\n}\n.core-grades-table .core-grades-table-feedback {\n  padding-left: 5px;\n}\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\n  .core-grades-table .core-grades-table-feedback {\n    padding-left: unset;\n    -webkit-padding-start: 5px;\n    padding-inline-start: 5px;\n  }\n}\n.core-grades-table .core-grades-table-feedback .no-overflow {\n  overflow: auto;\n}\n.core-grades-table .dimmed_text,\n.core-grades-table .hidden {\n  opacity: 0.7;\n}\n.core-grades-table .odd td, .core-grades-table .odd th, .core-grades-table .odd th[aria-current=page], .core-grades-table .even td, .core-grades-table .even th, .core-grades-table .even th[aria-current=page] {\n  background-color: var(--cell-background);\n}\n.core-grades-table .core-grades-grade-clickable {\n  cursor: pointer;\n}\n.core-grades-table .core-grades-grade-clickable:hover td, .core-grades-table .core-grades-grade-clickable:hover th, .core-grades-table .core-grades-grade-clickable:hover th[aria-current=page] {\n  background-color: var(--cell-hover);\n}\ncore-split-view.nested .core-grades-table .ion-hide-md-down,\ncore-split-view.menu-and-content .core-grades-table .ion-hide-md-down {\n  display: none;\n  opacity: 0;\n}\n@media (max-width: 767.98px) {\n  .core-grades-table td {\n    font-size: 0.85em;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */");

/***/ })

}]);
//# sourceMappingURL=default~features-grades-grades-course-lazy-module~features-grades-grades-lazy-module.js.map