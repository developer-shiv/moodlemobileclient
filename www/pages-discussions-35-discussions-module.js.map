{"version":3,"sources":["./src/addons/messages/pages/discussions-35/discussions.html","./src/addons/messages/pages/discussions-35/discussions.module.ts","./src/addons/messages/pages/discussions-35/discussions.page.ts"],"names":[],"mappings":"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","file":"pages-discussions-35-discussions-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <h1>{{ 'addon.messages.messages' | translate }}</h1>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- Add an empty context menu so discussion page can add items in split view,\\r\\n                otherwise the menu disappears in some cases. -->\\r\\n            <core-context-menu></core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n\\r\\n        <core-search-box *ngIf=\\\"search.enabled\\\" (onSubmit)=\\\"searchMessage($event)\\\" (onClear)=\\\"clearSearch()\\\"\\r\\n            [placeholder]=\\\" 'addon.messages.message' | translate\\\" autocorrect=\\\"off\\\" spellcheck=\\\"false\\\" lengthCheck=\\\"2\\\"\\r\\n            [disabled]=\\\"!loaded\\\" searchArea=\\\"AddonMessagesDiscussions\\\" [autoFocus]=\\\"false\\\"></core-search-box>\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"loaded\\\" [message]=\\\"loadingMessage\\\">\\r\\n\\r\\n            <ion-list class=\\\"ion-no-margin\\\">\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" (click)=\\\"gotoContacts()\\\"\\r\\n                    [attr.aria-label]=\\\"'addon.messages.contacts' | translate\\\" detail=\\\"true\\\" button>\\r\\n                    <ion-icon name=\\\"fas-address-book\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    <ion-label><h2>{{ 'addon.messages.contacts' | translate }}</h2></ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n                <ng-container *ngIf=\\\"search.showResults\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <h2>{{ 'core.searchresults' | translate }}</h2>\\r\\n                        </ion-label>\\r\\n                        <ion-note slot=\\\"end\\\" class=\\\"ion-padding-end\\\"><ion-badge>{{ search.results.length }}</ion-badge></ion-note>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" *ngFor=\\\"let result of search.results\\\" button\\r\\n                        [attr.aria-label]=\\\"result.fullname\\\" (click)=\\\"gotoDiscussion(result.userid, result.messageid)\\\"\\r\\n                        [attr.aria-current]=\\\"result.userid == discussionUserId ? 'page' : 'false'\\\" detail=\\\"false\\\">\\r\\n                        <core-user-avatar [user]=\\\"result\\\" slot=\\\"start\\\" [checkOnline]=\\\"result.showonlinestatus\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ result.fullname }}</p>\\r\\n                            <p><core-format-text clean=\\\"true\\\" singleLine=\\\"true\\\" [text]=\\\"result.lastmessage\\\" contextLevel=\\\"system\\\"\\r\\n                                [contextInstanceId]=\\\"0\\\"></core-format-text></p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n                <ng-container *ngIf=\\\"!search.showResults\\\">\\r\\n                    <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" *ngFor=\\\"let discussion of discussions\\\" button\\r\\n                        [attr.aria-label]=\\\"discussion.fullname\\\" (click)=\\\"gotoDiscussion(discussion.message!.user)\\\"\\r\\n                        [attr.aria-current]=\\\"discussion.message!.user == discussionUserId ? 'page' : 'false'\\\" detail=\\\"false\\\">\\r\\n                        <core-user-avatar [user]=\\\"discussion\\\" slot=\\\"start\\\" checkOnline=\\\"false\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <div class=\\\"flex-row ion-justify-content-between\\\">\\r\\n                                <p class=\\\"item-heading\\\">{{ discussion.fullname }}</p>\\r\\n                                <ion-note *ngIf=\\\"discussion.message!.timecreated > 0 || discussion.unread\\\">\\r\\n                                    <span *ngIf=\\\"discussion.message!.timecreated > 0\\\" class=\\\"addon-message-last-message-date\\\">\\r\\n                                        {{discussion.message!.timecreated / 1000 | coreDateDayOrTime}}\\r\\n                                    </span>\\r\\n                                    <ion-icon *ngIf=\\\"discussion.unread\\\" name=\\\"fas-circle\\\" color=\\\"primary\\\" aria-hidden=\\\"true\\\">\\r\\n                                    </ion-icon>\\r\\n                                    <span *ngIf=\\\"discussion.unread\\\" class=\\\"sr-only\\\">\\r\\n                                        {{ 'addon.messages.unreadmessages' | translate }}\\r\\n                                    </span>\\r\\n                                </ion-note>\\r\\n                            </div>\\r\\n                            <p>\\r\\n                                <core-format-text clean=\\\"true\\\" singleLine=\\\"true\\\" [text]=\\\"discussion.message!.message\\\"\\r\\n                                    contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n            </ion-list>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"(!discussions || discussions.length <= 0) && !search.showResults\\\" icon=\\\"far-comments\\\"\\r\\n                [message]=\\\"'addon.messages.nomessagesfound' | translate\\\"></core-empty-box>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"(!search.results || search.results.length <= 0) && search.showResults\\\" icon=\\\"fas-search\\\"\\r\\n                [message]=\\\"'core.noresults' | translate\\\"></core-empty-box>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CoreScreen } from '@services/screen';\r\nimport { conditionalRoutes } from '@/app/app-routing.module';\r\nimport { AddonMessagesDiscussionRoute } from '@addons/messages/messages-lazy.module';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreSearchComponentsModule } from '@features/search/components/components.module';\r\n\r\nimport { AddonMessagesDiscussions35Page } from './discussions.page';\r\nimport { AddonMessagesMainMenuHandlerService } from '@addons/messages/services/handlers/mainmenu';\r\n\r\nconst mobileRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        data: {\r\n            mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME,\r\n        },\r\n        component: AddonMessagesDiscussions35Page,\r\n    },\r\n    AddonMessagesDiscussionRoute,\r\n];\r\n\r\nconst tabletRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        data: {\r\n            mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME,\r\n        },\r\n        component: AddonMessagesDiscussions35Page,\r\n        children: [\r\n            AddonMessagesDiscussionRoute,\r\n        ],\r\n    },\r\n];\r\n\r\nconst routes: Routes = [\r\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\r\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreSearchComponentsModule,\r\n    ],\r\n    declarations: [\r\n        AddonMessagesDiscussions35Page,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonMessagesDiscussions35PageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport { CoreSites } from '@services/sites';\r\nimport {\r\n    AddonMessages,\r\n    AddonMessagesDiscussion,\r\n    AddonMessagesMessageAreaContact,\r\n    AddonMessagesProvider,\r\n} from '../../services/messages';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreUtils } from '@services/utils/utils';\r\nimport { CoreApp } from '@services/app';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\r\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\r\nimport { Subscription } from 'rxjs';\r\nimport { Translate, Platform } from '@singletons';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreScreen } from '@services/screen';\r\n\r\n/**\r\n * Page that displays the list of discussions.\r\n */\r\n@Component({\r\n    selector: 'addon-messages-discussions',\r\n    templateUrl: 'discussions.html',\r\n    styleUrls: ['../../messages-common.scss'],\r\n})\r\nexport class AddonMessagesDiscussions35Page implements OnInit, OnDestroy {\r\n\r\n    protected newMessagesObserver: CoreEventObserver;\r\n    protected readChangedObserver: CoreEventObserver;\r\n    protected appResumeSubscription: Subscription;\r\n    protected pushObserver: Subscription;\r\n    protected loadingMessages: string;\r\n    protected siteId: string;\r\n\r\n    loaded = false;\r\n    loadingMessage = '';\r\n    discussions: AddonMessagesDiscussion[] = [];\r\n    discussionUserId?: number;\r\n\r\n    search = {\r\n        enabled: false,\r\n        showResults: false,\r\n        results: <AddonMessagesMessageAreaContact[]> [],\r\n        loading: '',\r\n        text: '',\r\n    };\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n    ) {\r\n\r\n        this.search.loading = Translate.instant('core.searching');\r\n        this.loadingMessages = Translate.instant('core.loading');\r\n        this.siteId = CoreSites.getCurrentSiteId();\r\n\r\n        // Update discussions when new message is received.\r\n        this.newMessagesObserver = CoreEvents.on(\r\n            AddonMessagesProvider.NEW_MESSAGE_EVENT,\r\n            (data) => {\r\n                if (data.userId && this.discussions) {\r\n                    const discussion = this.discussions.find((disc) => disc.message!.user == data.userId);\r\n\r\n                    if (typeof discussion == 'undefined') {\r\n                        this.loaded = false;\r\n                        this.refreshData().finally(() => {\r\n                            this.loaded = true;\r\n                        });\r\n                    } else {\r\n                    // An existing discussion has a new message, update the last message.\r\n                        discussion.message!.message = data.message;\r\n                        discussion.message!.timecreated = data.timecreated;\r\n                    }\r\n                }\r\n            },\r\n            this.siteId,\r\n        );\r\n\r\n        // Update discussions when a message is read.\r\n        this.readChangedObserver = CoreEvents.on(\r\n            AddonMessagesProvider.READ_CHANGED_EVENT,\r\n            (data) => {\r\n                if (data.userId && this.discussions) {\r\n                    const discussion = this.discussions.find((disc) => disc.message!.user == data.userId);\r\n\r\n                    if (typeof discussion != 'undefined') {\r\n                    // A discussion has been read reset counter.\r\n                        discussion.unread = false;\r\n\r\n                        // Conversations changed, invalidate them and refresh unread counts.\r\n                        AddonMessages.invalidateConversations(this.siteId);\r\n                        AddonMessages.refreshUnreadConversationCounts(this.siteId);\r\n                    }\r\n                }\r\n            },\r\n            this.siteId,\r\n        );\r\n\r\n        // Refresh the view when the app is resumed.\r\n        this.appResumeSubscription = Platform.resume.subscribe(() => {\r\n            if (!this.loaded) {\r\n                return;\r\n            }\r\n            this.loaded = false;\r\n            this.refreshData();\r\n        });\r\n\r\n        // If a message push notification is received, refresh the view.\r\n        this.pushObserver = CorePushNotificationsDelegate.on<CorePushNotificationsNotificationBasicData>('receive')\r\n            .subscribe((notification) => {\r\n                // New message received. If it's from current site, refresh the data.\r\n                if (CoreUtils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\r\n                // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\r\n                    this.refreshData(undefined, false);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Component loaded.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        this.route.queryParams.subscribe(async (params) => {\r\n            // When a child page loads this callback is triggered too.\r\n            this.discussionUserId = CoreNavigator.getRouteNumberParam('userId', { params }) ?? this.discussionUserId;\r\n        });\r\n\r\n        await this.fetchData();\r\n\r\n        if (!this.discussionUserId && this.discussions.length > 0 && CoreScreen.isTablet) {\r\n            // Take first and load it.\r\n            this.gotoDiscussion(this.discussions[0].message!.user);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param refresher Refresher.\r\n     * @param refreshUnreadCounts Whteher to refresh unread counts.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async refreshData(refresher?: IonRefresher, refreshUnreadCounts: boolean = true): Promise<void> {\r\n        const promises: Promise<void>[] = [];\r\n        promises.push(AddonMessages.invalidateDiscussionsCache(this.siteId));\r\n\r\n        if (refreshUnreadCounts) {\r\n            promises.push(AddonMessages.invalidateUnreadConversationCounts(this.siteId));\r\n        }\r\n\r\n        await CoreUtils.allPromises(promises).finally(() => this.fetchData().finally(() => {\r\n            if (refresher) {\r\n                refresher?.complete();\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Fetch discussions.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchData(): Promise<void> {\r\n        this.loadingMessage = this.loadingMessages;\r\n        this.search.enabled = AddonMessages.isSearchMessagesEnabled();\r\n\r\n        const promises: Promise<unknown>[] = [];\r\n\r\n        promises.push(AddonMessages.getDiscussions(this.siteId).then((discussions) => {\r\n            // Convert to an array for sorting.\r\n            const discussionsSorted: AddonMessagesDiscussion[] = [];\r\n            for (const userId in discussions) {\r\n                discussions[userId].unread = !!discussions[userId].unread;\r\n\r\n                discussionsSorted.push(discussions[userId]);\r\n            }\r\n\r\n            this.discussions = discussionsSorted.sort((a, b) => (b.message?.timecreated || 0) - (a.message?.timecreated || 0));\r\n\r\n            return;\r\n        }));\r\n\r\n        promises.push(AddonMessages.getUnreadConversationCounts(this.siteId));\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\r\n        }\r\n\r\n        this.loaded = true;\r\n    }\r\n\r\n    /**\r\n     * Clear search and show discussions again.\r\n     */\r\n    clearSearch(): void {\r\n        this.loaded = false;\r\n        this.search.showResults = false;\r\n        this.search.text = ''; // Reset searched string.\r\n        this.fetchData().finally(() => {\r\n            this.loaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Search messages cotaining text.\r\n     *\r\n     * @param query Text to search for.\r\n     * @return Resolved when done.\r\n     */\r\n    async searchMessage(query: string): Promise<void> {\r\n        CoreApp.closeKeyboard();\r\n        this.loaded = false;\r\n        this.loadingMessage = this.search.loading;\r\n\r\n        try {\r\n            const searchResults = await AddonMessages.searchMessages(query, undefined, undefined, undefined, this.siteId);\r\n            this.search.showResults = true;\r\n            this.search.results = searchResults.messages;\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingmessages', true);\r\n        }\r\n\r\n        this.loaded = true;\r\n    }\r\n\r\n    /**\r\n     * Navigate to a particular discussion.\r\n     *\r\n     * @param discussionUserId Discussion Id to load.\r\n     * @param messageId Message to scroll after loading the discussion. Used when searching.\r\n     * @param onlyWithSplitView Only go to Discussion if split view is on.\r\n     */\r\n    gotoDiscussion(discussionUserId: number, messageId?: number): void {\r\n        this.discussionUserId = discussionUserId;\r\n\r\n        const params: Params = {\r\n            userId: discussionUserId,\r\n        };\r\n\r\n        if (messageId) {\r\n            params.message = messageId;\r\n        }\r\n\r\n        const splitViewLoaded = CoreNavigator.isCurrentPathInTablet('**/messages/index/discussion');\r\n        const path = (splitViewLoaded ? '../' : '') + 'discussion';\r\n\r\n        CoreNavigator.navigate(path, { params });\r\n    }\r\n\r\n    /**\r\n     * Navigate to contacts view.\r\n     */\r\n    gotoContacts(): void {\r\n        const params: Params = {};\r\n\r\n        if (CoreScreen.isTablet && this.discussionUserId) {\r\n            params.discussionUserId = this.discussionUserId;\r\n        }\r\n\r\n        CoreNavigator.navigateToSitePath('contacts-35', { params });\r\n    }\r\n\r\n    /**\r\n     * Component destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.newMessagesObserver?.off();\r\n        this.readChangedObserver?.off();\r\n        this.appResumeSubscription?.unsubscribe();\r\n        this.pushObserver?.unsubscribe();\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}